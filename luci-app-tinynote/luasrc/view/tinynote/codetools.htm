<body>
    <link rel="stylesheet" href="/luci-static/tinynote/bootstrap.css"/>
    <script src="/luci-static/tinynote/codemirror/jquery.min.js"></script>
    <script src="/luci-static/tinynote/lib.js"></script>
    <script src="/luci-static/tinynote/vkbeautify.js"></script>
    <script src="/luci-static/tinynote/clipboard.min.js"></script>

    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/ace.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-javascript.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/theme-monokai.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/screenfull.js/5.2.0/screenfull.js"></script>

    <!-- <button type="button" class="btn cbi-button cbi-button-apply" onclick="formatLua()">Lua 格式化</button> -->
    <button type="button" class="btn cbi-button cbi-button-apply" id="copycode">复制代码</button>
    <button type="button" class="btn cbi-button cbi-button-remove" onclick="clearAll()">清空</button>
    <select class="btn custom-select" style="height: 30px; font-size: 16px; width: 150px;" id="tabsize">
        <option value="1">1 个制表符缩进</option>
        <option value="2">2 个空格缩进</option>
        <option value="3">3 个空格缩进</option>
        <option value="4" selected="selected">4 个空格缩进</option>
        <option value="8">8 个空格缩进</option>
    </select>
    <input type="file" onchange="changeToFileContent(this)"/>
    <div class="col-md-12" id="warning" style="display: none;">
        <div class="alert alert-warning">
            <a href="#" class="close" data-dismiss="alert">&times;</a>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <button type="button" class="btn cbi-button cbi-button-add" id="editor1screenfull" style="display: block; margin: 0 auto;">全屏</button>
            <div id="editor1" style="height: 500px; width: 100%;"></div>
        </div>
        <div class="col-md-6">
            <button type="button" class="btn cbi-button cbi-button-add" id="editor2screenfull" style="display: block; margin: 0 auto;">全屏</button>
            <div id="editor2" style="height: 500px; width: 100%;"></div>
        </div>
    </div>
</body>
<script type="text/javascript">
    var output;
    // customScrollbar: 自定义滚动条
    // hScrollBarAlwaysVisible: 水平滚动条是否始终可见
    // vScrollBarAlwaysVisible: 垂直滚动条是否始终可见
    // highlightGutterLine: 是否高亮显示行号区域
    // animatedScroll: 是否启用平滑滚动
    // showInvisibles: 是否显示不可见字符
    // showPrintMargin: 是否显示打印边距
    // printMarginColumn: 设置打印边距的列数
    // printMargin: 设置打印边距的显示方式
    // fadeFoldWidgets: 是否淡化折叠小部件
    // showFoldWidgets: 是否显示折叠小部件
    // displayIndentGuides: 是否显示缩进指南
    // highlightIndentGuides: 是否高亮显示缩进指南
    // showGutter: 是否显示行号区域
    // fontSize: 编辑器的字号
    // fontFamily: 编辑器的字体
    // maxLines: 编辑器的最大行数
    // minLines: 编辑器的最小行数
    // scrollPastEnd: 是否允许滚动超出内容末尾
    // fixedWidthGutter: 是否固定行号区域的宽度
    // theme: 编辑器的主题
    // hasCssTransforms: 是否启用 CSS 变换
    // maxPixelHeight: 编辑器的最大像素高度
    // useTextareaForIME: 是否使用 textarea 处理输入法
    // useResizeObserver: 是否使用 ResizeObserver 接口
    // useSvgGutterIcons: 是否使用 SVG 图标作为行号区域的图标
    // showFoldedAnnotations: 是否显示折叠的注解
    // scrollSpeed: 滚动速度
    // dragDelay: 拖拽延迟
    // dragEnabled: 是否启用拖拽
    // focusTimeout: 焦点超时
    // tooltipFollowsMouse: 鼠标提示是否跟随鼠标移动
    // firstLineNumber: 第一行的行号
    // overwrite: 是否为覆盖模式
    // newLineMode: 新行的模式
    // useWorker: 是否启用后台工作线程
    // useSoftTabs: 是否使用软制表符
    // navigateWithinSoftTabs: 是否在软制表符内导航
    // tabSize: 制表符的大小
    // wrap: 是否启用自动换行
    // indentedSoftWrap: 缩进自动换行
    // foldStyle: 折叠样式
    // mode: 编辑器的语言模式
    var editor1 = ace.edit("editor1");
    editor1.setOptions({
        theme: "ace/theme/monokai",
        mode: "ace/mode/javascript",
        fontSize: "14px",
        fontFamily: "Consolas, monospace",
        wrap: true,
        showPrintMargin: true
    });
    var editor2 = ace.edit("editor2");
    editor2.setOptions({
        theme: "ace/theme/monokai",
        mode: "ace/mode/javascript",
        fontSize: "14px",
        fontFamily: "Consolas, monospace",
        wrap: true,
        showPrintMargin: true
    });

    $(document).on("keydown", function (event) {
        if (event.key === "F11") {
            event.preventDefault();
            toggleFullScreen(editorUU);
        }
    });

    $("#editor1screenfull").on("click", function () {
        toggleFullScreen(document.getElementById("editor1"));
    });

    $("#editor2screenfull").on("click", function () {
        toggleFullScreen(document.getElementById("editor2"));
    });

    function toggleFullScreen(editor) {
        if (screenfull.isEnabled) {
            if (screenfull.isFullscreen) {
                screenfull.exit();
            } else {
                screenfull.request(editor);
            }
        }
    }

    var indent_size = calculateTabSize();
    $('#tabsize').on('change', function () {
        indent_size = calculateTabSize();
    });
    var indent_char;
    if (indent_size === '\t') {
        indent_size = '1';
        indent_char = '\t';
    }

    function JsCompression(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        $.getScript("/luci-static/tinynote/format.js", function () {
            $.getScript("/luci-static/tinynote/beautifier.js", function () {
                var packer = new Packer();
                if (a === "minify") output = packer.minify(content);
                else if (a === "pack") output = packer.pack(content, true, true);
                else if (a === "beautify") output = beautifier.js(content, {
                    indent_size,
                    indent_char,
                    jslint_happy: true,
                    wrap_line_length: 0,
                    templating: ["auto"],
                    end_with_newline: true,
                    max_preserve_newlines: 1,
                    space_in_empty_paren: true,
                    operator_position: "before-newline",
                    indent_with_tabs: indent_size === '\t'
                });
                editor1.getSession().setMode("ace/mode/javascript");
                editor2.getSession().setMode("ace/mode/javascript");
                editor2.setValue(output || '没有返回值');
            })
        });
    }

    function examineJavaScript() {
        var content = editor1.getValue();
        if (!content.trim().length) return;

        function checkSyntax() {
            var result = JSHINT(content, { asi: true, esversion: 8 });
            if (result) {
                showSuccessMessage("JavaScript 语法通过");
            } else {
                var errorMessage = "";
                JSHINT.errors.forEach(function (e) {
                    var errorEvidence = e.evidence ? '"<b style="color: red;">' + e.evidence + '</b>"，' : '';
                    errorMessage += '在第 ' + e.line + ' 行，第 ' + e.character + ' 列，' + errorEvidence + '错误代码：' + e.code + ' :' + getErrorMessage(e.code) + '<br>';
                });
                showErrorMessage("JavaScript 语法错误：<br>" + errorMessage);
            }
        }
        if ("undefined" == typeof JSHINT) {
            $.getScript("https://cdn.bootcdn.net/ajax/libs/jshint/2.13.6/jshint.js", checkSyntax);
        } else {
            checkSyntax();
        }
    }

    function CSSFormat(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "/luci-static/tinynote/beautifier.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-css.js"
        ];
        loadScripts(scripts)
            .then(function () {
                // selector_separator_newline: 一个布尔值，表示在选择器分隔符（如逗号）后是否换行，默认为true。
                // newline_between_rules: 一个布尔值，表示在规则之间是否插入换行，默认为true。
                // space_around_selector_separator: 一个布尔值，表示在选择器分隔符周围是否增加空格。
                // space_around_combinator: 一个布尔值，表示在组合器（如 +、>）周围是否增加空格，如果未设置，则默认与space_around_selector_separator相同。
                // brace_style: 一个字符串，表示大括号的样式，可选值为['collapse', 'expand', 'end-expand', 'none', 'preserve-inline']。默认为'collapse'。
                if (a === "format") output = beautifier.css(content);
                else if (a === "min") output = vkbeautify.cssmin(content);
                else if (a === "pack") output = vkbeautify.csspack(content);
                editor1.getSession().setMode("ace/mode/css");
                editor2.getSession().setMode("ace/mode/css");
                editor2.setValue(output || '没有返回值');
            });
    }

    function jsonFormat(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                editor1.getSession().setMode("ace/mode/json");
                try {
                    if (a === 'min') output = vkbeautify.jsonmin(content);
                    else if (a === 'format') output = vkbeautify.json(content, indent_size);
                    // output = JSON.stringify($.parseJSON(content), null, indent_size);
                    else if (a === 'safeLoad') {
                        jsonlint.parse(content);
                        return showSuccessMessage("JSON 语法通过");
                    }
                    editor2.getSession().setMode("ace/mode/json");
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function formatLua() {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        try {
            output = beautifyLua(content);
            editor2.setValue(output || '没有返回值');
        } catch (e) {
            showErrorMessage("Lua 语法错误：" + e.message);
        }
    }

    function FormatHTML(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "/luci-static/tinynote/beautifier.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-html.js"
        ];
        loadScripts(scripts)
            .then(function () {
                // templating: 一个数组，表示模板引擎的选择。如果长度为1且值为'auto'，则默认使用['django', 'erb', 'handlebars', 'php']作为模板引擎。
                // indent_inner_html: 一个布尔值，表示是否缩进内部HTML代码。
                // indent_body_inner_html: 一个布尔值，表示是否缩进body标签内部的HTML代码，默认为true。
                // indent_head_inner_html: 一个布尔值，表示是否缩进head标签内部的HTML代码，默认为true。
                // indent_handlebars: 一个布尔值，表示是否缩进handlebars代码，默认为true。
                // wrap_attributes: 一个字符串，表示如何包装HTML属性。可选值为['auto', 'force', 'force-aligned', 'force-expand-multiline', 'aligned-multiple', 'preserve', 'preserve-aligned']。
                // wrap_attributes_min_attrs: 一个数字，表示多少个属性以上才会进行属性换行包装，默认为2。
                // wrap_attributes_indent_size: 一个数字，表示属性包装时的缩进大小，默认与indent_size相同。
                // extra_liners: 一个数组，表示额外的需要换行的标签，如['head', 'body', '/html']。
                // inline: 一个数组，表示内联元素的列表。
                // inline_custom_elements: 一个布尔值，表示是否内联自定义元素，默认为true。
                // void_elements: 一个数组，表示空元素的列表。
                // unformatted: 一个数组，表示不需要格式化的标签列表。
                // content_unformatted: 一个数组，表示内部内容不需要格式化的标签列表。
                // unformatted_content_delimiter: 一个字符串，表示内部不需要格式化的内容的分隔符。
                // indent_scripts: 一个字符串，表示脚本标签的缩进方式。可选值为['normal', 'keep', 'separate']。
                try {
                    editor1.getSession().setMode("ace/mode/html");
                    editor2.getSession().setMode("ace/mode/html");
                    if (a === "format") output = beautifier.html(content, {
                        indent_size,
                        indent_char,
                        templating: ["auto"]
                    });
                    else if (a === "min") output = vkbeautify.xmlmin(content);
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("HTML 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function FormatYAML(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-yaml.js",
            "https://cdn.bootcdn.net/ajax/libs/js-yaml/4.1.0/js-yaml.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    editor1.getSession().setMode("ace/mode/yaml");
                    if (a === 'json') { // 转换json
                        output = vkbeautify.json(jsyaml.load(content), indent_size);
                        editor2.getSession().setMode("ace/mode/json");
                    } else if (a === 'safeLoad') { //语法检查
                        jsyaml.load(content)
                        return showSuccessMessage("YAML 语法通过");
                    } else if (a === 'format') { //格式化
                        output = jsyaml.dump(jsyaml.load(content), {
                            indent: indent_size
                        });
                        editor2.getSession().setMode("ace/mode/yaml");
                    } else if (a === 'yaml') { //JSON 转 YAML
                        output = jsyaml.dump(JSON.parse(content), {
                            quotingType: "",
                            indent: indent_size
                        });
                        editor1.getSession().setMode("ace/mode/json");
                        editor2.getSession().setMode("ace/mode/yaml");
                    }
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("YAML 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function jsonTocsv() {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    var i = jsonlint.parse(content),
                        n = jsonToCsv2(i, ",", !0, !1, !1);
                    editor1.getSession().setMode("ace/mode/json");
                    editor2.getSession().setMode("ace/mode/json");
                    editor2.setValue(n || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function jsonToXML() {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "/luci-static/tinynote/ObjTree.min.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-xml.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    var x = content.replace(/([ :$&]+)(?=[(\w* *]*":)/g, "_"),
                        json = jsonlint.parse(x),
                        xotree = new XML.ObjTree(),
                        xml = xotree.writeXML(json);
                    editor1.getSession().setMode("ace/mode/json");
                    editor2.getSession().setMode("ace/mode/xml");
                    editor2.setValue(vkbeautify.xml(xml) || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    $("#copycode").click(function () { var code = editor2.getValue(); if (!code.trim().length) return; var $button = $(this), $textarea = $('<textarea>').val(code).css({ position: 'absolute', left: '-9999px' }).attr('readonly', ''); $('body').append($textarea); $textarea.select(); document.execCommand('copy'); $textarea.remove(); $button.text('已复制'); if (editor2) editor2.execCommand('selectAll'); setTimeout(function () { $button.text('复制代码') }, 2000) });

    // new ClipboardJS('#copycode', {
    //     text: function () {
    //         return editor2.getValue();
    //     }
    // }).on('success', function (e) {
    //     if (editor2) editor2.execCommand('selectAll');
    //     showSuccessMessage("已复制");
    //     e.clearSelection();
    // }).on('error', function (e) {
    //     showErrorMessage('复制出错' + e.message)
    // });
</script>
