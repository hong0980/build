<body>
    <style>
        @font-face {
            font-family: 'Material Icons';
            font-style: normal;
            font-weight: 400;
            src: url(https://fonts.gstatic.com/s/materialicons/v55/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format('woff2');
        }

        .material-icons {
            font-family: 'Material Icons';
            font-weight: normal;
            font-style: normal;
            font-size: 24px;
            line-height: 1;
            cursor: pointer;
            letter-spacing: normal;
            text-transform: none;
            display: inline-block;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
        }
    </style>
    <link rel="stylesheet" href="/luci-static/tinynote/bulma.css" />
    <script src="/luci-static/tinynote/codemirror/jquery.min.js"></script>
    <script src="/luci-static/tinynote/lib.js"></script>
    <script src="/luci-static/tinynote/vkbeautify.js"></script>
    <script src="/luci-static/tinynote/screenfull.js"></script>
    <script src="/luci-static/tinynote/clipboard.min.js"></script>

    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/ace.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-javascript.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/theme-monokai.js"></script>

    <br><div id="warning" style="display: none;"></div>
    <div class="container is-fluid">
        <div class="columns mb-0 is-desktop">
            <div class="column">
                <div id="inputDiv" class="aceEditorBorder">
                    <div class="aceEditorMenu">
                        <a style="float:left; cursor: default;">
                            <i>输入</i>
                        </a>
                        <div class="editortoolbar btn-group-sm">
                            <a class="icon" onclick="setFromLocalStorage()" title="从本地存储加载以前的数据">
                                <i class="material-icons">history</i>
                            </a>
                            <a id="fileopen" class="icon" title="打开文件">
                                <i class="material-icons">folder_open</i>
                            </a>
                            <a class="icon" title="保存" onclick="openSaveModal(true)">
                                <i class="material-icons">save</i>
                            </a>
                            <a class="icon" title="清除" onclick="clearAll(event, editor1);">
                                <i class="material-icons">delete_outline</i>
                            </a>
                            <a id="copyeditor1" class="icon" title="复制到剪贴板">
                                <i class="material-icons">content_copy</i>
                            </a>
                            <a id="inputFullScreen" class="icon is-hidden-mobile" onclick="addFullScreen('input');" title="全屏">
                                <i class="material-icons">open_in_full</i>
                            </a>
                            <a id="inputCloseScreen" style="display:none" class="icon" onclick="removeFullScreen('input');" title="关闭全屏">
                                <i class="material-icons">close_fullscreen</i>
                            </a>
                        </div>
                    </div>
                    <div id="editor1" class="twoEditor"></div>
                    <div class="columns is-mobile m-0 aceStatusBar" id="inputStatusBar">
                        <div class="column is-two-thirds p-0 pl-0 status-left" id="inputAceLineColumn">Ln: 1 Col: 0; Max Col: 0</div>
                        <div class="column is-one-thirds p-0 has-text-centered status-right" id="inputTextSize">Size: 0 Byte</div>
                    </div>
                </div>
            </div>
            <div class="column is-12-mobile is-2-desktop box has-text-centered">
                <div id="success" style="display: none;"></div>
                <div class="columns mb-0">
                    <div class="column">
                        <label class="button is-fullwidth" title="上传文件" for="fileInput">
                            <input id="fileInput" class="file-input" type="file" onchange="changeToFileContent(this)" style="display: none;" />
                            <span class="icon is-hidden-desktop-only">
                                <i class="material-icons">publish</i>
                            </span>
                            <span>文件</span>
                        </label>
                    </div>
                </div>
                <div class="field">
                    <p class="control">
                        <button class="button is-fullwidth" onclick="downloadFile(event);">
                            <span class="icon">
                                <i class="material-icons">cloud_download</i>
                            </span>
                            <span>下载</span>
                        </button>
                    </p>
                </div>
                <div class="field">
                    <p class="control">
                        <button class="button is-fullwidth" onclick="clearAll();">
                            <span class="icon">
                                <i class="material-icons">delete_outline</i>
                            </span>
                            <span>清空全部</span>
                        </button>
                    </p>
                </div>
                <div class="field">
                    <p class="control">
                        <select id="tabsize" class="select is-fullwidth">
                            <option value="1">1 个制表符缩进</option>
                            <option value="2">2 个空格缩进</option>
                            <option value="3">3 个空格缩进</option>
                            <option value="4" selected="selected">4 个空格缩进</option>
                            <option value="8">8 个空格缩进</option>
                        </select>
                    </p>
                </div>
            </div>
            <div class="column">
                <div id="outputDiv" class="aceEditorBorder">
                    <div class="aceEditorMenu">
                        <a style="float:left;cursor: default;">
                            <i>输出</i>
                        </a>
                        <div class="editortoolbar btn-group-sm">
                            <a class="icon" title="保存" onclick="openSaveModal(true)">
                                <i class="material-icons">save</i>
                            </a>
                            <a class="icon" title="清除" onclick="clearAll(event, editor2);">
                                <i class="material-icons">delete_outline</i>
                            </a>
                            <a  id="copyeditor2" class="icon" title="复制到剪贴板">
                                <i class="material-icons">content_copy</i>
                            </a>
                            <a class="icon" title="下载" onclick="downloadFile(event);">
                                <i class="material-icons">cloud_download</i>
                            </a>
                            <a id="outputFullScreen" class="icon is-hidden-mobile" onclick="addFullScreen('output');" title="全屏">
                                <i class="material-icons">open_in_full</i>
                            </a>
                            <a id="outputCloseScreen" class="icon" style="display:none" onclick="removeFullScreen('output');" title="关闭全屏">
                                <i class="material-icons">close_fullscreen</i>
                            </a>
                        </div>
                    </div>
                    <div id="editor2" class="twoEditor"></div>
                    <div class="columns is-mobile m-0 aceStatusBar" id="outputStatusBar">
                        <div class="column is-two-thirds p-0 pl-0 status-left" id="outputAceLineColumn">Ln: 1 Col: 0; Max Col: 0</div>
                        <div class="column is-one-thirds p-0 has-text-centered status-right" id="outputTextSize">Size: 0 Byte</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
<script type="text/javascript">
    var output;
    // customScrollbar: 自定义滚动条
    // hScrollBarAlwaysVisible: 水平滚动条是否始终可见
    // vScrollBarAlwaysVisible: 垂直滚动条是否始终可见
    // highlightGutterLine: 是否高亮显示行号区域
    // animatedScroll: 是否启用平滑滚动
    // showInvisibles: 是否显示不可见字符
    // showPrintMargin: 是否显示打印边距
    // printMarginColumn: 设置打印边距的列数
    // printMargin: 设置打印边距的显示方式
    // fadeFoldWidgets: 是否淡化折叠小部件
    // showFoldWidgets: 是否显示折叠小部件
    // displayIndentGuides: 是否显示缩进指南
    // highlightIndentGuides: 是否高亮显示缩进指南
    // showGutter: 是否显示行号区域
    // fontSize: 编辑器的字号
    // fontFamily: 编辑器的字体
    // maxLines: 编辑器的最大行数
    // minLines: 编辑器的最小行数
    // scrollPastEnd: 是否允许滚动超出内容末尾
    // fixedWidthGutter: 是否固定行号区域的宽度
    // theme: 编辑器的主题
    // hasCssTransforms: 是否启用 CSS 变换
    // maxPixelHeight: 编辑器的最大像素高度
    // useTextareaForIME: 是否使用 textarea 处理输入法
    // useResizeObserver: 是否使用 ResizeObserver 接口
    // useSvgGutterIcons: 是否使用 SVG 图标作为行号区域的图标
    // showFoldedAnnotations: 是否显示折叠的注解
    // scrollSpeed: 滚动速度
    // dragDelay: 拖拽延迟
    // dragEnabled: 是否启用拖拽
    // focusTimeout: 焦点超时
    // tooltipFollowsMouse: 鼠标提示是否跟随鼠标移动
    // firstLineNumber: 第一行的行号
    // overwrite: 是否为覆盖模式
    // newLineMode: 新行的模式
    // useWorker: 是否启用后台工作线程
    // useSoftTabs: 是否使用软制表符
    // navigateWithinSoftTabs: 是否在软制表符内导航
    // tabSize: 制表符的大小
    // wrap: 是否启用自动换行
    // indentedSoftWrap: 缩进自动换行
    // foldStyle: 折叠样式
    // mode: 编辑器的语言模式
    var editor1 = ace.edit("editor1");
    editor1.setOptions({
        theme: "ace/theme/monokai",
        mode: "ace/mode/javascript",
        fontSize: "14px",
        fontFamily: "Consolas, monospace",
        wrap: true,
        showPrintMargin: true
    });

    var editor2 = ace.edit("editor2");
    editor2.setOptions({
        theme: "ace/theme/monokai",
        mode: "ace/mode/javascript",
        fontSize: "14px",
        fontFamily: "Consolas, monospace",
        wrap: true,
        showPrintMargin: true
    });

    var indent_size = calculateTabSize();
    $('#tabsize').on('change', function () {
        indent_size = calculateTabSize();
    });
    var indent_char = ' ';
    if (indent_size === '\t') {
        indent_size = '1';
        indent_char = '\t';
    }

    function JsCompression(a) {
        var content = $.trim(editor1.getValue());
        if (!content) return;
        $.getScript("/luci-static/tinynote/format.js", function () {
            $.getScript("/luci-static/tinynote/beautifier.js", function () {
                var packer = new Packer();
                if (a === "minify") output = packer.minify(content);
                else if (a === "pack") output = packer.pack(content, true, true);
                else if (a === "beautify") output = beautifier.js(content, {
                    indent_size,
                    indent_char,
                    jslint_happy: true,
                    wrap_line_length: 0,
                    templating: ["auto"],
                    end_with_newline: true,
                    max_preserve_newlines: 1,
                    space_in_empty_paren: true,
                    operator_position: "before-newline",
                    indent_with_tabs: indent_size === '\t'
                });
                editor1.getSession().setMode("ace/mode/javascript");
                editor2.getSession().setMode("ace/mode/javascript");
                editor2.setValue(output || '没有返回值');
            })
        });
    }

    function examineJavaScript() {
        var content = $.trim(editor1.getValue());
        if (!content) return;

        function checkSyntax() {
            var result = JSHINT(content, { asi: true, esversion: 8 });
            if (result) {
                showSuccessMessage("JavaScript 语法通过");
            } else {
                var errorMessage = "";
                JSHINT.errors.forEach(function (e) {
                    var errorEvidence = e.evidence ? '"<b style="color: red;">' + e.evidence + '</b>"，' : '';
                    errorMessage += '在第 ' + e.line + ' 行，第 ' + e.character + ' 列，' + errorEvidence + '错误代码：' + e.code + ' :' + getErrorMessage(e.code) + '<br>';
                });
                showErrorMessage("JavaScript 语法错误：<br>" + errorMessage);
            }
        }
        if ("undefined" == typeof JSHINT) {
            $.getScript("https://cdn.bootcdn.net/ajax/libs/jshint/2.13.6/jshint.js", checkSyntax);
        } else {
            checkSyntax();
        }
    }

    function CSSFormat(a) {
        var content = $.trim(editor1.getValue());
        if (!content) return;
        var scripts = [
            "/luci-static/tinynote/beautifier.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-css.js"
        ];
        loadScripts(scripts)
            .then(function () {
                // selector_separator_newline: 一个布尔值，表示在选择器分隔符（如逗号）后是否换行，默认为true。
                // newline_between_rules: 一个布尔值，表示在规则之间是否插入换行，默认为true。
                // space_around_selector_separator: 一个布尔值，表示在选择器分隔符周围是否增加空格。
                // space_around_combinator: 一个布尔值，表示在组合器（如 +、>）周围是否增加空格，如果未设置，则默认与space_around_selector_separator相同。
                // brace_style: 一个字符串，表示大括号的样式，可选值为['collapse', 'expand', 'end-expand', 'none', 'preserve-inline']。默认为'collapse'。
                if (a === "format") output = beautifier.css(content);
                else if (a === "min") output = vkbeautify.cssmin(content);
                else if (a === "pack") output = vkbeautify.csspack(content);
                editor1.getSession().setMode("ace/mode/css");
                editor2.getSession().setMode("ace/mode/css");
                editor2.setValue(output || '没有返回值');
            });
    }

    function jsonFormat(a) {
        var content = $.trim(editor1.getValue());
        if (!content) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                editor1.getSession().setMode("ace/mode/json");
                try {
                    if (a === 'min') output = vkbeautify.jsonmin(content);
                    else if (a === 'format') output = vkbeautify.json(content, indent_size);
                    // output = JSON.stringify($.parseJSON(content), null, indent_size);
                    else if (a === 'safeLoad') {
                        jsonlint.parse(content);
                        return showSuccessMessage("JSON 语法通过");
                    }
                    editor2.getSession().setMode("ace/mode/json");
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function formatLua() {
        var content = $.trim(editor1.getValue());
        if (!content) return;
        try {
            output = beautifyLua(content);
            editor2.setValue(output || '没有返回值');
        } catch (e) {
            showErrorMessage("Lua 语法错误：" + e.message);
        }
    }

    function FormatHTML(a) {
        var content = $.trim(editor1.getValue());
        if (!content) return;
        var scripts = [
            "/luci-static/tinynote/beautifier.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-html.js"
        ];
        loadScripts(scripts)
            .then(function () {
                // templating: 一个数组，表示模板引擎的选择。如果长度为1且值为'auto'，则默认使用['django', 'erb', 'handlebars', 'php']作为模板引擎。
                // indent_inner_html: 一个布尔值，表示是否缩进内部HTML代码。
                // indent_body_inner_html: 一个布尔值，表示是否缩进body标签内部的HTML代码，默认为true。
                // indent_head_inner_html: 一个布尔值，表示是否缩进head标签内部的HTML代码，默认为true。
                // indent_handlebars: 一个布尔值，表示是否缩进handlebars代码，默认为true。
                // wrap_attributes: 一个字符串，表示如何包装HTML属性。可选值为['auto', 'force', 'force-aligned', 'force-expand-multiline', 'aligned-multiple', 'preserve', 'preserve-aligned']。
                // wrap_attributes_min_attrs: 一个数字，表示多少个属性以上才会进行属性换行包装，默认为2。
                // wrap_attributes_indent_size: 一个数字，表示属性包装时的缩进大小，默认与indent_size相同。
                // extra_liners: 一个数组，表示额外的需要换行的标签，如['head', 'body', '/html']。
                // inline: 一个数组，表示内联元素的列表。
                // inline_custom_elements: 一个布尔值，表示是否内联自定义元素，默认为true。
                // void_elements: 一个数组，表示空元素的列表。
                // unformatted: 一个数组，表示不需要格式化的标签列表。
                // content_unformatted: 一个数组，表示内部内容不需要格式化的标签列表。
                // unformatted_content_delimiter: 一个字符串，表示内部不需要格式化的内容的分隔符。
                // indent_scripts: 一个字符串，表示脚本标签的缩进方式。可选值为['normal', 'keep', 'separate']。
                try {
                    editor1.getSession().setMode("ace/mode/html");
                    editor2.getSession().setMode("ace/mode/html");
                    if (a === "format") output = beautifier.html(content, {
                        indent_size,
                        indent_char,
                        templating: ["auto"]
                    });
                    else if (a === "min") output = vkbeautify.xmlmin(content);
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("HTML 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function FormatYAML(a) {
        var content = $.trim(editor1.getValue());
        if (!content) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-yaml.js",
            "https://cdn.bootcdn.net/ajax/libs/js-yaml/4.1.0/js-yaml.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    editor1.getSession().setMode("ace/mode/yaml");
                    if (a === 'json') { // 转换json
                        output = vkbeautify.json(jsyaml.load(content), indent_size);
                        editor2.getSession().setMode("ace/mode/json");
                    } else if (a === 'safeLoad') { //语法检查
                        jsyaml.load(content)
                        return showSuccessMessage("YAML 语法通过");
                    } else if (a === 'format') { //格式化
                        output = jsyaml.dump(jsyaml.load(content), {
                            indent: indent_size
                        });
                        editor2.getSession().setMode("ace/mode/yaml");
                    } else if (a === 'yaml') { //JSON 转 YAML
                        output = jsyaml.dump(JSON.parse(content), {
                            quotingType: "",
                            indent: indent_size
                        });
                        editor1.getSession().setMode("ace/mode/json");
                        editor2.getSession().setMode("ace/mode/yaml");
                    }
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("YAML 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function jsonTocsv() {
        var content = $.trim(editor1.getValue());
        if (!content) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    var i = jsonlint.parse(content),
                        n = jsonToCsv2(i, ",", !0, !1, !1);
                    editor1.getSession().setMode("ace/mode/json");
                    editor2.getSession().setMode("ace/mode/json");
                    editor2.setValue(n || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function jsonToXML() {
        var content = $.trim(editor1.getValue());
        if (!content) return;
        var scripts = [
            "/luci-static/tinynote/ObjTree.min.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-xml.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    var x = content.replace(/([ :$&]+)(?=[(\w* *]*":)/g, "_"),
                        json = jsonlint.parse(x),
                        xotree = new XML.ObjTree(),
                        xml = xotree.writeXML(json);
                    editor1.getSession().setMode("ace/mode/json");
                    editor2.getSession().setMode("ace/mode/xml");
                    editor2.setValue(vkbeautify.xml(xml) || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function setupClipboard(editor, buttonId) {
        return new ClipboardJS('#' + buttonId, {
            text: function () {
                return editor.getValue();
            }
        }).on('success', function (e) {
            if (editor) editor.execCommand('selectAll');
            showSuccessMessage("已复制");
            e.clearSelection();
        }).on('error', function (e) {
            showErrorMessage((editor.getValue().trim() === '') ? '内容为空' : '复制出错' + e.action);
        });
    }

    setupClipboard(editor1, 'copyeditor1');
    setupClipboard(editor2, 'copyeditor2');

    $('#editor1screenfull').on('click', function () {
        toggleFullScreen($('#editor1')[0]);
    });

    $('#editor2screenfull').on('click', function () {
        toggleFullScreen($('#editor2')[0]);
    });

    $(document).on("keydown", function (event) {
        if (event.key === "F11") {
            event.preventDefault();
            toggleFullScreen($('#editor2')[0]);
        }
    });

    function downloadFile(event) {
        event.preventDefault();
        var content = $.trim(editor2.getValue());
        if (content !== '') {
            $.getScript("https://cdn.bootcdn.net/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js", function () {
                blob = new Blob(["" + content + ""], {
                    type: "text/plain; charset=utf-8"
                });
                saveAs(blob, "data.txt");
            });
        } else {
            showErrorMessage("内容为空");
        }
    }

    editor1.on("input", function () {
        updateDisplay(editor1, $("#inputTextSize"), $("#inputAceLineColumn"));
    });

    editor2.on("input", function () {
        updateDisplay(editor2, $("#outputTextSize"), $("#outputAceLineColumn"));
    });

    function updateDisplay(editor, sizeOutput, lineColumnOutput) {
        var content = editor.getValue();
        var sizes = ["Bytes", "KB", "MB", "GB", "TB"];
        var sizeInBytes = 0;

        if (content) {
            var blob = new Blob([content]);
            sizeInBytes = blob.size;
            var i = Math.floor(Math.log(sizeInBytes) / Math.log(1024));
            var size = (sizeInBytes / Math.pow(1024, i)).toFixed(2);
            sizeOutput.html("Size: " + parseInt(size) + " " + sizes[i]);
        } else {
            sizeOutput.html("Size: 0 Byte");
        }

        var cursor = editor.selection.getCursor();
        var lineNumber = cursor.row + 1;
        var columnNumber = cursor.column + 1;
        var session = editor.getSession();
        var lineCount = session.getLength();
        var maxColumnCount = 0;

        for (var i = 0; i < lineCount; i++) {
            maxColumnCount = Math.max(maxColumnCount, session.getLine(i).length);
        }

        lineColumnOutput.html("Ln: " + lineNumber + "; Col: " + columnNumber + "; Max Col: " + maxColumnCount);
    }

    var editor1Height, editor2Height;
    function addFullScreen(mode) {
        if (mode === 'input') {
            $('#inputDiv').addClass('fullScreen');
            // $('#inputStatusBar').hide();
            $('#inputFullScreen').hide();
            $('#inputCloseScreen').show();
            editor1.focus();
            editor1Height = $('#editor1').height();
            $('#editor1').css('height', 'calc(100% - 65px)');
        } else if (mode === 'output') {
            $('#outputDiv').addClass('fullScreen');
            // $('#outputStatusBar').hide();
            $('#outputFullScreen').hide();
            $('#outputCloseScreen').show();
            editor2.focus();
            editor2Height = $('#editor2').height();
            $('#editor2').css('height', 'calc(100% - 65px)');
        }
        $('body').css({ overflow: 'hidden', position: 'fixed' });
    }

    function removeFullScreen(mode) {
        if (mode === 'input') {
            $('#inputDiv').removeClass('fullScreen');
            // $('#inputStatusBar').show();
            $('#inputFullScreen').show();
            $('#inputCloseScreen').hide();
            editor1.focus();
            $('#editor1').css('height', editor1Height);
        } else if (mode === 'output') {
            $('#outputDiv').removeClass('fullScreen');
            // $('#outputStatusBar').show();
            $('#outputFullScreen').show();
            $('#outputCloseScreen').hide();
            editor2.focus();
            $('#editor2').css('height', editor2Height);
        }
        $('body').css({ overflow: '', position: '' });
    }
</script>
