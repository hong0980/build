<body>
    <link rel="stylesheet" href="/luci-static/tinynote/bootstrap.css"/>
    <script src="/luci-static/tinynote/codemirror/jquery.min.js"></script>
    <script src="/luci-static/tinynote/clipboard.min.js"></script>
    <script src="/luci-static/tinynote/vkbeautify.js"></script>
    <script src="/luci-static/tinynote/converttocsv-underscore-lib.js"></script>

    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/ace.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-javascript.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/theme-monokai.js"></script>

    <!-- <button type="button" class="btn cbi-button cbi-button-apply" onclick="formatLua()">Lua 格式化</button> -->
    <button type="button" class="btn cbi-button cbi-button-apply" id="copycode">复制代码</button>
    <button type="button" class="btn cbi-button cbi-button-remove" onclick="clearAll()">清空</button>
    <select class="btn custom-select" style="height: 30px; font-size: 16px; width: 150px;" id="tabsize">
        <option value="1">1 个制表符缩进</option>
        <option value="2">2 个空格缩进</option>
        <option value="3">3 个空格缩进</option>
        <option value="4" selected="selected">4 个空格缩进</option>
        <option value="8">8 个空格缩进</option>
    </select>
    <input type="file" onchange="changeToFileContent(this)"/>
    <div class="col-md-12" id="warning" style="display: none;">
        <div class="alert alert-warning">
            <a href="#" class="close" data-dismiss="alert">&times;</a>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div id="editor1" style="height: 500px; width: 100%;"></div>
        </div>
        <div class="col-md-6">
            <div id="editor2" style="height: 500px; width: 100%;"></div>
        </div>
    </div>
</body>
<script type="text/javascript">
    var output;
    // customScrollbar: 自定义滚动条
    // hScrollBarAlwaysVisible: 水平滚动条是否始终可见
    // vScrollBarAlwaysVisible: 垂直滚动条是否始终可见
    // highlightGutterLine: 是否高亮显示行号区域
    // animatedScroll: 是否启用平滑滚动
    // showInvisibles: 是否显示不可见字符
    // showPrintMargin: 是否显示打印边距
    // printMarginColumn: 设置打印边距的列数
    // printMargin: 设置打印边距的显示方式
    // fadeFoldWidgets: 是否淡化折叠小部件
    // showFoldWidgets: 是否显示折叠小部件
    // displayIndentGuides: 是否显示缩进指南
    // highlightIndentGuides: 是否高亮显示缩进指南
    // showGutter: 是否显示行号区域
    // fontSize: 编辑器的字号
    // fontFamily: 编辑器的字体
    // maxLines: 编辑器的最大行数
    // minLines: 编辑器的最小行数
    // scrollPastEnd: 是否允许滚动超出内容末尾
    // fixedWidthGutter: 是否固定行号区域的宽度
    // theme: 编辑器的主题
    // hasCssTransforms: 是否启用 CSS 变换
    // maxPixelHeight: 编辑器的最大像素高度
    // useTextareaForIME: 是否使用 textarea 处理输入法
    // useResizeObserver: 是否使用 ResizeObserver 接口
    // useSvgGutterIcons: 是否使用 SVG 图标作为行号区域的图标
    // showFoldedAnnotations: 是否显示折叠的注解
    // scrollSpeed: 滚动速度
    // dragDelay: 拖拽延迟
    // dragEnabled: 是否启用拖拽
    // focusTimeout: 焦点超时
    // tooltipFollowsMouse: 鼠标提示是否跟随鼠标移动
    // firstLineNumber: 第一行的行号
    // overwrite: 是否为覆盖模式
    // newLineMode: 新行的模式
    // useWorker: 是否启用后台工作线程
    // useSoftTabs: 是否使用软制表符
    // navigateWithinSoftTabs: 是否在软制表符内导航
    // tabSize: 制表符的大小
    // wrap: 是否启用自动换行
    // indentedSoftWrap: 缩进自动换行
    // foldStyle: 折叠样式
    // mode: 编辑器的语言模式
    var editor1 = ace.edit("editor1");
    editor1.setOptions({
        theme: "ace/theme/monokai",
        mode: "ace/mode/javascript",
        fontSize: "14px",
        fontFamily: "Consolas, monospace",
        wrap: true,
        showPrintMargin: true
    });
    var editor2 = ace.edit("editor2");
    editor2.setOptions({
        theme: "ace/theme/monokai",
        mode: "ace/mode/javascript",
        fontSize: "14px",
        fontFamily: "Consolas, monospace",
        wrap: true,
        showPrintMargin: true
    });
    var indent_size = calculateTabSize();
    $('#tabsize').on('change', function () {
        indent_size = calculateTabSize();
    });
    var indent_char;
    if (indent_size === '\t') {
        indent_size = '1';
        indent_char = '\t';
    }

    function JsCompression(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        $.getScript("/luci-static/tinynote/format.js", function () {
            $.getScript("/luci-static/tinynote/beautifier.js", function () {
                var packer = new Packer();
                if (a === "minify") output = packer.minify(content);
                else if (a === "pack") output = packer.pack(content, true, true);
                else if (a === "beautify") output = beautifier.js(content, {
                    indent_size,
                    indent_char,
                    jslint_happy: true,
                    wrap_line_length: 0,
                    templating: ["auto"],
                    end_with_newline: true,
                    max_preserve_newlines: 1,
                    space_in_empty_paren: true,
                    operator_position: "before-newline",
                    indent_with_tabs: indent_size === '\t'
                });
                editor2.setValue(output || '没有返回值');
            })
        });
    }

    function examineJavaScript() {
        var content = editor1.getValue();
        if (!content.trim().length) return;

        function checkSyntax() {
            var result = JSHINT(content, { asi: true, esversion: 8 });
            if (result) {
                showSuccessMessage("JavaScript 语法通过");
            } else {
                var errorMessage = "";
                JSHINT.errors.forEach(function (e) {
                    var errorEvidence = e.evidence ? '"<b style="color: red;">' + e.evidence + '</b>"，' : '';
                    errorMessage += '在第 ' + e.line + ' 行，第 ' + e.character + ' 列，' + errorEvidence + '错误代码：' + e.code + ' :' + getErrorMessage(e.code) + '<br>';
                });
                showErrorMessage("JavaScript 语法错误：<br>" + errorMessage);
            }
        }
        if ("undefined" == typeof JSHINT) {
            $.getScript("https://cdn.bootcdn.net/ajax/libs/jshint/2.13.6/jshint.js", checkSyntax);
        } else {
            checkSyntax();
        }
    }

    function CSSFormat(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "/luci-static/tinynote/beautifier.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-css.js"
        ];
        loadScripts(scripts)
            .then(function () {
                // selector_separator_newline: 一个布尔值，表示在选择器分隔符（如逗号）后是否换行，默认为true。
                // newline_between_rules: 一个布尔值，表示在规则之间是否插入换行，默认为true。
                // space_around_selector_separator: 一个布尔值，表示在选择器分隔符周围是否增加空格。
                // space_around_combinator: 一个布尔值，表示在组合器（如 +、>）周围是否增加空格，如果未设置，则默认与space_around_selector_separator相同。
                // brace_style: 一个字符串，表示大括号的样式，可选值为['collapse', 'expand', 'end-expand', 'none', 'preserve-inline']。默认为'collapse'。
                if (a === "format") output = beautifier.css(content);
                else if (a === "min") output = vkbeautify.cssmin(content);
                else if (a === "pack") output = vkbeautify.csspack(content);
                editor1.getSession().setMode("ace/mode/css");
                editor2.getSession().setMode("ace/mode/css");
                editor2.setValue(output || '没有返回值');
            });
    }

    function jsonFormat(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                editor1.getSession().setMode("ace/mode/json");
                try {
                    if (a === 'min') output = vkbeautify.jsonmin(content);
                    else if (a === 'format') output = vkbeautify.json(content, indent_size);
                    else if (a === 'safeLoad') {
                        jsonlint.parse(content);
                        return showSuccessMessage("JSON 语法通过");
                    }
                    editor2.getSession().setMode("ace/mode/json");
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function formatLua() {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        try {
            output = beautifyLua(content);
            editor2.setValue(output || '没有返回值');
        } catch (e) {
            showErrorMessage("Lua 语法错误：" + e.message);
        }
    }

    function FormatHTML() {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "/luci-static/tinynote/beautifier.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-html.js"
        ];
        loadScripts(scripts)
            .then(function () {
                // templating: 一个数组，表示模板引擎的选择。如果长度为1且值为'auto'，则默认使用['django', 'erb', 'handlebars', 'php']作为模板引擎。
                // indent_inner_html: 一个布尔值，表示是否缩进内部HTML代码。
                // indent_body_inner_html: 一个布尔值，表示是否缩进body标签内部的HTML代码，默认为true。
                // indent_head_inner_html: 一个布尔值，表示是否缩进head标签内部的HTML代码，默认为true。
                // indent_handlebars: 一个布尔值，表示是否缩进handlebars代码，默认为true。
                // wrap_attributes: 一个字符串，表示如何包装HTML属性。可选值为['auto', 'force', 'force-aligned', 'force-expand-multiline', 'aligned-multiple', 'preserve', 'preserve-aligned']。
                // wrap_attributes_min_attrs: 一个数字，表示多少个属性以上才会进行属性换行包装，默认为2。
                // wrap_attributes_indent_size: 一个数字，表示属性包装时的缩进大小，默认与indent_size相同。
                // extra_liners: 一个数组，表示额外的需要换行的标签，如['head', 'body', '/html']。
                // inline: 一个数组，表示内联元素的列表。
                // inline_custom_elements: 一个布尔值，表示是否内联自定义元素，默认为true。
                // void_elements: 一个数组，表示空元素的列表。
                // unformatted: 一个数组，表示不需要格式化的标签列表。
                // content_unformatted: 一个数组，表示内部内容不需要格式化的标签列表。
                // unformatted_content_delimiter: 一个字符串，表示内部不需要格式化的内容的分隔符。
                // indent_scripts: 一个字符串，表示脚本标签的缩进方式。可选值为['normal', 'keep', 'separate']。
                try {
                    editor1.getSession().setMode("ace/mode/html");
                    editor2.getSession().setMode("ace/mode/html");
                    output = beautifier.html(content, {
                        indent_size,
                        indent_char,
                        templating: ["auto"]
                    });
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("HTML 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function FormatYAML(a) {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-yaml.js",
            "https://cdn.bootcdn.net/ajax/libs/js-yaml/4.1.0/js-yaml.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    editor1.getSession().setMode("ace/mode/yaml");
                    if (a === 'json') { // 转换json
                        output = vkbeautify.json(jsyaml.load(content), indent_size);
                        editor2.getSession().setMode("ace/mode/json");
                    } else if (a === 'safeLoad') { //语法检查
                        jsyaml.load(content)
                        return showSuccessMessage("YAML 语法通过");
                    } else if (a === 'format') { //格式化
                        output = jsyaml.dump(jsyaml.load(content), {
                            indent: indent_size
                        });
                        editor2.getSession().setMode("ace/mode/yaml");
                    } else if (a === 'yaml') { //JSON 转 YAML
                        output = jsyaml.dump(JSON.parse(content), {
                            quotingType: "",
                            indent: indent_size
                        });
                        editor1.getSession().setMode("ace/mode/json");
                        editor2.getSession().setMode("ace/mode/yaml");
                    }
                    editor2.setValue(output || '没有返回值');
                } catch (e) {
                    showErrorMessage("YAML 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function jsonTocsv() {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    var i = jsonlint.parse(content),
                        n = jsonToCsv2(i, ",", !0, !1, !1);
                    editor1.getSession().setMode("ace/mode/json");
                    editor2.getSession().setMode("ace/mode/json");
                    editor2.setValue(n || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function jsonToXML() {
        var content = editor1.getValue();
        if (!content.trim().length) return;
        var scripts = [
            "/luci-static/tinynote/ObjTree.min.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-xml.js",
            "https://cdn.bootcdn.net/ajax/libs/ace/1.24.2/mode-hjson.js",
            "https://cdn.bootcdn.net/ajax/libs/jsonlint/1.6.0/jsonlint.min.js"
        ];
        loadScripts(scripts)
            .then(function () {
                try {
                    var x = content.replace(/([ :$&]+)(?=[(\w* *]*":)/g, "_"),
                        json = jsonlint.parse(x),
                        xotree = new XML.ObjTree(),
                        xml = xotree.writeXML(json);
                    editor1.getSession().setMode("ace/mode/json");
                    editor2.getSession().setMode("ace/mode/xml");
                    editor2.setValue(vkbeautify.xml(xml) || '没有返回值');
                } catch (e) {
                    showErrorMessage("JSON 语法错误：" + e.message);
                }
            })
            .catch(function (e) {
                showErrorMessage("加载错误：" + e.message);
            });
    }

    function showSuccessMessage(message) {
        $("#warning").html('<div class="alert alert-success">' + message + '</div>').show().delay(3000).fadeOut();
    }

    function showErrorMessage(message) {
        clearTimeout(window.hideTimer);
        $("#warning").html('<div class="alert alert-danger" style="position: relative;"><button id="customButton" type="button" style="position: absolute; top: 5px; right: 5px; font-size: 24px;">&#x2716</button>' + message + '</div>').fadeIn();
        $("#customButton").on("click", function () {
            $("#warning").fadeOut();
        });
        var mouseEntered = false;
        $("#warning").on({
            mouseenter: function () {
                mouseEntered = true;
                if (window.hideTimer) {
                    clearTimeout(window.hideTimer);
                }
            },
            mouseleave: function () {
                window.hideTimer = setTimeout(function () {
                    if (!mouseEntered) {
                        $("#warning").fadeOut();
                    }
                }, 5000);
            }
        }).trigger('mouseleave');
    }

    var loadedScripts = [];
    function loadScripts(scripts) {
        var promises = scripts.map(function (script) {
            if (loadedScripts.indexOf(script) === -1) {
                return new Promise(function (resolve, reject) {
                    $.getScript(script)
                        .done(function () {
                            loadedScripts.push(script);
                            resolve();
                        })
                        .fail(reject);
                });
            } else {
                return Promise.resolve();
            }
        });
        return Promise.all(promises);
    }

    function getErrorMessage(code) {
        var errorCode = {
            // JSHint options
            E001: "不好的 {a} 选项: '{b}'。",
            E002: "不好的选项值。",
            // JSHint input
            E003: "预期为 JSON 值。",
            E004: "输入既不是字符串，也不是字符串数组。",
            E005: "输入为空。",
            E006: "意外的程序提前结束。",
            // 严格模式
            E007: "缺少 \"use strict\" 声明。",
            E008: "严格模式违例。",
            E009: "全局范围内不能使用 'validthis' 选项。",
            E010: "在严格模式下不允许使用 'with'。",
            // 常量
            E011: "'{a}' 已经被声明。",
            E012: "常量 '{a}' 缺少初始化器。",
            E013: "试图覆盖常量 '{a}'。",
            // 正则表达式
            E014: "正则表达式文本可能与 '/=' 混淆。",
            E015: "未关闭的正则表达式。",
            E016: "无效的正则表达式。",
            // 标记
            E017: "未闭合的注释。",
            E018: "未开始的注释。",
            E019: "不匹配的 '{a}'。",
            E020: "期望 '{a}' 与行 {c} 的 '{b}' 匹配，但实际看到了 '{d}'。",
            E021: "期望 '{a}'，实际看到了 '{b}'。",
            E022: "换行错误 '{a}'。",
            E023: "缺少 '{a}'。",
            E024: "意外的 '{a}'。",
            E025: "在 case 子句上缺少 ':'。",
            E026: "缺少 '}' 来匹配行 {a} 的 '{'。",
            E027: "缺少 ']' 来匹配行 {a} 的 '['。",
            E028: "非法逗号。",
            E029: "未闭合的字符串。",
            // 其他
            E030: "期望标识符，实际看到了 '{a}'。",
            E031: "错误的赋值。",
            E032: "期望小整数或 'false'，实际看到了 '{a}'。",
            E033: "期望操作符，实际看到了 '{a}'。",
            E034: "get/set 是 ES5 特性。",
            E035: "缺少属性名。",
            E036: "预期看到语句，实际看到了代码块。",
            E037: null,
            E038: null,
            E039: "函数声明不可调用。请用括号包裹整个函数调用。",
            E040: "每个值应该有自己的 case 标签。",
            E041: "不可恢复的语法错误。",
            E042: "停止。",
            E043: "错误太多。",
            E044: null,
            E045: "无效的 for each 循环。",
            E046: "yield 表达式只能出现在生成器函数中。",
            E047: null,
            E048: "{a} 声明不直接在块内部。",
            E049: "不可以将 {a} 命名为 '{b}'。",
            E050: "Mozilla 要求在此处为 yield 表达式加上括号。",
            E051: null,
            E052: "未闭合的模板字面量。",
            E053: "{a} 声明仅允许在模块范围的顶层。",
            E054: "类属性必须是方法。期望 '('，但实际看到 '{a}'。",
            E055: "'{a}' 选项不可在任何可执行代码之后设置。",
            E056: "'{a}' 在声明前被使用，对于 '{b}' 变量是非法的。",
            E057: "无效的元属性: '{a}.{b}'。",
            E058: "缺少分号。",
            E059: "'instanceof' 的第二个操作数不能是不可调用的值。",
            E060: "'yield' 表达式的位置无效（考虑用括号包裹起来）。",
            E061: "Rest 参数不支持默认值。",
            E062: "super 属性只能在方法体内部使用。",
            E063: "super 调用只能在类方法体内部使用。",
            E064: "在非严格模式下定义的具有非简单参数列表的函数可能不启用严格模式。",
            E065: "异步迭代仅适用于 for-of 循环。",
            E066: "格式错误的数字字面量: '{a}'。",
            E067: "小数点前带有前导零在严格模式下不允许。",
            E068: "严格模式下不允许带有前导零的十进制。",
            E069: "重复导出绑定: '{a}'。",
            E070: "import.meta 仅可在模块代码中使用。",
            W001: "'hasOwnProperty' 是一个非常糟糕的名称。",
            W002: "在 IE 8 及更早版本中，'{a}' 的值可能被覆盖。",
            W003: "'{a}' 在定义前被使用。",
            W004: "'{a}' 已经被定义。",
            W005: "数字后面的点可能会被误解为小数点。",
            W006: "令人困惑的负号。",
            W007: "令人困惑的加号。",
            W008: "前导小数点可能会被误解为点号: '{a}'。",
            W009: "首选使用数组文本符号 []。",
            W010: "首选使用对象文本符号 {}。",
            W011: null,
            W012: null,
            W013: null,
            W014: "在 '{a}' 前的误导性换行；读者可能会将其解释为表达式边界。",
            W015: null,
            W016: "意外使用 '{a}'。",
            W017: "错误的操作数。",
            W018: "令人困惑的 '{a}' 使用。",
            W019: "使用 isNaN 函数与 NaN 进行比较。",
            W020: "只读。",
            W021: "重新赋值 '{a}'，它是一个 {b}。使用 'var' 或 'let' 声明可能会变化的绑定。",
            W022: "不要对异常参数进行赋值。",
            W023: null,
            W024: "期望标识符，实际看到了 '{a}'（保留字）。",
            W025: "函数声明缺少名称。",
            W026: "内部函数应该列在外部函数的顶部。",
            W027: "在 '{b}' 之后的 '{a}' 不可达。",
            W028: "{b} 语句上的标签 '{a}'。",
            W030: "期望赋值或函数调用，实际看到的是表达式。",
            W031: "不要为副作用而使用 'new'。",
            W032: "不必要的分号。",
            W033: "缺少分号。",
            W034: "不需要的指示符 \"{a}\"。",
            W035: "空块。",
            W036: "意外的 /*member '{a}'。",
            W037: "'{a}' 是一个语句标签。",
            W038: "'{a}' 超出作用域。",
            W039: null,
            W040: "如果以函数调用的形式执行严格模式函数，其 'this' 值将为 undefined。",
            W041: null,
            W042: "避免 EOL 转义。",
            W043: "EOL 转义错误。如有需要，请使用 multistr 选项。",
            W044: "错误或不必要的转义。",
            W045: "由数字字面量描述的值不能准确表示为数值: '{a}'。",
            W046: "不要使用额外的前导零 '{a}'。",
            W047: "尾随小数点可能会被误解为点号: '{a}'。",
            W048: "正则表达式中出现了意外的控制字符。",
            W049: "正则表达式中出现了意外的转义字符 '{a}'。",
            W050: "JavaScript URL。",
            W051: "不应该删除变量。",
            W052: "意外的 '{a}'。",
            W053: "不要将 {a} 用作构造函数。",
            W054: "Function 构造函数是 eval 的一种形式。",
            W055: "构造函数名称应该以大写字母开头。",
            W056: "错误的构造函数。",
            W057: "奇怪的构造方式。是否必须使用 'new'？",
            W058: "缺少 '()' 调用构造函数。",
            W059: "避免 arguments.{a}。",
            W060: "document.write 可能是一种形式的 eval。",
            W061: "eval 可能具有危害性。",
            W062: "将立即函数调用用括号包裹起来，以帮助读者理解表达式是函数的结果，而不是函数本身。",
            W063: "Math 不是一个函数。",
            W064: "调用构造函数时缺少 'new' 前缀。",
            W065: "缺少基数参数。",
            W066: "隐式的 eval。考虑传递一个函数而不是一个字符串。",
            W067: "不规范的函数调用。",
            W068: "不必要地在非 IIFE 函数文字中使用括号是不必要的。",
            W069: "['{a}'] 最好用点符号表示。",
            W070: "额外的逗号。（这会破坏较旧版本的 IE）",
            W071: "此函数有太多语句。({a})",
            W072: "此函数有太多参数。({a})",
            W073: "嵌套块太深。({a})",
            W074: "此函数的圈复杂度太高。({a})",
            W075: "重复的 {a} '{b}'。",
            W076: "在 get {b} 函数中不应该出现参数 '{a}'。",
            W077: "在 set {a} 函数中期望一个参数。",
            W078: "setter 被定义而没有 getter。",
            W079: "'{a}' 重新定义。",
            W080: "将 '{a}' 初始化为 'undefined' 是不必要的。",
            W081: null,
            W082: "函数声明不应该放在块中。使用函数表达式或将语句移到外部函数的顶部。",
            W083: "在循环中声明的内部函数引用外部作用域的变量可能会导致混乱的语义。({a})",
            W084: "期望条件表达式，实际看到的是赋值。",
            W085: "不要使用 'with'。",
            W086: "在 '{a}' 前期望 'break' 语句。",
            W087: "忘记 'debugger' 语句？",
            W088: "创建全局 'for' 变量。应该是 'for (var {a} ...'。",
            W089: "for in 循环的主体应该被包裹在 if 语句中，以过滤原型链中不需要的属性。",
            W090: "'{a}' 不是一个语句标签。",
            W091: null,
            W093: "你是不是想返回条件表达式，而不是一个赋值？",
            W094: "意外的逗号。",
            W095: "期望字符串，实际看到 {a}。",
            W096: "'{a}' 键可能会产生意外的结果。",
            W097: "使用 \"use strict\" 函数形式。",
            W098: "'{a}' 被定义但从未被使用。",
            W099: null,
            W100: null,
            W101: "行太长。",
            W102: null,
            W103: "'{a}' 属性已废弃。",
            W104: "'{a}' 在 ES{b} 中可用（使用 'esversion: {b}'）或 Mozilla JS 扩展（使用 moz）。",
            W105: null,
            W106: "标识符 '{a}' 不符合驼峰命名规则。",
            W107: "脚本 URL。",
            W108: "字符串必须使用双引号。",
            W109: "字符串必须使用单引号。",
            W110: "混合使用双引号和单引号。",
            W112: "未闭合的字符串。",
            W113: "字符串中包含控制字符: {a}。",
            W114: "避免 {a}。",
            W115: "严格模式下不允许八进制字面量。",
            W116: "期望 '{a}'，实际看到 '{b}'。",
            W117: "'{a}' 未定义。",
            W118: "'{a}' 仅在 Mozilla JavaScript 扩展中可用（使用 moz 选项）。",
            W119: "'{a}' 仅在 ES{b} 中可用（使用 'esversion: {b}'）。",
            W120: "你可能泄露了一个变量 ({a})。",
            W121: null,
            W122: "无效的 typeof 值 '{a}'。",
            W123: "'{a}' 已经在外部作用域中定义。",
            W124: "生成器函数应包含至少一个 yield 表达式。",
            W125: "此行包含不间断空格：http://jshint.com/docs/options/#nonbsp",
            W126: "不必要的分组运算符。",
            W127: "意外使用了逗号操作符。",
            W128: "空数组元素需要 elision=true。",
            W129: "'{a}' 在 JavaScript 将来的版本中被定义。为避免迁移问题，请使用其他变量名。",
            W130: "rest 元素后面的元素无效。",
            W131: "rest 参数后面的参数无效。",
            W132: "禁止使用 'var' 声明。请使用 'let' 或 'const'。",
            W133: "无效的 for-{a} 循环左侧: {b}。",
            W134: "'{a}' 选项仅在检查 ECMAScript {b} 代码时才可用。",
            W135: "{a} 可能不被非浏览器环境支持。",
            W136: "'{a}' 必须在函数范围内。",
            W137: "空解构：这是不必要的，可以删除。",
            W138: "默认参数之后不应该有常规参数。",
            W139: "不应将函数表达式用作 instanceof 的第二个操作数。",
            W140: "缺少逗号。",
            W141: "空 {a}：这是不必要的，可以被移除。",
            W142: "空 {a}：考虑替换为 `import '{b}';`。",
            W143: "对映射的参数对象的属性进行赋值可能导致形式参数的意外更改。",
            W144: "'{a}' 是一个非标准的语言特性。请使用 '{b}' 不稳定选项启用它。",
            W145: "多余的 'case' 子句。",
            W146: "不必要的 `await` 表达式。",
            W147: "正则表达式应包括 'u' 标志。",
            I001: "通过 'laxcomma' 选项可以关闭逗号警告。",
            I002: null,
            I003: "ES5 选项现在默认设置。",
        };
        if (errorCode[code]) {
            return errorCode[code];
        } else if (errorCode[code] === null) {
            return "为'null";
        } else {
            return "未知错误。";
        }
    }

    // function copycode(button) {
    //     var code = editor2.getValue();
    //     if (!code.trim().length) {
    //         return editor2.setValue(output || '没有返回值');
    //     };
    //     var $textarea = $('<textarea>').val(code).css({
    //         position: 'absolute',
    //         left: '-9999px'
    //     }).attr('readonly', '');
    //     $('body').append($textarea);
    //     $textarea.select();
    //     document.execCommand('copy');
    //     $textarea.remove();
    //     $(button).text('已复制');
    //     if (editor2) editor2.execCommand('selectAll');
    //     setTimeout(function () {
    //         $(button).text('复制代码');
    //     }, 2000);
    // }

    new ClipboardJS('#copycode', {
        text: function () {
            return editor2.getValue();
        }
    }).on('success', function (e) {
        if (editor2) editor2.execCommand('selectAll');
        showSuccessMessage("已复制");
        e.clearSelection();
    }).on('error', function (e) {
        showErrorMessage('复制出错' + e.message)
    });

    function clearAll() {
        if (editor1 && editor2) {
            editor1.setValue('');
            editor2.setValue('');
        }
    }

    function calculateTabSize() {
        var parsedValue = parseInt($('#tabsize').val(), 10);
        if (parsedValue === 1) parsedValue = '\t';
        return parsedValue;
    }

    function changeToFileContent(input) {
        var file = input.files[0];
        if (file) {
            var reader = new FileReader();
            reader.readAsText(file, "UTF-8");
            reader.onload = function (event) {
                if (editor1) editor1.setValue(event.target.result);
            };
            input.value = "";
        }
    }
</script>
