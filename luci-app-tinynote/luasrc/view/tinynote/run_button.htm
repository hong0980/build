<div id="<%=self.sum%>btn" style="display: inline-block; margin-right: 20px;">
    <label for="<%=self.sum%>_requestType">
        <select id="<%=self.sum%>_requestType" style="width: 60px; margin-right: 15px;" title="<%:Select request type%>">
            <option value="xhr">xhr</option>
            <option value="jQuery">jQuery</option>
            <option value="fetch">fetch</option>
        </select>
    </label>
    <label for="<%=self.sum%>_commandSelect"><%:Enter command to run:%>
        <input id="<%=self.sum%>_commandInput" list="commands" style="width: 70px;" title="<%:Enter or select the running command of the script on the current page, and leave blank to set the default command.%>">
        <datalist id="commands">
            <option value="lua">lua</option>
            <option value="sh">sh</option>
            <option value="python">python</option>
            <option value="bash">bash</option>
        </datalist>
    </label>
    <% if self:cfgvalue(section) ~=false then %>
    <input type="button" class="btn cbi-button cbi-button-apply" style="margin-right: 10px; margin-left: 10px;" onclick="handleCommandRequest(
                '<%=self.file_path%>',
                getElementBy_Id('<%=self.sum%>_commandInput'),
                getElementBy_Id('<%=self.sum%>_requestType')
            );" <% if self.disable then %>disabled<% end %> <%=attr("name", cbid) .. attr("id", cbid) .. attr("value", self.inputtitle or self.title)%> />
    <% else %> - <% end %>
    <label for="<%=self.sum%>_shellInput"><%:Enter shell command:%>
        <input id="<%=self.sum%>_shellInput" style="width: 150px; margin-right: 10px;" title="<%:Enter a shell command that can be run%>">
        <button type="button" class="btn cbi-button cbi-button-apply" onclick="
            handleCommandRequest(
                undefined,
                getElementBy_Id('<%=self.sum%>_shellInput'),
                getElementBy_Id('<%=self.sum%>_requestType')
            );"><%:Execute Command%></button>
    </label>
</div>
<style>
    .alert-content {
        max-height: calc(70vh - 100px);           /* 减去按钮高度和上下边距的高度 */
        overflow: auto;                           /* 如果弹窗内容超出设置的高度，显示滚动条 */
    }

    .alert-content pre {
        margin: 0;
        cursor: text;                             /* 文本光标 */
        overflow: auto;                           /* 如果内容超出高度，显示滚动条 */
        color: #66D9EF;                           /* 字体颜色为蓝色 */
        font-size: 14px;                          /* 字体大小为13像素 */
        text-align: left;                         /* 文字左对齐 */
        line-height: 1.5;                         /* 行高 */
        /*color: white;                             /* 字体颜色为白色 */
        font-family: Consolas;                    /* 字体设置为Consolas */
        background-color: #272822;                /* 背景颜色为黑色 */
    }

    .alert-mask {
        position: fixed;                          /* 使用固定定位将遮罩层固定在页面上 */
        display: flex;                            /* 使用 Flex 布局 */
        justify-content: center;                  /* 主轴上的对齐方式为居中对齐 */
        align-items: center;                      /* 交叉轴上的对齐方式为居中对齐 */
        top: 0;                                   /* 距离顶部为0 */
        left: 0;                                  /* 距离左侧为0 */
        width: 100%;                              /* 宽度占满整个视口 */
        height: 100%;                             /* 高度占满整个视口 */
        background-color: rgba(0, 0, 0, 0.5);     /* 设置背景颜色，使用半透明黑色 */
        z-index: 999;                             /* 设置层级，使其在最上层显示 */
    }

    .alert-container {                            /* 定义弹窗容器的样式 */
        position: relative;                       /* 设置相对定位 */
        border-left: 2px solid #fff;              /* 左边框，颜色为白色 */
        border-right: 2px solid #fff;             /* 右边框，颜色为白色 */
        border-bottom: 2px solid #fff;            /* 下边框，颜色为白色 */
        max-width: 900px;                         /* 最大宽度为900像素 */
        width: 70%;                               /* 宽度为父元素宽度的70% */
        max-height: 70vh;                         /* 最大高度为屏幕高度的70% */
        overflow: auto;                           /* 超出部分自动滚动 */
        background-color: #fff;                   /* 白色背景 */
        border-radius: 5px;                       /* 圆角边框 */
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); /* 设置阴影效果 */
        cursor: move;                             /* 拖动手势光标 */
    }

    .alert-title {                                /* 定义弹窗标题栏的样式 */
        font-size: 20px;                          /* 设置字体大小为20像素  */
        margin-top: 10px;                         /* 上边距为10像素 */
        font-weight: bold;                        /* 设置字体加粗 */
        text-align: center;                       /* 文本居中对齐 */
        margin-bottom: 10px;                      /* 下边距为10像素 */
    }

    .alert-confirm {                              /* 定义弹窗确认按钮的父容器样式 */
        left: 50%;                                /* 水平居中对齐 */
        bottom: 20px;                             /* 距离底部 10 像素 */
        display: flex;                            /* 使用 Flex 布局 */
        position: absolute;                       /* 设置绝对定位 */
        justify-content: center;                  /* 水平居中对齐的方式为居中对齐 */
        transform: translateX(-50%);              /* 平移来水平居中 */
    }

    .copy-btn, .alert-btn,
    .full-screen-btn {                            /* 定义弹窗按钮的样式 */
        bottom: 5px;                              /* 距离底部 10 像素 */
        color: #fff;                              /* 字体颜色为白色 */
        border: none;                             /* 去除边框 */
        cursor: pointer;                          /* 手型光标 */
        position: sticky;                         /* 设置为粘性定位 */
        padding: 6px 10px;                        /* 上下内边距为6像素，左右内边距为10像素 */
        border-radius: 5px;                       /* 圆角边框 */
        margin-right: 50px;                       /* 设置按钮的右边外边距，增加按钮之间的距离 */
        /* background-color: transparent;            /* 设置背景颜色为完全透明 */
        transition: all 0.2s ease-in-out;         /* 添加过渡效果 */
        background-color: hsl(214, 90%, 52%);     /* 深蓝色背景 */
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); /* 设置阴影效果 */
    }

    .copy-btn:hover, .alert-btn:hover,
    .full-screen-btn:hover {                       /* 定义弹窗确认按钮的悬浮样式 */
        background-color: hsl(0, 90%, 42%);        /* 略微调暗颜色 */
    }

    .copy-message {
        display: flex;                             /* 使用弹性布局 */
        position: fixed;                           /* 固定定位 */
        align-items: center;                       /* 垂直居中对齐 */
        justify-content: center;                   /* 水平居中对齐 */
        top: 50%;                                  /* 距离顶部的偏移量为50% */
        left: 50%;                                 /* 距离左侧的偏移量为50% */
        color: white;                              /* 文字颜色为白色 */
        z-index: 9999;                             /* z轴顺序为9999，使弹窗处于最上层 */
        padding: 10px;                             /* 内边距为10像素 */
        font-size: 16px;                           /* 字体大小为16像素 */
        border-radius: 5px;                        /* 边框圆角半径为5像素 */
        transform: translate(-50%, -50%);          /* 使用transform平移来实现居中 */
        background-color: rgba(0, 0, 0, 0.8);      /* 背景颜色为黑色，透明度为0.8 */
    }
</style>

<script type="text/javascript">
    async function makeAlertDraggable(alert) {
        let mouseStartX, mouseStartY, alertStartX, alertStartY; // 鼠标和弹框开始的X，y坐标
        $(alert).mousedown(({ clientX, clientY }) => {          // 使用解构赋值获取鼠标按下时的X坐标和Y坐标
            mouseStartX = clientX,                              // 记录鼠标开始的X坐标
            mouseStartY = clientY,                              // 记录鼠标开始的Y坐标
            alertStartX = alert.offsetLeft,                     // 记录弹框开始的X坐标
            alertStartY = alert.offsetTop;                      // 记录弹框开始的Y坐标
        });

        $(document).mousemove((e) => {                          // 鼠标移动事件
            if (mouseStartX === 0 && mouseStartY === 0) return; // 如果鼠标没有按下，则不做任何操作
            const { clientX: mouseX, clientY: mouseY } = e;     // 获取鼠标当前的X坐标和Y坐标
            const deltaX = mouseX - (mouseStartX ?? 0);         // 计算鼠标移动的X距离（如果mouseStartX未定义，则默认为0）
            const deltaY = mouseY - (mouseStartY ?? 0);         // 计算鼠标移动的Y距离（如果mouseStartY未定义，则默认为0）
            $(alert).css({
                position: 'absolute',                           // 设置弹框的定位方式为绝对定位
                top: `${alertStartY + (deltaY ?? 0)}px`,        // 根据鼠标移动的Y距离调整弹框的top位置（如果deltaY未定义，则默认为0）
                left: `${alertStartX + (deltaX ?? 0)}px`        // 根据鼠标移动的X距离调整弹框的left位置（如果deltaX未定义，则默认为0）
            });
        });

        $(document).mouseup(() => {                             // 鼠标抬起事件
            [mouseStartX, mouseStartY, alertStartX, alertStartY] = [0, 0, 0, 0];
        });
    }

    async function alert(data, WarningText = '', alertText = '') {                  // 创建DOM元素
        const alertMask = $('<div>').addClass('alert-mask');                        // 创建遮罩层
        const alertConfirm = $('<div>').addClass('alert-confirm');                  // 创建确认按钮容器
        const alertContainer = $('<div>').addClass('alert-container');              // 创建弹窗容器
        const alertCopyMessage = $('<div>').addClass('copy-message');               // 创建复制消息容器
        const alertBtn = $('<button>').addClass('alert-btn').html('<%:Dismiss%>');  // 创建关闭按钮
        const alertcopyBtn = $('<button>').addClass('copy-btn').html('<%:Copy%>');  // 创建复制按钮
        const fullScreenBtn = $('<button>').addClass('full-screen-btn').html('<%:full Screen%>');  // 创建全屏按钮
        const alertTitle = $('<div>').addClass('alert-title').html(WarningText
            ? '<div style="color: red;"><%:something went wrong%></div>'            // 如果有弹窗文本，则设置错误样式的标题（红色）
            : '<%:Run Demo%>');                                                     // 否则设置默认标题（"Run Demo"）
        const alertContent = $('<div>').addClass('alert-content').html(alertText
            ? `<pre style="text-align: center; font-size: 16px">${alertText}\n\n\n</pre>` // 如果有弹窗文本，显示弹窗文本
            : `<pre>${data}\n\n</pre>`);                                            // 否则显示传入的数据

        alertBtn.click(() => alertMask.remove());                // 点击关闭按钮时，移除遮罩层
        fullScreenBtn.click(() => {                              // 当点击全屏按钮时触发事件
            const contentElement = alertContent.find('pre')[0];  // 获取内容容器中的 pre 元素
            if (contentElement.requestFullscreen) {
                contentElement.requestFullscreen();              // 使用requestFullscreen方法进入全屏模式
            } else if (contentElement.mozRequestFullScreen) {
                contentElement.mozRequestFullScreen();           // 使用mozRequestFullScreen方法进入全屏模式
            } else if (contentElement.webkitRequestFullscreen) {
                contentElement.webkitRequestFullscreen();        // 使用webkitRequestFullscreen方法进入全屏模式
            } else if (contentElement.msRequestFullscreen) {
                contentElement.msRequestFullscreen();            // 使用msRequestFullscreen方法进入全屏模式
            }
        });
        alertcopyBtn.click(() => {
            // 创建临时 textarea 元素来存储内容文本，并删除结尾的两个连续空格行
            const tempTextarea = $('<textarea>').val(alertContent.text().replace(/[\s\n]{2}$/, ''));
            $('body').append(tempTextarea);                      // 将 textarea 添加到页面中
            tempTextarea.select();                               // 选中内容
            document.execCommand('copy');                        // 复制选中内容到剪贴板
            tempTextarea.remove();                               // 移除临时 textarea
            alertCopyMessage.text('<%:Content copied%>');        // 设置复制消息文本
            $('body').append(alertCopyMessage);                  // 将复制消息添加到页面中
            setTimeout(() => alertCopyMessage.remove(), 1000);   // 1秒后移除复制消息
        });

        alertConfirm.append(alertcopyBtn, fullScreenBtn, alertBtn);   // 将按钮添加到确认容器中
        alertContainer.append(alertTitle, alertContent, alertConfirm);// 将标题、内容和确认容器添加到弹窗容器中
        alertMask.append(alertContainer);                             // 将弹窗容器添加到遮罩层中
        $('body').append(alertMask);                                  // 将遮罩层添加到 body 元素中
        makeAlertDraggable(alertContainer[0]);                        // 调用 makeAlertDraggable 函数使弹窗可拖动
    }

    function displayError(message) {
        alert(null, 'true', message);
    }

    function handleHttpError(status) {
        let errorMessage;
        switch (status) {
            case 400:
                errorMessage = '<%:Bad Request: The request was invalid or cannot be served.%>';
                break;
            case 401:
                errorMessage = '<%:Unauthorized: The request requires authentication.%>';
                break;
            case 403:
                errorMessage = '<%:Forbidden: The server refuses to authorize the request.%>';
                break;
            case 404:
                errorMessage = '<%:Not Found: The requested resource could not be found.%>';
                break;
            case 500:
                errorMessage = '<%:Internal Server Error: The server failed to fulfill the request.%>';
                break;
            case 503:
                errorMessage = '<%:Service Unavailable: The server is temporarily unable to handle the request.%>';
                break;
            default:
                errorMessage = String.format('<%:An unexpected error occurred. Error code: %s%>', status);
        }
        displayError(errorMessage);
    }

    async function jQRequest(command = '', file_path = '') {
        const url = '<%=url("admin/nas/tinynote/action_run")%>';   // 请求地址
        const data = { command, file_path };                       // 请求参数
        try {
            const response = await $.post(url, data, 'json');
            response.result === 'success' ? alert(response.data) : displayError(response.result);
        } catch (error) {
            handleHttpError(error.status);                          // 请求失败，处理错误
        }
    }

    async function xhrRequest(command = '', file_path = '') {
        const xhr = new XMLHttpRequest();                           // 创建XMLHttpRequest对象
        const url = '<%=url("admin/nas/tinynote/action_run")%>';    // 请求地址
        const params = new URLSearchParams({ command, file_path }); // 请求参数
        xhr.open('POST', url, true);                                // 打开请求
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); // 设置请求头
        xhr.onreadystatechange = () => {                            // 监听请求状态变化
            (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) && (// 如果请求成功并且状态已完成
                (jsonResponse = JSON.parse(xhr.responseText)).result === 'success'
                    ? alert(jsonResponse.data)                      // 如果成功则弹出响应数据
                    : displayError(jsonResponse.result));           // 否则调用显示错误函数
            xhr.status !== 200 && handleHttpError(xhr.status);      // 如果请求错误，则处理http错误
        };
        xhr.send(params.toString());                                // 发送请求
    }

    async function fetchRequest(command = '', file_path = '') {
        const url = '<%=url("admin/nas/tinynote/action_run")%>';    // 请求地址
        const data = new URLSearchParams({ command, file_path });   // 请求参数
        try {
            const response = await fetch(url, {
                method: 'POST', body: data, headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            });
            const { result, data: responseData } = await response.json(); // 将响应数据解析为JSON格式
            result === 'success' ? alert(responseData) : displayError(result); // 判断响应结果是否成功，弹出响应数据或显示错误
        } catch (error) {
            handleHttpError(error);                                  // 捕获异常，处理HTTP错误
        }
    }

    function handleCommandRequest( file_path = '', command = '',requestType = '') {
        if (requestType === 'fetch') {
            fetchRequest(command, file_path);
        } else if (requestType === 'xhr') {
            xhrRequest(command, file_path);
        } else if (requestType === 'jQuery') {
            jQRequest(command, file_path);
        }
    }

    function getElementBy_Id(id) {
        return document.getElementById(id).value;
    }

    var targetElement = document.getElementById("<%=self.sum%>btn");
    var elementToMove = document.getElementById("cbid.luci.tinynote.<%=self.sum%>_clear_note");
    //var parentElement = document.getElementById("cbi-luci-tinynote-enablenote<%=self.sum%>");

    targetElement.insertBefore(elementToMove, targetElement.firstChild);
    //parentElement.insertAdjacentElement('afterend', targetElement);
    document.getElementById("cbi-luci-tinynote-<%=self.sum%>_clear_note").remove();

</script>
