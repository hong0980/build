<style>
    .alert-content {
        max-height: calc(70vh - 100px);           /* 减去按钮高度和上下边距的高度 */
        overflow: auto;                           /* 如果弹窗内容超出设置的高度，显示滚动条 */
    }

    .alert-content pre {
        text-align: left;                         /* 文字左对齐 */
        font-size: 14px;                          /* 字体大小为13像素 */
        line-height: 1.5;                         /* 行高 */
        /*color: white;                             /* 字体颜色为白色 */
        background-color: #272822;                /* 背景颜色为黑色 */
        color: #66D9EF;                           /* 字体颜色为蓝色 */
        font-family: Consolas;                    /* 字体设置为Consolas */
    }

    .alert-mask {
        position: fixed;                          /* 使用固定定位将遮罩层固定在页面上 */
        display: flex;                            /* 使用 Flex 布局 */
        justify-content: center;                  /* 主轴上的对齐方式为居中对齐 */
        align-items: center;                      /* 交叉轴上的对齐方式为居中对齐 */
        top: 0;                                   /* 距离顶部为0 */
        left: 0;                                  /* 距离左侧为0 */
        width: 100%;                              /* 宽度占满整个视口 */
        height: 100%;                             /* 高度占满整个视口 */
        background-color: rgba(0, 0, 0, 0.5);     /* 设置背景颜色，使用半透明黑色 */
        z-index: 9999;                            /* 设置层级，使其在最上层显示 */
    }

    .alert-container {                            /* 定义弹窗容器的样式 */
        position: relative;                       /* 设置相对定位 */
        border-left: 2px solid #fff;              /* 左边框，颜色为白色 */
        border-right: 2px solid #fff;             /* 右边框，颜色为白色 */
        border-bottom: 2px solid #fff;            /* 下边框，颜色为白色 */
        max-width: 900px;                         /* 最大宽度为900像素 */
        width: 70%;                               /* 宽度为父元素宽度的70% */
        max-height: 70vh;                         /* 最大高度为屏幕高度的70% */
        overflow: auto;                           /* 超出部分自动滚动 */
        background-color: #fff;                   /* 白色背景 */
        border-radius: 5px;                       /* 圆角边框 */
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); /* 设置阴影效果 */
        cursor: move;                             /* 添加拖动手势 */
    }

    .alert-container:active {                     /* 当.alert-container被激活（即被点击）时，将鼠标光标样式设置为抓取 */
        cursor: grabbing;
    }

    .alert-title {                                /* 定义弹窗标题栏的样式 */
        font-size: 20px;                          /* 设置字体大小为20像素  */
        font-weight: bold;                        /* 设置字体加粗 */
        text-align: center;                       /* 文本居中对齐 */
        margin-top: 10px;                         /* 上边距为10像素 */
        margin-bottom: 10px;                      /* 下边距为10像素 */
    }

    .alert-confirm {                              /* 定义弹窗确认按钮的父容器样式 */
        position: absolute;                       /* 设置绝对定位 */
        bottom: 20px;                             /* 距离底部 10 像素 */
        left: 50%;                                /* 水平居中对齐 */
        transform: translateX(-50%);              /* 平移来水平居中 */
    }

    .alert-btn {                                  /* 定义弹窗确认按钮的样式 */
        position: sticky;                         /* 设置为粘性定位 */
        bottom: 5px;                             /* 距离底部 10 像素 */
        cursor: pointer;                          /* 鼠标移上去变成手型 */
        padding: 6px 10px;                        /* 上下内边距为6像素，左右内边距为10像素 */
        border: none;                             /* 去除边框 */
        border-radius: 5px;                       /* 圆角边框 */
        color: #fff;                              /* 字体颜色为白色 */
        background-color: hsl(214, 90%, 52%);     /* 深蓝色背景 */
        /* background-color: transparent;            /* 设置背景颜色为完全透明 */
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); /* 设置阴影效果 */
        transition: all 0.2s ease-in-out;         /* 添加过渡效果 */
    }

    .alert-btn:hover {                            /* 定义弹窗确认按钮的悬浮样式 */
        background-color: hsl(0, 90%, 42%);       /* 略微调暗颜色 */
    }
</style>

<script type="text/javascript">
    function makeAlertDraggable(alert) {
        let mouseStartX = 0;   // 鼠标开始的X坐标
        let mouseStartY = 0;   // 鼠标开始的Y坐标
        let alertStartX = 0;   // 弹框开始的X坐标
        let alertStartY = 0;   // 弹框开始的Y坐标

        alert.addEventListener('mousedown', (e) => {   // 鼠标按下事件
            mouseStartX = e.clientX;                   // 记录鼠标开始的X坐标
            mouseStartY = e.clientY;                   // 记录鼠标开始的Y坐标
            alertStartX = alert.offsetLeft;            // 记录弹框开始的X坐标
            alertStartY = alert.offsetTop;             // 记录弹框开始的Y坐标
        });

        document.addEventListener('mousemove', (e) => {         // 鼠标移动事件
            if (mouseStartX === 0 && mouseStartY === 0) return; // 如果鼠标没有按下，则不做任何操作
            const mouseX = e.clientX;                           // 获取当前鼠标的X坐标
            const mouseY = e.clientY;                           // 获取当前鼠标的Y坐标
            const deltaX = mouseX - mouseStartX;                // 计算鼠标移动的X距离
            const deltaY = mouseY - mouseStartY;                // 计算鼠标移动的Y距离
            alert.style.position = 'absolute';                  // 将弹框的定位设置为绝对定位
            alert.style.top = `${alertStartY + deltaY}px`;      // 计算弹框的top值
            alert.style.left = `${alertStartX + deltaX}px`;     // 计算弹框的left值
        });

        document.addEventListener('mouseup', () => { // 鼠标抬起事件
            mouseStartX = 0;                         // 重置鼠标开始的X坐标
            mouseStartY = 0;                         // 重置鼠标开始的Y坐标
            alertStartX = 0;                         // 重置弹框开始的X坐标
            alertStartY = 0;                         // 重置弹框开始的Y坐标
        });
    }

    function createEleWithClass(eleType, className) { // 创建带有指定样式类名的元素
        const ele = document.createElement(eleType);  // 创建元素
        ele.className = className;                    // 设置样式类名
        return ele;                                   // 返回创建的元素
    }

    function alert(data, WarningText = '', alertText = '') {                 // 自定义alert
        const body = document.getElementsByTagName('body')[0];               // 获取body元素
        const alertBtn = createEleWithClass('button', 'alert-btn');          // 创建弹窗确认按钮元素
        const alertMask = createEleWithClass('div', 'alert-mask');           // 创建弹窗遮罩层元素
        const alertTitle = createEleWithClass('div', 'alert-title');         // 创建弹窗标题元素
        const alertContent = createEleWithClass('div', 'alert-content');     // 创建弹窗内容元素
        const alertConfirm = createEleWithClass('div', 'alert-confirm');     // 创建弹窗确认按钮的父容器元素
        const alertContainer = createEleWithClass('div', 'alert-container'); // 创建弹窗容器元素
        alertTitle.innerHTML = WarningText ? '<div style="color: red;"><%:something went wrong%></div>' : '<%:Run Demo%>';
        alertContent.innerHTML = alertText ? `<pre style="text-align: center; font-size: 16px">${alertText}\n\n\n</pre>` : `<pre>${data}\n</pre>`;
        alertBtn.innerHTML = '<%:Dismiss%>';                                 // 设置按钮文本内容
        alertBtn.onclick = () => body.removeChild(alertMask);                // 移除遮罩层
        alertConfirm.appendChild(alertBtn);                                  // 将确认按钮添加到按钮父容器中
        alertContainer.append(alertTitle, alertContent, alertConfirm);       // 将确认标题，内容，按钮父容器添加到弹窗容器中
        alertMask.appendChild(alertContainer);                               // 将弹窗容器添加到遮罩层中
        body.appendChild(alertMask);                                         // 将遮罩层添加到body元素中
        makeAlertDraggable(alertContainer);                                  // 使弹窗可拖动
    }

    function displayError(message) {
        alert(null, 'true', message);
    }

    function handleHttpError(status) {
        let errorMessage;

        switch (status) {
            case 400:
                errorMessage = '<%:Bad Request: The request was invalid or cannot be served.%>';
                break;
            case 401:
                errorMessage = '<%:Unauthorized: The request requires authentication.%>';
                break;
            case 403:
                errorMessage = '<%:Forbidden: The server refuses to authorize the request.%>';
                break;
            case 404:
                errorMessage = '<%:Not Found: The requested resource could not be found.%>';
                break;
            case 500:
                errorMessage = '<%:Internal Server Error: The server failed to fulfill the request.%>';
                break;
            case 503:
                errorMessage = '<%:Service Unavailable: The server is temporarily unable to handle the request.%>';
                break;
            default:
                errorMessage = String.format('<%:An unexpected error occurred. Error code: %s%>', status);
        }

        displayError(errorMessage);
    }

    async function jQRequest(command = '', file_path = '') {
        const url  = '<%=url("admin/nas/tinynote/action_run")%>';
        const data = { command, file_path };

        $.post(url, data, function (jsonResponse, status, xhr) {
            if (xhr.status === 200) {
                if (jsonResponse.result === 'success') {
                    alert(jsonResponse.data);
                } else {
                    displayError(jsonResponse.result);
                }
            } else {
                handleHttpError(xhr.status);
            }
        }, 'json').fail(function (xhr, textStatus, errorThrown) {
            handleHttpError(xhr.status);
        });
    }

    async function xhrRequest(command = '', file_path = '') {
        const xhr = new XMLHttpRequest(); // 创建XMLHttpRequest对象
        const url = '<%=url("admin/nas/tinynote/action_run")%>'; // 请求地址
        xhr.open('POST', url, true); // 打开请求
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); // 设置请求头

        xhr.onreadystatechange = () => { // 监听请求状态变化
            if (xhr.readyState === XMLHttpRequest.DONE) { // 判断请求状态是否完成
                if (xhr.status === 200) { // 判断请求是否成功
                    const jsonResponse = JSON.parse(xhr.responseText); // 解析响应数据
                    if (jsonResponse.result === 'success') { // 判断响应结果是否成功
                        alert(jsonResponse.data); // 弹出响应数据
                    } else {
                        displayError(jsonResponse.result); // 弹出响应结果
                    }
                } else {
                    handleHttpError(xhr.status);
                }
            }
        };

        const params = new URLSearchParams({ command, file_path }); // 发送请求参数
        xhr.send(params.toString());
    }

    async function fetchRequest(command = '', file_path = '') {
        const url  = '<%=url("admin/nas/tinynote/action_run")%>';
        const data = new URLSearchParams({ command, file_path });
        try {
            const response = await fetch(url, {
                method: 'POST', body: data, headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            });
            const jsonResponse = await response.json();
            if (jsonResponse.result === 'success') {
                alert(jsonResponse.data);
            } else {
                displayError(jsonResponse.result);
            }
        } catch (error) {
            handleHttpError(error);
        }
    }

    function handleCommandRequest(command = '', file_path = '', requestType = '') {
        if (requestType === 'fetch') {
            fetchRequest(command, file_path);
        } else if (requestType === 'xhr') {
            xhrRequest(command, file_path);
        } else if (requestType === 'jQuery') {
            jQRequest(command, file_path);
        }
    }

    function getElementBy_Id(id) {
        return document.getElementById(id).value;
    }
</script>

<div style="display: inline-block; margin-right: 20px;">
    <label for="<%=cbid%>_requestType"></label>
    <select id="<%=cbid%>_requestType" style="width: 60px; margin-right: 15px;" title="<%:Select request type%>">
        <option value="xhr">xhr</option>
        <option value="jQuery">jQuery</option>
        <option value="fetch">fetch</option>
    </select>
    <label for="<%=cbid%>_commandInput"><%:Enter command to run:%></label>
    <datalist id="<%=cbid%>_options">
        <option value="lua"></option>
        <option value="sh"></option>
        <option value="python"></option>
        <option value="bash"></option>
    </datalist>
    <input
        id="<%=cbid%>_commandInput"
        style="width: 60px;"
        title="<%:Enter or select the running command of the script on the current page, and leave blank to set the default command.%>"
        list="<%=cbid%>_options"
    >
    <% if self:cfgvalue(section) ~= false then %>
        <input
            type="button"
            class="cbi-button cbi-button-apply"
            style="margin-right: 10px; margin-left: 10px;"
            onclick="handleCommandRequest(
                getElementBy_Id('<%=cbid%>_commandInput'),
                '<%=self.file_path%>',
                getElementBy_Id('<%=cbid%>_requestType')
            );"
            <% if self.disable then %>disabled<% end %>
    <%=attr("name", cbid) .. attr("id", cbid) .. attr("value", self.inputtitle or self.title)%>
        />
    <% else %> - <% end %>
    <label for="<%=cbid%>_shellInput"><%:Enter shell command:%></label>
    <input
        id="<%=cbid%>_shellInput"
        style="width: 150px; margin-right: 10px;"
        title="<%:Enter a shell command that can be run%>"
    >
    <button
        type="button"
        class="cbi-button cbi-button-apply"
        onclick="handleCommandRequest(
            getElementBy_Id('<%=cbid%>_shellInput'),
            '',
            getElementBy_Id('<%=cbid%>_requestType')
        );"
    ><%:Execute Command%></button>
</div>
