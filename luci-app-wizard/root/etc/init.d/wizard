#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

# 日志函数
log_msg() {
    logger -t wizard "${@}"
}

uci_quiet() {
    uci -q "${@}" >/dev/null
}

uci_changes() {
    [ "$(uci -q changes "$1" | grep -c .)" -gt 0 ] && uci commit "$1" && return 0
    return 1
}

reconfig() {
    uci_set wizard default wan_proto "$(uci_get network wan proto)"
    uci_set wizard default pppoe_user "$(uci_get network wan username)"
    uci_set wizard default pppoe_pass "$(uci_get network wan password)"
    uci_set wizard default lan_ipaddr "$(uci_get network lan ipaddr)"
    uci_set wizard default lan_netmask "$(uci_get network lan netmask)"
    uci_set wizard default lan_gateway "$(uci_get network lan gateway)"
    uci_set wizard default ipv6 "$(uci_get network wan ipv6)"
    for dns in $(uci_get network lan dns); do
        uci_add_list wizard default lan_dns "$dns"
    done
    [ "$(uci_get dhcp lan ignore)" ] && uci_set wizard default dhcp "0" || uci_remove wizard default dhcp
    uci_commit wizard
}

add_wizard() {
    local cfg="$1"
    # 获取 wizard 配置
    local wan_proto ipv6 pppoe_user pppoe_pass wan_ipaddr wan_gateway ap_lan_ipaddr ap_dhcp ap_ssid ap_password
    local enable_siderouter lan_ipaddr siderouter_lan_ipaddr hostname lan_gateway lan_netmask lan_sum lan_dns wan_lan
    local wan_dns_1 wan_ipaddr_1 wan_gateway_1 wan_netmask_1 firewall fullcone masq syn_flood omasq ip_tables
    config_get ipv6 "$cfg" ipv6 "auto"
    config_get wan_proto "$cfg" wan_proto ""
    config_get pppoe_user "$cfg" pppoe_user ""
    config_get pppoe_pass "$cfg" pppoe_pass ""
    config_get wan_ipaddr "$cfg" wan_ipaddr ""
    config_get wan_gateway "$cfg" wan_gateway ""
    config_get ap_lan_ipaddr "$cfg" ap_lan_ipaddr "192.168.1.2"
    config_get_bool ap_dhcp "$cfg" ap_dhcp 1
    config_get ap_ssid "$cfg" ap_ssid "OpenWrt-AP"
    config_get ap_password "$cfg" ap_password ""
    config_get_bool enable_siderouter "$cfg" enable_siderouter 0
    config_get lan_ipaddr "$cfg" lan_ipaddr ""
    config_get siderouter_lan_ipaddr "$cfg" siderouter_lan_ipaddr ""
    config_get hostname "$cfg" hostname
    config_get lan_gateway "$cfg" lan_gateway ""
    config_get lan_netmask "$cfg" lan_netmask "255.255.255.0"
    config_get lan_sum "$cfg" lan_sum ""
    config_get lan_dns "$cfg" lan_dns ""
    config_get_bool dhcp "$cfg" dhcp
    config_get_bool wan_lan "$cfg" wan_lan 0
    config_get wan_dns_1 "$cfg" wan_dns_1 ""
    config_get wan_ipaddr_1 "$cfg" wan_ipaddr_1 ""
    config_get wan_gateway_1 "$cfg" wan_gateway_1 ""
    config_get_bool firewall "$cfg" firewall 0
    config_get_bool fullcone "$cfg" fullcone 1
    config_get_bool masq "$cfg" masq 0
    config_get_bool syn_flood "$cfg" syn_flood 1
    config_get_bool omasq "$cfg" omasq 0
    config_get ip_tables "$cfg" ip_tables ""

    # 获取网络配置
    local is_dsa=0
    local wan_device=$(uci_get network wan device || echo "eth1")
    uci show network | grep -q "device.*name='br-lan'" && is_dsa=1

    # 输入验证
    case "$wan_proto" in
        pppoe)
            [ -z "$pppoe_user" -o -z "$pppoe_pass" ] && return 1
            ;;
        static)
            [ -z "$wan_ipaddr" -o -z "$wan_gateway" -o -z "$wan_netmask" ] && return 1
            ;;
        ap)
            [ -z "$ap_lan_ipaddr" ] && return 1
            ;;
        siderouter)
            [ "$enable_siderouter" -eq 1 ] || return 0
            [ -z "$siderouter_lan_ipaddr" ] && siderouter_lan_ipaddr="$lan_ipaddr"
            [ -z "$siderouter_lan_ipaddr" ] && return 1
            [ -z "$lan_gateway" ] && return 1
            ;;
    esac

    # 配置网络
    case "$wan_proto" in
        pppoe)
            [ "$pppoe_user" != "$(uci_get network wan username)" -o "$pppoe_pass" != "$(uci_get network wan password)" ] && {
                uci_remove network wan
                uci_add network interface wan
                uci_set network wan proto pppoe
                uci_set network wan ipv6 "$ipv6"
                uci_set network wan device "$wan_device"
                uci_set network wan username "$pppoe_user"
                uci_set network wan password "$pppoe_pass"
                uci_set network lan netmask "$lan_netmask"
            }
            ;;
        dhcp)
            uci_remove network wan
            uci_add network interface wan
            uci_set network wan proto dhcp
            uci_set network wan device "$wan_device"
            ;;
        # static)
        #     log_msg "Configuring Static mode"
        #     # uci_remove network wan
        #     # uci_add network interface wan
        #     # uci_set network wan proto static
        #     log_msg "uci_set network wan proto 'static'"
        #     # uci_set network wan device "$wan_device"
        #     log_msg "uci set network.wan.device='$wan_device'"
        #     # uci_set network wan device "$wan_ipaddr"
        #     log_msg "uci set network.wan.ipaddr='$wan_ipaddr'"
        #     # uci_quiet set network.wan.netmask="$wan_netmask"
        #     log_msg "uci set network.wan.netmask='$wan_netmask'"
        #     # uci_quiet set network.wan.gateway="$wan_gateway"
        #     log_msg "uci set network.wan.gateway='$wan_gateway'"
        #     ;;
        # ap)
        #     log_msg "Configuring AP mode"
        #     # uci_quiet delete network.wan
        #     log_msg "uci delete network.wan"
        #     if [ -n "$wan_device" ] && [ "$is_dsa" -eq 1 ]; then
        #         # DSA: 添加到 br-lan 的 ports
        #         local ports=$(uci get network.@device[0].ports 2>/dev/null || echo "")
        #         echo "$ports" | grep -qw "$wan_device" || {
        #             # uci_quiet add_list network.@device[0].ports="$wan_device"
        #             log_msg "uci add_list network.@device[0].ports='$wan_device'"
        #             log_msg "Merged WAN device $wan_device to br-lan ports"
        #         }
        #     elif [ -n "$wan_device" ]; then
        #         # 非 DSA: 添加到 ifname
        #         local lan_ifname=$(uci get network.lan.ifname 2>/dev/null || echo "")
        #         echo "$lan_ifname" | grep -qw "$wan_device" || {
        #             # uci_quiet set network.lan.ifname="$lan_ifname $wan_device"
        #             log_msg "uci set network.lan.ifname='$lan_ifname $wan_device'"
        #             log_msg "Merged WAN device $wan_device to LAN ifname"
        #         }
        #     fi
        #     # uci_quiet set network.lan.ipaddr="$ap_lan_ipaddr"
        #     log_msg "uci set network.lan.ipaddr='$ap_lan_ipaddr'"
        #     # uci_quiet set network.lan.netmask="255.255.255.0"
        #     log_msg "uci set network.lan.netmask='255.255.255.0'"
        #     # uci_quiet set network.lan.proto="static"
        #     log_msg "uci set network.lan.proto='static'"
        #     # uci_quiet set dhcp.lan.ignore="$ap_dhcp"
        #     log_msg "uci set dhcp.lan.ignore='$ap_dhcp'"

        #     # 无线配置
        #     [ -f /etc/config/wireless ] && {
        #         local wireless_available=0
        #         config_load wireless
        #         config_foreach() {
        #             local section="$2"
        #             [ "$(uci get wireless."$section" 2>/dev/null)" = "wifi-device" ] && wireless_available=1
        #         }
        #         config_load wireless
        #         if [ "$wireless_available" -eq 1 ]; then
        #             log_msg "Configuring wireless for AP"
        #             config_foreach() {
        #                 local section="$2"
        #                 if [ "$(uci get wireless."$section" 2>/dev/null)" = "wifi-device" ]; then
        #                     local radio="$section"
        #                     # uci_quiet set wireless."$radio".disabled="0"
        #                     log_msg "uci set wireless.$radio.disabled='0'"
        #                     # uci_quiet set wireless.ap_"$radio"=wifi-iface
        #                     log_msg "uci set wireless.ap_$radio=wifi-iface"
        #                     # uci_quiet set wireless.ap_"$radio".device="$radio"
        #                     log_msg "uci set wireless.ap_$radio.device='$radio'"
        #                     # uci_quiet set wireless.ap_"$radio".mode="ap"
        #                     log_msg "uci set wireless.ap_$radio.mode='ap'"
        #                     # uci_quiet set wireless.ap_"$radio".ssid="$ap_ssid"
        #                     log_msg "uci set wireless.ap_$radio.ssid='$ap_ssid'"
        #                     if [ -n "$ap_password" ]; then
        #                         # uci_quiet set wireless.ap_"$radio".encryption="psk2"
        #                         log_msg "uci set wireless.ap_$radio.encryption='psk2'"
        #                         # uci_quiet set wireless.ap_"$radio".key="$ap_password"
        #                         log_msg "uci set wireless.ap_$radio.key='$ap_password'"
        #                     else
        #                         # uci_quiet set wireless.ap_"$radio".encryption="none"
        #                         log_msg "uci set wireless.ap_$radio.encryption='none'"
        #                     fi
        #                     # uci_quiet set wireless.ap_"$radio".network="lan"
        #                     log_msg "uci set wireless.ap_$radio.network='lan'"
        #                 fi
        #             }
        #             config_load wireless
        #         fi
        #     }

        #     # 禁用防火墙
        #     # uci_quiet set firewall.@defaults[0].disabled="1"
        #     log_msg "uci set firewall.@defaults[0].disabled='1'"
        #     # uci_quiet delete firewall.@zone[1]
        #     log_msg "uci delete firewall.@zone[1]"
        #     # uci_quiet set firewall.@zone[0].masq="0"
        #     log_msg "uci set firewall.@zone[0].masq='0'"
        #     ;;
        # siderouter)
        #     log_msg "Configuring Siderouter mode"
        #     # uci_quiet delete network.wan
        #     log_msg "uci delete network.wan"
        #     # uci_quiet set network.lan.ipaddr="$siderouter_lan_ipaddr"
        #     log_msg "uci set network.lan.ipaddr='$siderouter_lan_ipaddr'"
        #     # uci_quiet set network.lan.netmask="$lan_netmask"
        #     log_msg "uci set network.lan.netmask='$lan_netmask'"
        #     # uci_quiet set network.lan.gateway="$lan_gateway"
        #     log_msg "uci set network.lan.gateway='$lan_gateway'"
        #     [ -n "$lan_dns" ] && {
        #         # uci_quiet delete network.lan.dns
        #         log_msg "uci delete network.lan.dns"
        #         for dns in $lan_dns; do
        #             # uci_quiet add_list network.lan.dns="$dns"
        #             log_msg "uci add_list network.lan.dns='$dns'"
        #         done
        #     }
        #     # uci_quiet set dhcp.lan.ignore="$dhcp"
        #     log_msg "uci set dhcp.lan.ignore='$dhcp'"
        #     # uci_quiet set system.@system[0].hostname="$hostname"

        #     if [ "$wan_lan" -eq 1 ]; then
        #         if [ -n "$wan_device" ] && [ "$is_dsa" -eq 1 ]; then
        #             # DSA: 添加到 br-lan 的 ports
        #             local ports=$(uci get network.@device[0].ports 2>/dev/null || echo "")
        #             echo "$ports" | grep -qw "$wan_device" || {
        #                 # uci_quiet add_list network.@device[0].ports="$wan_device"
        #                 log_msg "uci add_list network.@device[0].ports='$wan_device'"
        #                 log_msg "Merged WAN device $wan_device to br-lan ports"
        #             }
        #         elif [ -n "$wan_device" ]; then
        #             # 非 DSA: 添加到 ifname
        #             local lan_ifname=$(uci get network.lan.ifname 2>/dev/null || echo "")
        #             echo "$lan_ifname" | grep -qw "$wan_device" || {
        #                 # uci_quiet set network.lan.ifname="$lan_ifname $wan_device"
        #                 log_msg "uci set network.lan.ifname='$lan_ifname $wan_device'"
        #                 log_msg "Merged WAN device $wan_device to LAN ifname"
        #             }
        #         fi
        #         # uci_quiet add network interface
        #         log_msg "uci add network interface"
        #         # uci_quiet set network.wan.proto="static"
        #         log_msg "uci set network.wan.proto='static'"
        #         # uci_quiet set network.wan.ipaddr="$wan_ipaddr_1"
        #         log_msg "uci set network.wan.ipaddr='$wan_ipaddr_1'"
        #         # uci_quiet set network.wan.netmask="$wan_netmask_1"
        #         log_msg "uci set network.wan.gateway='$wan_gateway_1'"
        #         [ -n "$wan_dns_1" ] && {
        #             # uci_quiet set network.wan.peerdns="0"
        #             log_msg "uci set network.wan.peerdns='0'"
        #             # uci_quiet set network.wan.dns="$wan_dns_1"
        #             log_msg "uci set network.wan.dns='$wan_dns_1'"
        #         }
        #     fi

        #     if [ "$firewall" -eq 1 ]; then
        #         # uci_quiet set firewall.@defaults[0].syn_flood="$([ "$syn_flood" -eq 1 ] && echo 1 || echo 0)"
        #         log_msg "uci set firewall.@defaults[0].syn_flood='$([ "$syn_flood" -eq 1 ] && echo 1 || echo 0)'"
        #         # uci_quiet set firewall.@defaults[0].fullcone="$([ "$fullcone" -eq 1 ] && echo 1 || echo 0)"
        #         log_msg "uci set firewall.@defaults[0].fullcone='$([ "$fullcone" -eq 1 ] && echo 1 || echo 0)'"
        #         # uci_quiet set firewall.@zone[0].masq="$([ "$masq" -eq 1 ] && echo 1 || echo 0)"
        #         log_msg "uci set firewall.@zone[0].masq='$([ "$masq" -eq 1 ] && echo 1 || echo 0)'"
        #         if [ "$omasq" -eq 1 ] && [ -n "$ip_tables" ]; then
        #             # uci_quiet delete firewall.custom
        #             log_msg "uci delete firewall.custom"
        #             # uci_quiet add firewall rule
        #             log_msg "uci add firewall rule"
        #             # uci_quiet rename firewall.@rule[-1]="custom"
        #             log_msg "uci rename firewall.@rule[-1]='custom'"
        #             # uci_quiet set firewall.custom.src="*"
        #             log_msg "uci set firewall.custom.src='*'"
        #             # uci_quiet set firewall.custom.dest="*"
        #             log_msg "uci set firewall.custom.dest='*'"
        #             # uci_quiet set firewall.custom.target="ACCEPT"
        #             log_msg "uci set firewall.custom.target='ACCEPT'"
        #             # uci_quiet set firewall.custom.extra="$ip_tables"
        #             log_msg "uci set firewall.custom.extra='$ip_tables'"
        #         fi
        #     fi
        #     ;;
        *)
            return 1
            ;;
    esac

    [ -n "$wan_dns_1" ] && {
        # uci_quiet set network.wan.peerdns="0"
        log_msg "uci set network.wan.peerdns='0'"
        # uci_quiet set network.wan.dns="$wan_dns_1"
        log_msg "uci set network.wan.dns='$wan_dns_1'"
    }

    # 更新 LAN IP 和 DNS
    if [ "$wan_proto" != "ap" ] && [ "$wan_proto" != "siderouter" ] && [ -n "$lan_ipaddr" ]; then
        # uci_quiet set network.lan.ipaddr="$lan_ipaddr"
        log_msg "uci set network.lan.ipaddr='$lan_ipaddr'"
    fi
    if [ "$wan_proto" != "siderouter" ] && [ -n "$lan_dns" ]; then
        uci_remove network lan dns
        for dns in $lan_dns; do
            uci_add_list network lan dns "$dns"
        done
    fi

    # wifi_setup_radio() {
    #     local radio=$1
    #     uci_get wireless ${radio} && {
    #         if [ "$(uci_get wireless ${radio} band)" = "5g" ]; then
    #             uci_set wireless default_${radio} ssid "${wifi_ssid}_5G"
    #         elif [ "$(uci_get wireless ${radio} band)" = "2g" ]; then
    #             uci_set wireless default_${radio} ssid "${wifi_ssid}_2.4G"
    #         fi
    #         uci_set wireless default_${radio} device "${radio}"
    #         if [ "${wifi_key}" ]; then
    #             uci_set wireless default_${radio} encryption psk2
    #             uci_set wireless default_${radio} key "${wifi_key}"
    #         else
    #             uci_set wireless default_${radio} encryption none
    #         fi
    #     }
    # }

    # local wifi_ssid wifi_key old_wifi_ssid old_wifi_key
    # config_get wifi_ssid "$cfg" wifi_ssid
    # config_get wifi_key "$cfg" wifi_key
    # config_get old_wifi_ssid "$cfg" old_wifi_ssid
    # config_get old_wifi_key "$cfg" old_wifi_key

    # if [[ "${wifi_ssid}" != "${old_wifi_ssid}" || "${wifi_key}" != "${old_wifi_key}" ]]; then
    #     test -n "${wifi_ssid}" && {
    #         for radio in radio0 radio1 radio2 radio3; do
    #             wifi_setup_radio ${radio}
    #         done
    #         uci_changes wireless
    #         uci_set wizard default old_wifi_key "${wifi_key}"
    #         uci_set wizard default old_wifi_ssid "${wifi_ssid}"
    #     }
    # fi

    # 记录保存命令
    for config in network dhcp firewall wireless wizard; do
        if uci_changes "$config"; then
            case "$config" in
                network)
                    /etc/init.d/network restart &
                    # log_msg "Would restart: /etc/init.d/network restart"
                ;;
                firewall)
                    /etc/init.d/firewall reload &
                    # log_msg "Would restart: /etc/init.d/firewall reload"
                ;;
                dhcp)
                    /etc/init.d/dnsmasq reload &
                    # log_msg "Would restart: /etc/init.d/dnsmasq reload"
                ;;
                wireless)
                    wifi reload &
                    # log_msg "wifi reload"
                    ;;
            esac
        fi
    done
}

start_service() {
    config_load wizard
    config_foreach add_wizard wizard
}

service_triggers() {
    procd_add_reload_trigger "wizard"
}

extra_command "reconfig" ""
