#!/bin/sh /etc/rc.common

START=99
XBOOT=0
extra_command "reconfig" ""

reconfig() {
	local dhcp_action
	[ "$(uci_get dhcp lan ignore)" ] && dhcp_action="set wizard.default.dhcp='0'" || dhcp_action="delete wizard.default.dhcp"

	uci -q batch <<-EOF >/dev/null
		set wizard.default.wan_proto="$(uci_get network wan proto)"
		set wizard.default.wan_pppoe_user="$(uci_get network wan username)"
		set wizard.default.wan_pppoe_pass="$(uci_get network wan password)"
		set wizard.default.lan_ipaddr="$(uci_get network lan ipaddr)"
		set wizard.default.lan_netmask="$(uci_get network lan netmask)"
		set wizard.default.lan_gateway="$(uci_get network lan gateway)"
		set wizard.default.lan_dns="$(uci_get network lan dns)"
		set wizard.default.wan_ipaddr="$(uci_get network wan ipaddr)"
		set wizard.default.wan_netmask="$(uci_get network wan netmask)"
		set wizard.default.wan_gateway="$(uci_get network wan gateway)"
		set wizard.default.wan_dns="$(uci_get network wan dns)"
		set wizard.default.ap_bridge_ip="$(uci_get network lan ipaddr)"
		set wizard.default.ap_netmask="$(uci_get network lan netmask)"
		set wizard.default.ap_gateway="$(uci_get network lan gateway)"
		set wizard.default.ap_dhcp="$(uci_get dhcp lan ignore '0')"
		set wizard.default.ap_bridge_interfaces="$(uci_get network lan ifname)"
		set wizard.default.siderouter_local_ip="$(uci_get network lan ipaddr)"
		set wizard.default.siderouter_netmask="$(uci_get network lan netmask)"
		set wizard.default.siderouter_wan_ip="$(uci_get network wan ipaddr)"
		set wizard.default.siderouter_gateway="$(uci_get network wan gateway)"
		set wizard.default.siderouter_dhcp="$(uci_get dhcp lan ignore '0')"
		set wizard.default.siderouter_interfaces="$(uci_get network wan ifname)"
		$dhcp_action
		commit wizard
	EOF
}

log_msg() {
	logger -p daemon.info -t "wizard" "$*"
}

uci_changes() {
	local changes=$(uci -q changes "$1")
	[ -n "$changes" ] && uci_commit "$1" && return 0
	return 1
}

get_config() {
	local default="$1"
	shift
	for val in "$@"; do
		config_get "$val" "$default" "$val" ""
	done
}

validate_device() {
	local dev=$1
	[ -n "$dev" ] && ip link show "$dev" >/dev/null 2>&1 && return 0
	return 1
}

set_dns() {
	for cfg in wan lan; do
		eval dns_list=\$${cfg}_dns
		uci_remove network "$cfg" dns
		uci_remove network wan peerdns
		[ -z "$dns_list" ] && continue
		for dns in $dns_list; do
			uci_add_list network "$cfg" dns "$dns"
		done

		[ "$cfg" = "lan" ] && uci_remove dhcp lan ra_slaac
		[ "$cfg" = "wan" ] && uci_set network wan peerdns '0'
	done
}

add_wizard() {
	[ "$XBOOT" = 1 ] && return 0

	get_config default wan_proto wan_pppoe_user wan_pppoe_pass  \
		wan_ipaddr wan_netmask wan_gateway wan_dns lan_dns ipv6 \
		ap_bridge_ip ap_netmask ap_gateway ap_dhcp ap_bridge_interfaces \
		siderouter_local_ip siderouter_netmask siderouter_wan_ip siderouter_gateway siderouter_dhcp siderouter_interfaces \
		wifi_ssid wifi_key wifi_ssid_old wifi_key_old lan_ipaddr lan_netmask lan_ipaddr_old lan_netmask_old

	local device ifname
	device=$(uci_get network wan device || uci_get bk_network wan device "")
	ifname=$(uci_get network wan ifname "")
	validate_device "$device" || return 1

	case "$wan_proto" in
		pppoe)
			[ x"$(uci_get network wan username)" != x"$wan_pppoe_user" -o \
			  z"$(uci_get network wan password)" != z"$wan_pppoe_pass" ] && {
				uci_remove network wan
				uci_add network interface wan
				uci_set network wan proto pppoe
				uci_set network wan device "$device"
				uci_set network wan username "$wan_pppoe_user"
				uci_set network wan password "$wan_pppoe_pass"
				uci_set network wan ipv6 "$ipv6"
				[ -n "$ifname" ] && uci_set network wan ifname "$ifname"
			}
			;;
		dhcp)
			uci_remove network wan
			uci_add network interface wan
			uci_set network wan proto dhcp
			uci_set network wan device "$device"
			[ -n "$ifname" ] && uci_set network wan ifname "$ifname"
			;;
		ap)
			[ -n "$ap_bridge_ip" -a -n "$ap_netmask" -a -n "$ap_gateway" -a -n "$ap_bridge_interfaces" ] || return 1
			for iface in $ap_bridge_interfaces; do
				validate_device "$iface" || return 1
			done
			uci_remove network wan
			uci_set network lan ipaddr "$ap_bridge_ip"
			uci_set network lan netmask "$ap_netmask"
			uci_set network lan gateway "$ap_gateway"
			uci_set network lan type 'bridge'
			uci_set network lan ifname "$ap_bridge_interfaces"
			uci_set dhcp lan ignore "$ap_dhcp"
			# uci_remove dhcp lan ra
			# uci_remove dhcp lan ra_slaac
			# uci_remove dhcp lan ra_flags
			# uci_remove dhcp lan dhcpv6
			;;
		siderouter)
			[ -n "$siderouter_local_ip" -a -n "$siderouter_netmask" -a -n "$siderouter_wan_ip" -a -n "$siderouter_gateway" -a -n "$siderouter_interfaces" ] || return 1
			for iface in $siderouter_interfaces; do
				validate_device "$iface" || return 1
			done
			uci_remove network wan
			uci_add network interface wan
			uci_set network wan proto 'static'
			uci_set network lan ipaddr "$siderouter_local_ip"
			uci_set network lan netmask "$siderouter_netmask"
			uci_set network wan ipaddr "$siderouter_wan_ip"
			uci_set network wan netmask "$siderouter_netmask"
			uci_set network wan ifname "$siderouter_interfaces"
			uci_set network wan gateway "$siderouter_gateway"
			uci_set dhcp lan ignore "$siderouter_dhcp"
			;;
		*)
			return 1
			;;
	esac

	[ -n "$lan_ipaddr" -a -n "$lan_netmask" -a \
	  \( "$lan_ipaddr" != "$lan_ipaddr_old" -o "$lan_netmask" != "$lan_netmask_old" \) ] && {
		uci_set network lan ipaddr "$lan_ipaddr"
		uci_set network lan netmask "$lan_netmask"
		uci_set wizard default lan_ipaddr_old "$lan_ipaddr"
		uci_set wizard default lan_netmask_old "$lan_netmask"
	}

	[ -n "$wifi_ssid" -a -n "$wifi_key" ] && {
		config_load wireless
		local wifi_updated=0
		process_wifi_iface() {
			local cfg="$1"
			get_config "$cfg" mode
			get_config "$cfg" device
			[ "$mode" = "ap" ] || return 0
			uci_set wireless "$cfg" ssid "$wifi_ssid"
			uci_set wireless "$cfg" key "$wifi_key"
			uci_set wireless "$cfg" encryption 'psk2'
			get_config "$device" band
			if [ "$band" = "6g" ]; then
				uci_set wireless "$cfg" ocv '0'
				uci_set wireless "$cfg" ssid "${wifi_ssid}_6G"
				uci_set wireless "$cfg" encryption 'sae'
				uci_remove wireless "$cfg" ft_psk_generate_local
				uci_set wireless "$device" country 'DE'
				uci_set wireless "$device" channel '21'
			fi
			wifi_updated=1
		}
		config_foreach process_wifi_iface wifi-iface
		[ "$wifi_updated" = "1" ] || {
			return 1
		}
		if [ "$wifi_ssid" != "$wifi_ssid_old" -o "$wifi_key" != "$wifi_key_old" ]; then
			uci_set wizard default wifi_key_old "$wifi_key"
			uci_set wizard default wifi_ssid_old "$wifi_ssid"
		fi
	}

	set_dns
	for config in network dhcp firewall wireless wizard; do
		if uci_changes "$config"; then
			case "$config" in
				wireless) wifi reload & ;;
				dhcp) /etc/init.d/dnsmasq reload & ;;
				network) /etc/init.d/network reload & ;;
				firewall) /etc/init.d/firewall reload & ;;
			esac
		fi
	done
}

start() {
	config_load wizard
	config_foreach add_wizard wizard
}
