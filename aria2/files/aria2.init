#!/bin/sh /etc/rc.common
# Copyright (C) 2016-2017 Hsing-wang Liao <kuoruan@gmail.com>
# Licensed to the public under the Apache License 2.0.

START=99
USE_PROCD=1

NAME=aria2
PROG=/usr/bin/aria2c

_info() {
    echo -e "$(date "+%Y-%m-%d %H:%M:%S"): $*" >> "$log_dir"/aria2_syslog.log
}

make_dir() {
    for d in "$@"; do
        [ -d "$d" ] || mkdir -p "$d" 2>/dev/null || {
            _info "无法创建<code>$d</code>目录。"
            return 1
        }
    done
}

create_file() {
    for file in "$@"; do
        [ -f "$file" ] || touch "$file" || {
            _info "无法创建文件：$file"
            return 1
        }
    done
}

_change_owner() {
    local u="$1"; shift
    for d in "$@"; do
        if [ -f "$d" ]; then
            chown "$u" "$d" 2>/dev/null || return 1
        elif [ -d "$d" ]; then
            chown -R "$u" "$d" 2>/dev/null || return 1
        fi
    done
    return 0
}

append_options() {
    for o in "$@"; do
        eval "v=\$$o"
        [ -n "$v" ] && echo "${o//_/-}=$v" >> "$config_file_tmp"
    done
}

append_setting() {
    while [ "$#" -gt 0 ]; do
        [ "${1#*=}" ] && echo "$1" >> "$config_file_tmp"
        shift
    done
}

append_header() {
    [ -n "$1" ] && echo "header=\"$1\"" >>"$config_file_tmp"
}

aria2_validate() {
    uci_load_validate "$NAME" aria2 "$1" "$2" \
    'pro:string:/usr/share/aria2' \
    'all_proxy:string' \
    'all_proxy_passwd:string' \
    'all_proxy_user:string' \
    'auto_save_interval:range(0,600)' \
    'bt_detach_seed_only:or("true","false")' \
    'bt_enable_lpd:or("true","false")' \
    'bt_load_saved_metadata:or("true","false")' \
    'bt_max_open_files:uinteger' \
    'bt_max_peers:uinteger' \
    'bt_prioritize_piece:string' \
    'bt_remove_unselected_file:or("true","false")' \
    'bt_request_peer_speed_limit:string' \
    'bt_save_metadata:or("true","false")' \
    'bt_seed_unverified:or("true","false")' \
    'bt_stop_timeout:uinteger' \
    'bt_tracker:list(string)' \
    'ca_certificate:file' \
    'certificate:file' \
    'check_certificate:or("true","false"):true' \
    'check_integrity:or("true","false")' \
    'config_dir:string:/var/etc/aria2' \
    'connect_timeout:uinteger' \
    'dht_listen_port:string' \
    'dir:string' \
    'disable_ipv6:or("true","false")' \
    'disk_cache:string' \
    'enable_pro:bool' \
    'enable_dht6:or("true","false")' \
    'enable_dht:or("true","false"):true' \
    'enable_logging:bool' \
    'enable_peer_exchange:or("true","false")' \
    'enable_proxy:bool' \
    'enabled:bool:0' \
    'event_poll:or("epoll","kqueue","port","poll","select")' \
    'file_allocation:or("none","prealloc","trunc","falloc")' \
    'follow_torrent:or("true","false","mem")' \
    'force_save:or("true","false")' \
    'http_accept_gzip:or("true","false")' \
    'http_no_cache:or("true","false")' \
    'listen_port:string' \
    'log_dir:string:/var/log' \
    'log_level:or("debug","info","notice","warn","error")' \
    'lowest_speed_limit:string' \
    'max_concurrent_downloads:uinteger' \
    'max_connection_per_server:uinteger' \
    'max_download_limit:string' \
    'max_overall_download_limit:string' \
    'max_overall_upload_limit:string' \
    'max_tries:uinteger' \
    'max_upload_limit:string' \
    'min_split_size:string' \
    'pause:or("true","false")' \
    'pause_metadata:or("true","false")' \
    'peer_id_prefix:string' \
    'peer_agent:string' \
    'private_key:file' \
    'retry_wait:uinteger' \
    'rpc_auth_method:or("none","user_pass","token")' \
    'rpc_certificate:file' \
    'rpc_listen_port:range(1024,65535)' \
    'rpc_passwd:string' \
    'rpc_private_key:file' \
    'rpc_secret:string' \
    'rpc_secure:or("true","false")' \
    'rpc_user:string' \
    'save_session_interval:uinteger' \
    'seed_ratio:ufloat' \
    'seed_time:ufloat' \
    'split:uinteger' \
    'timeout:uinteger' \
    'user:string' \
    'user_agent:string'
}

pro_conf() {
    cd $pro
    if [ ! -s aria2.conf ]; then
        for i in core aria2.conf clean.sh delete.sh tracker.sh dht.dat dht6.dat script.conf; do
            wget -qN -t2 -T3 raw.githubusercontent.com/P3TERX/aria2.conf/master/$i || \
            wget -qN -t2 -T3 cdn.jsdelivr.net/gh/P3TERX/aria2.conf/$i || \
            curl -fsSLO p3terx.github.io/aria2.conf/$i
            [ -s $i ] && _info " $i 下载成功 !" || _info " $i 下载失败 !"
        done
        sed -i "{
            /033/d
            s|^#!.*|#!/bin/sh|g
            s|/root/.aria2|$pro|g
            /CONF_DIR/{s/aria2.conf/$NAME.conf.$section/g}
        }" *
        chmod +x *.sh && sh ./tracker.sh
        _info "Aria2加强配置下载完成！"
    fi
    [ ! -s aria2.conf ] && return 1
    [ x"$rpc_secret" = x ] && sed -i '/^rpc-secret/s/^/#/' aria2.conf
    sed '/^$/{N;/\n$/D};' aria2.conf >"$config_file"
    echo -e "# 以下是系统生成，如和上面的配置有重复以下面为准。#" >>"$config_file"
    while read p; do
        grep -q "^${p%%=*}" $config_file && {
            sed -i "s|^${p%%=*}=.*|$p|" $config_file
        } || echo "$p" >> $config_file
    done < $config_file_tmp
}

aria2_start() {
    local section="$1"
    [ "$2" = "0" ] || { _info "验证失败。"; return 1; }
    [ "$enabled" = "1" ] || return 1
    [ -n "$dir" ] && make_dir "$dir" || { _info "请设置下载目录。"; return 1; }
    if [ "$enable_pro" = "1" ]; then
        a="$pro"
        make_dir "$pro"
    else
        a="$config_dir"
        [ -d "$pro" ] && rm -rf "$pro"; _info "扩展功能已关闭，删除原来的 $pro 目录"
        make_dir "$config_dir"
        chmod 755 "$config_dir"
    fi

    session_file="$a/$NAME.session"
    config_file_tmp="$a/$NAME.conf.tmp"
    config_file="$a/$NAME.$section.conf"

    create_file "$session_file"
    if [ ."$enable_dht" = ."true" -a ! -f "$a"/dht.dat ]; then
        dht_file="$a/dht.dat"
        create_file "$dht_file"
        append_setting "enable-dht=true" "dht-file-path=$dht_file"
    fi

    append_setting "all-proxy-passwd=$all_proxy_passwd" "all-proxy-user=$all_proxy_user" \
    "enable-rpc=true" "quiet=true" "input-file=$session_file" "log-level=$log_level" "log_dir=$log_dir" "log=$log" \
    "save-session=$a/$NAME.session" "rpc-allow-origin-all=true" "rpc-listen-all=true" \
    "rpc-private-key=$rpc_private_key"

    if [ -z "$enable_logging" ]; then
        append_options "log_dir" "log_level" "log"
    elif [ "$enable_logging" = "1" ]; then
        make_dir "$log_dir"
        [ x$log_dir = x ] && log="/var/log/aria2.log" || log="${log_dir}/aria2.log"
        append_setting "log_dir=$log_dir" "log=$log"
        append_options "log_level"
        [ -s "$log_dir"/aria2.log ] || echo > "$log_dir"/aria2.log
    fi

    if [ -z "$enable_proxy" ] || [ "$enable_proxy" = "1" ]; then
        append_options "all_proxy" "all_proxy_user" "all_proxy_passwd"
    fi

    if [ "$rpc_auth_method" = "token" ]; then
        if [ -n "$rpc_secret" ]; then
            append_setting "rpc-secret=$rpc_secret"
        else
            append_setting rpc-secret=""
        fi
    fi

    if [ ."$rpc_secure" = ."true" ] && [ -n "$rpc_certificate" ]; then
        append_setting "rpc-secure=true"
        append_options "rpc_certificate" "rpc_private_key"
    fi

    if [ ."$check_certificate" = ."true" ]; then
        append_setting "check-certificate=true"
        append_options "ca_certificate"
    elif [ ."$check_certificate" = ."false" ]; then
        append_setting "check-certificate=false"
    fi

    if [ ."$enable_dht6" = ."true" ] && [ ."$disable_ipv6" != ."true" ]; then
        dht6_file="$a/dht6.dat"
        create_file "$dht6_file"
        append_setting "enable-dht6=true" "dht-file-path6=$dht6_file"
    fi

    if [ -n "$bt_tracker" ]; then
        for t in $bt_tracker; do
            if [ -z "$bt_tracker_list" ]; then
                bt_tracker_list="$t"
            else
                bt_tracker_list="$bt_tracker_list,$t"
            fi
        done
        append_setting "bt-tracker=$bt_tracker_list"
    fi

    append_options "auto_save_interval" "bt_enable_lpd" "bt_max_open_files" "bt_max_peers" \
        "bt_remove_unselected_file" "bt_request_peer_speed_limit" "pause" "bt_prioritize_piece" \
        "bt_stop_timeout" "bt_detach_seed_only" "bt_save_metadata" "bt_load_saved_metadata" \
        "bt_seed_unverified" "certificate" "check_integrity" "connect_timeout" "dht_listen_port" \
        "disable_ipv6" "disk_cache" "enable_peer_exchange" "event_poll" "file_allocation" \
        "follow_torrent" "force_save" "http_accept_gzip" "http_no_cache" "listen_port" "split" \
        "lowest_speed_limit" "max_concurrent_downloads" "max_connection_per_server" "user_agent" \
        "max_download_limit" "max_overall_download_limit" "max_overall_upload_limit" "max_tries" \
        "max_upload_limit" "min_split_size" "pause_metadata" "peer_id_prefix" "peer_agent" "private_key" \
        "dir" "retry_wait" "rpc_listen_port" "save_session_interval" "seed_ratio" "seed_time" "timeout"

    config_list_foreach "$section" "header" append_header
    config_list_foreach "$section" "extra_settings" append_setting

    if [ "$enable_pro" = "1" ]; then
        [ ! -s "$config_file" ] && (pro_conf || cat "$config_file_tmp" >>"$config_file")
    else
        echo -e "#===以下是系统生成，对此文件修改将无法正常运行===#" >$config_file
        cat "$config_file_tmp" >>"$config_file"
    fi
    rm -f "$config_file_tmp"

    procd_open_instance "$NAME.$section"
    procd_set_param command "$PROG"
    procd_append_param command --conf-path="$config_file"
    procd_set_param respawn
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param file "$config_file"

    if [ -n "$user" ]; then
        if ( user_exists "$user" && _change_owner "$user" "$a" "$log" ); then
            _info "Aria2将以<code> $user </code>的用户身份运行。"
            [ "$user" != "root" ] && _info "请确保用户$user具有下载目录$dir的写入权限。"
			procd_set_param user "$user"
        else
            user=""
            _info "设置$user用户运行失败，使用默认用户。"
        fi
    fi
    procd_add_jail "$NAME.$section" log
    procd_add_jail_mount "$config_file"
    procd_add_jail_mount_rw "$dir" "$a" "$log"
    procd_close_instance
}

service_triggers() {
    procd_add_reload_trigger "$NAME"
    procd_add_validation aria2_validate
}

start_service() {
    config_load "$NAME"
    config_foreach aria2_validate "aria2" aria2_start
}
