#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

log_msg() {
    logger -p daemon.info -t "deluge" "$*"
}

get_config() {
    for val in $@; do
        config_get "$val" main "$val" ""
    done
}

create_directory() {
    for dir in "$@"; do
        [ -n "$dir" -a ! -d "$dir" ] && mkdir -p "$dir" 2>/dev/null
    done
}

set_ownership() {
    [ -z "$user" ] && return 0
    id "$user" >/dev/null 2>&1 || return 1

    _paths="$log_file $log_dir $profile_dir $download_location $move_completed_path $torrentfiles_location"

    echo "$_paths" | while read -r path; do
        [ -z "$path" ] && continue
        if [ -d "$path" ]; then
            chown -R "$user" "$path"
            chmod 750 "$path"
        elif [ -f "$path" ]; then
            chown "$user" "$path"
            chmod 640 "$path"
        fi
    done
}

create_update_script() {
	cat <<-EOF > "$profile_dir/update_deluge.py"
	#!/usr/bin/env python3
	import os, re, sys, subprocess, hashlib, random
	from deluge.configmanager import ConfigManager, set_config_dir

	b = lambda v: v if (s:=str(v).strip().lower()) not in {'1','0','true','false'} else s in {'1','true'}
	def sha1(p, s): return hashlib.sha1(s.encode() + p.encode()).hexdigest()
	def salt(n=40): return ''.join(random.choices('abcde0123456789', k=n))
	def update(cfg, d): c = False; [cfg.__setitem__(k,v) or (c:=True) for k,v in d.items() if v is not None and cfg.get(k)!=v]; c and cfg.save()
	def uci_cfg():
	    out = subprocess.run(["uci", "show", "deluge"], capture_output=True, text=True).stdout
	    return {m[1]: m[2] for l in out.splitlines() if (m := re.match(r".*main\.([^=]+)='(.*)'$", l))}

	if __name__=="__main__":
	    u = uci_cfg()
	    config_dir = os.path.normpath(u.get("profile_dir") or "/etc/deluge")
	    set_config_dir(config_dir)
	    if not os.path.exists(os.path.join(config_dir,"web.conf")):
	        from deluge.ui.web.server import DelugeWeb
	        w = DelugeWeb(); w.daemon = False; w.start(); w.shutdown()

	    web = ConfigManager("web.conf")
	    core = ConfigManager("core.conf")
	    if u.get("password"):
	        s = web.get("pwd_salt") or salt()
	        h = sha1(u["password"], s)
	    else: s = h = None

	    update(core,{
	        "cache_size":int(u.get("cache_size")),
	        "move_completed":b(u.get("move_completed")),
	        "download_location":u.get("download_location"),
	        "move_completed_path":u.get("move_completed_path"),
	        "sequential_download":b(u.get("sequential_download")),
	        "torrentfiles_location":u.get("torrentfiles_location"),
	        "max_upload_speed":int(u.get("max_upload_speed",-1)),
	        "max_active_limit":int(u.get("max_active_limit",-1)),
	        "max_active_seeding":int(u.get("max_active_seeding",-1)),
	        "max_download_speed":int(u.get("max_download_speed",-1)),
	        "max_connections_global":int(u.get("max_connections_global",200)),
	        "max_upload_slots_global":int(u.get("max_upload_slots_global",-1)),
	        "prioritize_first_last_pieces":b(u.get("prioritize_first_last_pieces"))
	    })

	    update(web,{
	        "pwd_salt":s, "pwd_sha1":h,
	        "port":int(u.get("port",8112)),
	        "https":b(u.get("https",False)),
	        "language":u.get("language","en_GB"),
	        "geoip_db_location":os.path.join(u.get("geoip_db_location","/usr/share/GeoIP"),"GeoIP.dat")
	    })
	EOF
}

start_deluge() {
    config_get_bool enabled main enabled 0
    [ "$enabled" -eq 0 ] && return 1

    get_config "port user log_dir log_level profile_dir enable_logging download_location"

    core="$profile_dir/core.conf"
    create_directory "$profile_dir" "$download_location"

    if [ ! -s "$core" ]; then
		cat <<-EOF > "$core"
		{
		    "random_port": true,
		    "max_active_limit": -1,
		    "max_active_seeding": -1,
		    "queue_new_to_top": true,
		    "new_release_check": false,
		    "max_upload_slots_global": -1,
		    "pre_allocate_storage": true,
		    "download_location": "$download_location"
		}
		EOF
    fi

    local log_param log_file
    local port_param=${port:+"-p $port"}
    local user_param=${user:+"-U $user"}
    if [ "$enable_logging" -eq 1 ]; then
        create_directory "$log_dir"
        log_file="${log_dir:-$profile_dir}/deluge.log"
        touch "$log_file"
        log_param="-l $log_file ${log_level:+"-L $log_level"}"
    fi

    set_ownership
    [ -s "$profile_dir/update_deluge.py" ] || create_update_script
    python $profile_dir/update_deluge.py

    procd_open_instance 'deluged'
    procd_set_param command /usr/bin/deluged -d -c $profile_dir $log_param $user_param
    procd_set_param respawn 300 5 5
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param file /usr/bin/deluged
    procd_set_param term_timeout 10
    procd_close_instance

    procd_open_instance 'deluge-web'
    procd_set_param command /usr/bin/deluge-web -d -c $profile_dir $log_param $user_param $port_param
    procd_set_param respawn
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param file /usr/bin/deluge-web
    procd_set_param term_timeout 10
    procd_close_instance

    (
        sleep 5
        for proc in deluged deluge-web; do
            pgrep -x "$proc" >/dev/null \
                && log_msg "$proc is running" \
                || log_msg "$proc failed to start"
        done
    ) &
}

start_service() {
    config_load deluge
    config_foreach start_deluge
}

stop_service() {
    local deluge_pid=$(pgrep -x deluged)
    [ -z "$deluge_pid" ] && return 0

    kill -TERM "$deluge_pid" 2>/dev/null

    timeout=10
    while kill -0 "$deluge_pid" 2>/dev/null && [ $((timeout--)) -gt 0 ]; do
        sleep 1
    done

    kill -0 "$deluge_pid" 2>/dev/null && kill -KILL "$deluge_pid"
    log_msg 'Stop deluged service'
}

reload_service() {
    stop
    start
}

service_triggers() {
    procd_add_reload_trigger deluge
}
