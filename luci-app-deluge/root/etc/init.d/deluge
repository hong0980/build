#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

log_msg() {
    logger -p daemon.info -t "deluge" "$*"
}

get_config() {
    for val in "$@"; do
        config_get "$val" main "$val" ""
    done
}

update_config() {
    file="$1"; shift
    for node in "$@"; do
        eval "val=\"\${$node}\""
        conf=$(grep "\"$node\"" "$file" | sed 's/[ ,"]//g; s/.*://')
        if [ -n "$val" -a "$conf" != "$val" ]; then
            sed -i "/\"$node\"/ s|${conf:-\"\"}|$val|" "$file"
        fi
    done
}

set_ownership() {
    local path="$1"
    local recursive="$2"

    [ -z "$user" ] && return 0
    if ! id "$user" >/dev/null 2>&1; then
        return 1
    fi

    if [ -d "$path" ]; then
        [ "$recursive" = "1" ] && chown -R "$user" "$path" || chown "$user" "$path"
        chmod 750 "$path"
    elif [ -f "$path" ]; then
        chown "$user" "$path"
        chmod 640 "$path"
    fi
}

create_directory() {
    for dir in "$@"; do
        [ -n "$dir" -a ! -d "$dir" ] && mkdir -p "$dir" 2>/dev/null
    done
}

start_deluge() {
    config_get_bool enabled main enabled 0
    [ "$enabled" -eq 0 ] && return 1
    get_config download_location enable_logging geoip_db_location https \
        language log_dir log_level password port profile_dir user

    web="$profile_dir/web.conf"
    core="$profile_dir/core.conf"
    create_directory "$profile_dir" "$download_location"

    if [ ! -e "$profile_dir/sha1.py" ]; then
		cat <<-EOF > "$profile_dir/sha1.py"
		#!/usr/bin/env python
		import sys
		import hashlib
		password, pwd_sha1 = sys.argv[1:3]
		hashed_password = hashlib.sha1(pwd_sha1.encode("utf-8") + password.encode("utf-8")).hexdigest()
		print(hashed_password)
		EOF
    fi

    if [ -e "$core" ]; then
        update_config "$core" cache_size copy_torrent_file download_location max_active_downloading \
            max_active_limit max_active_seeding max_connections_global max_connections_per_torrent \
            max_download_speed max_download_speed_per_torrent max_upload_slots_global \
            max_upload_slots_per_torrent max_upload_speed max_upload_speed_per_torrent \
            move_completed move_completed_path prioritize_first_last_pieces sequential_download \
            torrentfiles_location
        create_directory "$move_completed_path" "$torrentfiles_location"
    else
		cat <<-EOF > "$core"
		{
		    "random_port": true,
		    "queue_new_to_top": true,
		    "new_release_check": false,
		    "pre_allocate_storage": true,
		    "max_active_limit": -1,
		    "max_active_seeding": -1,
		    "max_upload_slots_global": -1,
		    "download_location": "$download_location"
		}
		EOF
    fi

    local isboot log_param log_file
    dwsalt=$(awk -F'"' '/pwd_salt/ {print $4}' $web 2>/dev/null || tr -dc 'a-e0-9' < /dev/urandom | head -c 40)
    pwd_sha1="$(python $profile_dir/sha1.py $password $dwsalt)"
    if [ -e "$web" ]; then
        update_config "$web" geoip_db_location https language port pwd_sha1
    else
		cat <<-EOF > "$web"
		{
		    "port": $port,
		    "https": $https,
		    "pwd_salt": "$dwsalt",
		    "pwd_sha1": "$pwd_sha1",
		    "language": "$language",
		    "show_session_speed": true,
		    "geoip_db_location": "$geoip_db_location/GeoIP.dat"
		}
		EOF
        isboot=1
    fi

    if [ "$enable_logging" = 1 ]; then
        create_directory "$log_dir"
        log_file="${log_dir:-$profile_dir}/deluge.log"
        touch "$log_file"
        log_param="-l $log_file ${log_level:+"-L $log_level"}"
    fi

    if [ -n "$user" ]; then
        for dir in "$profile_dir" "$download_location" "$move_completed_path" "$torrentfiles_location" "$log_dir"; do
            [ -n "$dir" -a -d "$dir" ] && set_ownership "$dir" 1
        done
        for file in "$profile_dir/sha1.py" "$core" "$web" "$log_file"; do
            [ -f "$file" ] && set_ownership "$file"
        done
    fi

    local port_param=${port:+"-p $port"}
    local user_param=${user:+"-U $user"}
    local profile_param=${profile_dir:+"-c $profile_dir"}

    procd_open_instance 'deluged'
    procd_set_param command deluged $profile_param $log_param $user_param
    procd_set_param respawn
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param file deluged
    # procd_set_param term_timeout 60
    procd_close_instance

    procd_open_instance 'deluge-web'
    procd_set_param command deluge-web $profile_param $log_param $user_param $port_param
    procd_set_param respawn
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param file deluged
    # procd_set_param term_timeout 60
    procd_close_instance

    sleep 3
    if [ "$isboot" = 1 ]; then
        restart
    else
        ps | grep -q "[d]eluged" && log_msg 'Start deluge service'
        ps | grep -q "[d]eluge-web" && log_msg 'Start deluge-web service'
    fi
}

start_service() {
    config_load deluge
    config_foreach start_deluge
}

stop_service() {
    log_msg 'Stop deluge-web service'
    kill $(ps | grep -E "[d]eluge(d|-web)" | awk '{print $1}') 2>/dev/null
}

reload_service() {
    stop
    start
}

service_triggers() {
    procd_add_reload_trigger deluge
}
