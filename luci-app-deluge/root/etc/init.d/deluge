#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

log_msg() {
    logger -p daemon.info -t "deluge" "$*"
}

get_config() {
    for val in "$@"; do
        config_get "$val" main "$val" ""
    done
}

set_ownership() {
    local path="$1"
    local recursive="$2"

    [ -z "$user" ] && return 0
    if ! id "$user" >/dev/null 2>&1; then
        return 1
    fi

    if [ -d "$path" ]; then
        [ "$recursive" = "1" ] && chown -R "$user" "$path" || chown "$user" "$path"
        chmod 750 "$path"
    elif [ -f "$path" ]; then
        chown "$user" "$path"
        chmod 640 "$path"
    fi
}

create_directory() {
    for dir in "$@"; do
        [ -n "$dir" -a ! -d "$dir" ] && mkdir -p "$dir" 2>/dev/null
    done
}

start_deluge() {
    config_get_bool enabled main enabled 0
    [ "$enabled" -eq 0 ] && return 1
    get_config download_location enable_logging geoip_db_location https \
        language log_dir log_level password port profile_dir user

    web="$profile_dir/web.conf"
    core="$profile_dir/core.conf"
    auth="$profile_dir/auth"
    create_directory "$profile_dir" "$download_location"

    if [ ! -s "$profile_dir/sha1.py" ]; then
		cat <<-EOF > "$profile_dir/sha1.py"
		#!/usr/bin/env python
		import sys
		import hashlib
		password, pwd_sha1 = sys.argv[1:3]
		hashed_password = hashlib.sha1(pwd_sha1.encode("utf-8") + password.encode("utf-8")).hexdigest()
		print(hashed_password)
		EOF
    fi

    [ -s "$profile_dir/update_deluge.py" ] || {
		cat <<-EOF > "$profile_dir/update_deluge.py"
		#!/usr/bin/env python3
		import os, subprocess, hashlib, random, string
		from deluge.configmanager import ConfigManager

		def get_uci_config():
		    try:
		        out = subprocess.run(["uci", "show", "deluge"], capture_output=True, text=True, check=True).stdout
		    except:
		        return {}
		    config = {}
		    for line in out.strip().splitlines():
		        if '=' in line:
		            key, val = line.split('=', 1)
		            config[key.split('.')[-1]] = val.strip().strip("'")
		    return config

		def parse_bool(value):
		    if isinstance(value, bool):
		        return value
		    value = str(value).strip().lower()
		    return value in ("1", "true", "yes", "on")

		def gen_salt(n=40):
		    return ''.join(random.choices('abcde0123456789', k=n))

		def sha1_pwd(p, s):
		    return hashlib.sha1(s.encode() + p.encode()).hexdigest()

		def update(c, u):
		    changed = False
		    for k, v in u.items():
		        if v is not None and str(c.get(k)) != str(v):
		            c[k] = v
		            changed = True
		    if changed:
		        c.save()
		        print(f"Updated {c.config_file}")

		if __name__ == "__main__":
		    d = "/etc/deluge"
		    u = get_uci_config()
		    core = ConfigManager(os.path.join(d, "core.conf"))
		    web = ConfigManager(os.path.join(d, "web.conf"))

		    if "password" in u:
		        salt = web.get("pwd_salt") or gen_salt()
		        sha1 = sha1_pwd(u["password"], salt)
		    else:
		        salt = sha1 = None

		    update(core, {
		        "download_location": u.get("download_location"),
		        "move_completed": parse_bool(u.get("move_completed")),
		        "sequential_download": parse_bool(u.get("sequential_download")),
		        "prioritize_first_last_pieces": parse_bool(u.get("prioritize_first_last_pieces")),
		        "move_completed_path": u.get("move_completed_path"),
		        "max_connections_global": int(u.get("max_connections", "200")),
		        "max_download_speed": float(u.get("max_download_speed", "0")),
		        "max_upload_speed": float(u.get("max_upload_speed", "0")),
		        "max_active_limit": int(u.get("max_active_limit", "-1")),
		        "max_active_seeding": int(u.get("max_active_seeding", "-1")),
		        "max_upload_slots_global": int(u.get("max_upload_slots", "-1")),
		        "torrentfiles_location": u.get("torrentfiles_location"),
		    })

		    update(web, {
		        "port": int(u.get("port", "8112")),
		        "https": parse_bool(u.get("https", "0")),
		        "language": u.get("language", "en_GB"),
		        "geoip_db_location": os.path.join(u.get("geoip_db_location", "/usr/share/GeoIP"), "GeoIP.dat"),
		        "pwd_salt": salt,
		        "pwd_sha1": sha1
		    })
		EOF
    }

    if [ ! -s "$core" ]; then
		cat <<-EOF > "$core"
		{
		    "random_port": true,
		    "queue_new_to_top": true,
		    "new_release_check": false,
		    "pre_allocate_storage": true,
		    "max_active_limit": -1,
		    "max_active_seeding": -1,
		    "max_upload_slots_global": -1,
		    "download_location": "$download_location"
		}
		EOF
    fi

    if [ ! -s "$web" ]; then
	    dwsalt=$(awk -F'"' '/pwd_salt/ {print $4}' $web 2>/dev/null || tr -dc 'a-e0-9' < /dev/urandom | head -c 40)
	    pwd_sha1="$(python $profile_dir/sha1.py $password $dwsalt)"
		cat <<-EOF > "$web"
		{
		    "port": $port,
		    "https": $https,
		    "pwd_salt": "$dwsalt",
		    "pwd_sha1": "$pwd_sha1",
		    "language": "$language",
		    "show_session_speed": true,
		    "geoip_db_location": "$geoip_db_location/GeoIP.dat"
		}
		EOF
    fi

    python $profile_dir/update_deluge.py

    local log_param log_file
    if [ "$enable_logging" = 1 ]; then
        create_directory "$log_dir"
        log_file="${log_dir:-$profile_dir}/deluge.log"
        touch "$log_file"
        log_param="-l $log_file ${log_level:+"-L $log_level"}"
    fi

    if [ -n "$user" ]; then
        for dir in "$profile_dir" "$download_location" "$move_completed_path" "$torrentfiles_location" "$log_dir"; do
            [ -n "$dir" -a -d "$dir" ] && set_ownership "$dir" 1
        done
        for file in "$profile_dir/sha1.py" "$core" "$web" "$log_file"; do
            [ -f "$file" ] && set_ownership "$file"
        done
    fi

    local port_param=${port:+"-p $port"}
    local user_param=${user:+"-U $user"}
    local profile_param=${profile_dir:+"-c $profile_dir"}

	procd_open_instance 'deluged'
	procd_set_param command /usr/bin/deluged -d $profile_param $log_param $user_param
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param file /usr/bin/deluged
	procd_set_param term_timeout 10
	procd_close_instance

	procd_open_instance 'deluge-web'
	procd_set_param command /usr/bin/deluge-web -d $profile_param $log_param $user_param $port_param
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param file /usr/bin/deluge-web
	procd_set_param term_timeout 10
	procd_close_instance

    ps | grep -q "[d]eluged" && log_msg 'Start deluge service'
    ps | grep -q "[d]eluge-web" && log_msg 'Start deluge-web service'
}

start_service() {
    config_load deluge
    config_foreach start_deluge
}

stop_service() {
    log_msg 'Stop deluge-web service'
}

reload_service() {
    stop
    start
}

service_triggers() {
    procd_add_reload_trigger deluge
}
