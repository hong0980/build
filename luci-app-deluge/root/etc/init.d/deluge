#!/bin/sh /etc/rc.common
#
# Copyright (C) 2015 OpenWrt-dist
# Copyright (C) 2022 hong0980 <win3gp@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=99

_boot() {
	[ -n "$user" ] && user="-U $user"
	[ -d "$profile_dir"  ] || mkdir -m 755 -p "$profile_dir"
	[ -d "$download_dir" ] || mkdir -m 755 -p "$download_dir"
	if [ "$enable_logging" -eq "1" ]; then
		[ -n "$log_level" ] && log_level="-L $log_level"
		[ -d "$log_dir"  ] || mkdir -m 755 -p "$log_dir"
		[ -n "$log_dir" ] && log_dir="-l $log_dir/deluge.log"
	else
		log_dir=""
		log_level=""
	fi
	if [ -f "$profile_dir/core.conf" ]; then
		sed -i "{
			/random_port/ {s|true|false|}
			/queue_new_to_top/ {s|false|true|}
			/new_release_check/ {s|true|false|}
			/listen_random_por/ {s|55554|null|}
			/pre_allocate_stor/ {s|false|true|}
			/cache_size/ {s|:.*,|: $cache_size,|}
			/download_location/ {s|: \".*\"|: \"$download_dir\"|}
			/move_completed_pa/ {s|: \".*\"|: \"$download_dir\"|}
			/torrentfiles_loca/ {s|: \".*\"|: \"$download_dir\"|}
		}" "$profile_dir/core.conf"
	fi
	if [ ! -f "$profile_dir/sha1.py" ]; then
		cat <<-EOF > "$profile_dir/sha1.py"
			#!/usr/bin/env python
			import sys
			import hashlib
			password = sys.argv[1]
			pwd_sha1 = sys.argv[2]
			s = hashlib.sha1()
			s.update(pwd_sha1.encode('utf-8'))
			s.update(password.encode('utf-8'))
			print (s.hexdigest())
		EOF
	fi
	dwsalt="$(head /dev/urandom | tr -dc 'a-e0-9' 2>&1 | head -c 40; echo)"
	dwsha1="$(/usr/bin/python3 $profile_dir/sha1.py $password $dwsalt)"
	[ "$https" = "https" ] && https=true || https=false
	if [ -f "$profile_dir/web.conf" ]; then
		sed -i '{
			/port/ {s|:.*,|: '"$port"',|}
			/https/ {s|:.*,|: '"$https"',|}
			/show_session_speed/ {s|false|true|}
			/pwd_salt/ {s|: ".*"|: "'"$dwsalt"'"|}
			/pwd_sha1/ {s|: ".*"|: "'"$dwsha1"'"|}
			/language/ {s|: ".*"|: "'"$language"'"|}
		}' "$profile_dir/web.conf"
	else
		cat <<-EOF > "$profile_dir/web.conf"
		{
			"port": $port,
			"language": "$language",
			"pwd_salt": "$dwsalt",
			"pwd_sha1": "$dwsha1"
		}
		EOF
	fi
	if [ ! -f "$profile_dir/.configured" ]; then
		echo "Setting default deluge ui to console ... "
		/usr/bin/deluge -s console
		touch "$profile_dir/.configured"
	fi
	port="-p $port"
	profile_dir="-c $profile_dir"
	/usr/bin/python3 /usr/bin/deluged    $profile_dir $log_dir $log_level $user
	/usr/bin/python3 /usr/bin/deluge-web $profile_dir $log_dir $log_level $user $port
	sleep 3
	ps | grep deluge | awk '/usr/{print $1}' >/dev/null 2>&1 && logger -t deluge 'Start deluge service'
	ps | grep deluge | awk '/web/{print $1}' >/dev/null 2>&1 && logger -t deluge 'Start deluge-web service'
}

start() {
	config_load deluge
	get_config="language cache_size download_dir enabled enable_logging log_dir log_level https password port profile_dir user"
	for rt in $get_config; do
		config_get_bool $rt main $rt
		config_get $rt main $rt
	done
	if [ -n "$enabled" ]; then
		if [ -d "$profile_dir" ]; then
			_boot
		else
			_boot && sleep 3
			restart
		fi
	else
		exit 0
	fi
}

stop() {
	kill "$(ps | grep deluge | awk '/usr/{print $1}')" >/dev/null 2>&1
	kill "$(ps | grep deluge | awk '/web/{print $1}')" >/dev/null 2>&1
	logger -t deluge 'Stop deluge service'
}

restart() {
	stop
	sleep 2
	start
}
