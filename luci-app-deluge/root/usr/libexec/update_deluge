#!/usr/bin/env python3
import os, re, subprocess, hashlib, random
from deluge.configmanager import ConfigManager, set_config_dir, get_config_dir

def str_to_bool(v):
    if isinstance(v, bool): return v
    s = str(v).strip().lower()
    if s in {"1", "true", "yes"}: return True
    if s in {"0", "false", "no"}: return False
    return v

def sha1_hash(password, salt):
    return hashlib.sha1((salt + password).encode()).hexdigest()

def generate_salt(length=40):
    return ''.join(random.choices('abcdef0123456789', k=length))

def run_cmd(cmd):
    try:
        return subprocess.run(cmd, capture_output=True, text=True, check=True).stdout
    except subprocess.CalledProcessError:
        return ""

def parse_uci_config(section="deluge.main"):
    config = {}
    for line in run_cmd(["uci", "show", "deluge"]).splitlines():
        m = re.match(rf"{re.escape(section)}\.([^=]+)=(?:'|\")?(.*?)(?:'|\")?$", line)
        if m:
            config[m.group(1)] = m.group(2)
    return config

def update_config(cfg, updates):
    changed = False
    for k, v in updates.items():
        if v is not None and cfg.get(k) != v:
            cfg[k] = v
            changed = True
    if changed:
        cfg.save()

def main():
    uci = parse_uci_config()
    set_config_dir(uci.get("profile_dir", "/etc/deluge"))
    os.makedirs(get_config_dir(), exist_ok=True)

    web_cfg = ConfigManager("web.conf")
    core_cfg = ConfigManager("core.conf")

    salt = web_cfg.get("pwd_salt") or generate_salt()
    pwd = uci.get("password")
    hashed_pwd = sha1_hash(pwd, salt) if pwd else None

    update_config(core_cfg, {
        "send_info": False,
        "new_release_check": False,
        "geoip_db_location": uci.get("geoip_db_location", ""),
        "download_location": uci.get("download_location", ""),
        "move_completed_path": uci.get("move_completed_path", ""),
        "torrentfiles_location": uci.get("torrentfiles_location", ""),
        "add_paused": str_to_bool(uci.get("add_paused", False)),
        "move_completed": str_to_bool(uci.get("move_completed", False)),
        "sequential_download": str_to_bool(uci.get("sequential_download", False)),
        "pre_allocate_storage": str_to_bool(uci.get("pre_allocate_storage", False)),
        "prioritize_first_last_pieces": str_to_bool(uci.get("prioritize_first_last_pieces", False)),
        "cache_size": int(uci.get("cache_size", 16384)),
        "cache_expiry": int(uci.get("cache_expiry", 60)),
        "max_upload_speed": int(uci.get("max_upload_speed", -1)),
        "max_download_speed": int(uci.get("max_download_speed", -1)),
        "max_active_downloading": int(uci.get("max_active_downloading", 3)),
        "max_active_limit": int(uci.get("max_active_limit", -1)),
        "max_active_seeding": int(uci.get("max_active_seeding", -1)),
        "max_connections_global": int(uci.get("max_connections_global", 200)),
        "max_upload_slots_global": int(uci.get("max_upload_slots_global", -1)),
    })

    update_config(web_cfg, {
        "pwd_salt": salt,
        "pwd_sha1": hashed_pwd,
        "language": uci.get("language", "en_GB"),
        "port": int(uci.get("port", 8112)),
        "session_timeout": int(uci.get("session_timeout", 3600)),
        "https": str_to_bool(uci.get("https", False)),
        "show_session_speed": str_to_bool(uci.get("show_session_speed", True)),
    })

if __name__ == "__main__":
    main()
