<%
    local ipkg = require "luci.model.ipkg"
    local has_ui = false

    local uilist = {
        supported = {
            ["yaaw"] = "YAAW",
            ["ariang"] = "AriaNg",
            ["webui-aria2"] = "WebUI-Aria2"
        },
        installed = {}
    }

    for k in pairs(uilist.supported) do
        if ipkg.installed(k) then
            uilist.installed[#uilist.installed + 1] = k
            has_ui = true
        end
    end
    
    local running = luci.sys.call("ps 2>/dev/null | grep aria2c 2>/dev/null | grep /usr/bin >/dev/null") == 0
%>

<fieldset class="cbi-section">
    <p id="aria2_status">
        <em><%:Collecting data...%></em>
    </p>
    <% if has_ui and running then %>
        <p>
            <%:Installed web interface: %>
            <%- for _, v in pairs(uilist.installed) do %>
                <input type="button" class="cbi-button cbi-button-apply" style="margin: 0 5px;"
                    value="<%=uilist.supported[v]%>" onclick="openWebInterface('<%=v%>', '<%=uilist.supported[v]%>');" />
            <%- end %>
        <p>
    <% end %>
</fieldset>

<script type="text/javascript">//<![CDATA[
    XHR.poll(5, '<%=url("admin/nas/aria2/status")%>', null,
        function (x, data) {
            var tb = document.getElementById('aria2_status');
            if (data && tb) {
                tb.innerHTML = data.running
                    ? '<b><font color=green><%:The Aria2 service is running.%>'
                    : '<b><font color=red><%:The Aria2 service is not running.%>';
            }
        }
    );

    function openWebInterface(path, identifier) {
        window.open(`${window.location.origin}/${path}`, identifier);
    }

    function randomString(len) {
        var randomStr = '',
            restLen = len;
        while ((restLen = len - randomStr.length) > 0) {
            randomStr += Math.random().toString(36).substring(2, 2 + restLen);
        }
        return randomStr;
    }

    function randomToken() {
        var len = 32;
        var inputLength = prompt('<%:Please input token length:%>', len);
        if (inputLength === null || inputLength === '') return;
        if (/^\d+$/.test(inputLength)) len = parseInt(inputLength);
        var secretInput = document.getElementById('cbid.aria2.main.rpc_secret');
        if (secretInput) secretInput.value = randomString(len);
    }

    function showRPCURL() {
        var a = document.getElementById('cbid.aria2.main._use_ws'),
            b = document.getElementById('cbid.aria2.main.rpc_secure'),
            c = document.getElementById('cbid.aria2.main.rpc_listen_port'),
            d = document.getElementById('cbid.aria2.main.rpc_auth_method');

        var port = (c && /^\d+$/.test(c.value)) ? parseInt(c.value) : 6800,
            authMethod = (d && d.value) ? d.value : "none",
            useWS = (a && a.checked),
            secure = (b && b.checked);

        var protocol = useWS ? (secure ? 'wss' : 'ws') : (secure ? 'https' : 'http');
        var url = protocol + "://";

        if (authMethod == 'token') {
            var authToken = document.getElementById('cbid.aria2.main.rpc_secret').value;
            url += 'token:' + authToken + '@';
        } else if (authMethod == 'user_pass') {
            var authUser = document.getElementById('cbid.aria2.main.rpc_user').value,
                authPasswd = document.getElementById('cbid.aria2.main.rpc_passwd').value;
            url += authUser + ':' + authPasswd + '@';
        }

        url += window.location.hostname + ':' + port + '/jsonrpc';
        var rpcUrlElm = document.getElementById('cbid.aria2.main._rpc_url');
        rpcUrlElm ? rpcUrlElm.value = url : alert(url);
    }
//]]>
</script>
