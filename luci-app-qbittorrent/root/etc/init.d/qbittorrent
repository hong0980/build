#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

create_directory() {
	for dir in "$@"; do
		[ -n "$dir" -a ! -d "$dir" ] && mkdir -p "$dir" 2>/dev/null
	done
}

get_config() {
	for value in "$@"; do
		config_get "$value" main "$value" ""
	done
}

update_config() {
    for var_name in $@; do
        case "$var_name" in
            Path) conf_key="FileLogger\\\\Path" ;;
            Locale) conf_key="General\\\\Locale" ;;
            Enabled) conf_key="FileLogger\\\\Enabled" ;;
            CSRFProtection) conf_key="WebUI\\\\CSRFProtection" ;;
            DefaultSavePath) conf_key="Session\\\\DefaultSavePath" ;;
            PortForwardingEnabled) conf_key="PortForwardingEnabled" ;;
            AuthSubnetWhitelist) conf_key="WebUI\\\\AuthSubnetWhitelist" ;;
            AuthSubnetWhitelistEnabled) conf_key="WebUI\\\\AuthSubnetWhitelistEnabled" ;;
            *) continue ;;
        esac
        value=$(eval echo "\$$var_name")
        conf=$(egrep "^$conf_key" "$qB_conf" | sed 's/.*=//')
        if [ -n "$value" -a x"$conf" != x"$value" ]; then
            sed -i "s|^$conf_key=.*|$conf_key=$value|" "$qB_conf"
        fi
    done
}

start_qb() {
	get_config Locale EnableService RootProfilePath BinaryLocation Enabled port \
				DefaultSavePath AuthSubnetWhitelistEnabled AuthSubnetWhitelist \
				CSRFProtection PasswordEnabled Path PortForwardingEnabled

	[ x"$EnableService" != x1 ] && return 1

	create_directory "$Path" "$DefaultSavePath"
	local qB_conf="$RootProfilePath/qBittorrent/config/qBittorrent.conf"

	if [ ! -f "$qB_conf" ]; then
		create_directory "$RootProfilePath/qBittorrent/config/"
		[ $PasswordEnabled = 1 ] && \
			Password="@ByteArray(TsPGpA/4Nwbs/6wyf9OYqg==:6X2i9o+3FUrfldf/oP+G04j/DLRy5xpa8/VOQaIfzAgfYuNmz4hI22NSATjS/y5E+mQvyOK5Or1hvistluzMBQ==)"
		cat <<-EOF > "$qB_conf"
		[Application]
		FileLogger\Enabled=$Enabled
		FileLogger\Path=${Path:-$RootProfilePath/qBittorrent/data/logs}

		[BitTorrent]
		Session\AddExtensionToIncompleteFiles=true
		Session\ExcludedFileNames=
		Session\Preallocation=true
		Session\DefaultSavePath=$DefaultSavePath

		[Network]
		PortForwardingEnabled=$PortForwardingEnabled

		[Preferences]
		General\Locale=$Locale
		WebUI\LocalHostAuth=false
		WebUI\CSRFProtection=$CSRFProtection
		WebUI\AuthSubnetWhitelistEnabled=$AuthSubnetWhitelistEnabled
		WebUI\AuthSubnetWhitelist=${AuthSubnetWhitelist:+$AuthSubnetWhitelist/32}
		WebUI\Password_PBKDF2="$Password"
		EOF
	else
		update_config "Enabled Path DefaultSavePath PortForwardingEnabled Locale CSRFProtection AuthSubnetWhitelistEnabled AuthSubnetWhitelist"
	fi
	local PROG="${BinaryLocation:-/usr/bin/qbittorrent-nox}"
	[ -x "$PROG" ] || chmod +x "$PROG"
	procd_open_instance
	procd_set_param command $PROG
	procd_append_param command --webui-port=$port --profile=$RootProfilePath --confirm-legal-notice
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param file "$qB_conf"
	procd_set_param term_timeout 60
	procd_close_instance
}

start_service() {
	config_load qbittorrent
	config_foreach start_qb qbittorrent
}

service_triggers() {
	procd_add_reload_trigger qbittorrent
}

reload_service() {
    stop
    while running "qbittorrent.main"; do
        sleep 1
    done
    start
}
