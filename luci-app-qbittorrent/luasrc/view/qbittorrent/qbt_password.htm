<script>
    if ("<%=self.Value%>") {
        const encryptPassword = async (pwd, flag) => {
            if (!flag) {
                return CryptoJS.enc.Hex.stringify(CryptoJS.MD5(pwd));
            }

            const salt = new Uint8Array(16);
            crypto.getRandomValues(salt);
            const key = asmCrypto.Pbkdf2HmacSha512(asmCrypto.string_to_bytes(pwd), salt, 100000, 64);
            return `${asmCrypto.bytes_to_base64(salt)}:${asmCrypto.bytes_to_base64(key)}`;
        };

        const cryptoJS_script = document.createElement('script');
        cryptoJS_script.src = 'https://cdn.bootcdn.net/ajax/libs/crypto-js/4.1.1/crypto-js.min.js';
        document.head.appendChild(cryptoJS_script);

        const asmCrypto_script = document.createElement('script');
        asmCrypto_script.src = 'https://cdn.bootcdn.net/ajax/libs/asmCrypto/2.3.2/asmcrypto.all.es5.min.js';
        document.head.appendChild(asmCrypto_script);

        Promise.all([
            new Promise((resolve) => cryptoJS_script.onload = resolve),
            new Promise((resolve) => asmCrypto_script.onload = resolve)
        ]).then(async () => {
            const password = await encryptPassword("<%=self.Value%>", "<%=self.flag%>");
            const data = new URLSearchParams({ password });

            await fetch('<%=url("admin/nas/qbittorrent/encryptPassword")%>', {
                method: 'POST',
                body: data,
            });
        });
    }
</script>

<%+cbi/valueheader%>
<div<%=attr("data-ui-widget", luci.util.serialize_json({
    "Textfield", self:cfgvalue(section) or self.default, {
        id = cbid,
        name = cbid,
        size = self.size,
        datatype = self.datatype,
        optional = self.optional or self.rmempty,
        password = self.password,
        readonly = self.readonly,
        maxlength = self.maxlength,
        placeholder = self.placeholder
    }
}))%>></div>
<%+cbi/valuefooter%>
