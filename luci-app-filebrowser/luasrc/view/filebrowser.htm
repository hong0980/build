<%+header%>
<style>
    .fb-container {
        margin: 1rem auto; /* 水平居中显示，顶部边距为 1rem */
        max-width: auto; /* 容器最大宽度 */
        margin-top: 1rem; /* 顶部边距 */
    }

    .fb-container table {
        width: 100%;
    }

    .fb-container td,
    .fb-container th {
        padding: 6px; /* 行高 */
        border-bottom: 1px solid #e6e6e6;
    }

    .input-container {
        display: flex; /* 使用flexbox布局 */
        align-items: center; /* 垂直居中对齐 */
        justify-content: center; /* 水平居中对齐 */
    }

    .input-container.float {
        padding: 3px;
        position: sticky;
        border-radius: 8px;
        z-index: 1 !important;
        background-color: #7df9fd;
    }

    .fb-container #current-path {
        width: 100%;
    }

    .folder-icon, .link-icon {
        cursor: pointer; /* 鼠标样式 */
    }

    .file-icon:before,
    .link-icon:before,
    .folder-icon:before {
        content: ''; /* 伪元素的内容为空 */
        width: 1.5rem; /* 宽度 */
        height: 1.5rem; /* 高度 */
        position: relative; /* 相对定位 */
        margin-right: 0.5rem; /* 右边间距 */
        display: inline-block; /* 行内块元素 */
        vertical-align: middle; /* 垂直居中 */
        background-size: contain; /* 背景图自适应 */
    }

    .file-icon:before {
        background-image: url(/luci-static/resources/fb/file-icon.png);
    }

    .folder-icon:before {
        background-image: url(/luci-static/resources/fb/folder-icon.png);
    }

    .link-icon:before {
        background-image: url(/luci-static/resources/fb/link-icon.png);
    }

    .custom-menu {
        margin: 0;
        padding: 5px 0;
        position: fixed;
        font-size: 15px;
        border-radius: 5px;
        z-index: 1 !important;
        border: 1px solid #dadada;
        background-color: #f5f5f5;
        font-family: Arial, sans-serif;
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1);
    }

    .menu-item {
        color: #333;
        display: block;
        cursor: pointer;
        padding: 5px 10px;
        transition: all 0.3s ease-in-out;
    }

    .menu-item:hover {
        color: #007bff;
        background-color: #fff;
    }

    .menu-item:not(:last-child) {
        border-bottom: 1px solid #ddd;
    }

    .swal2-title {
        font-size: 20px;
        line-height: 30px;
        font-weight: 550;
    }

    .swal2-styled.swal2-cancel,
    .swal2-styled.swal2-confirm {
        color: #fff;
        cursor: pointer;
        position: sticky;
        padding: 6px 10px;
        border-radius: 5px;
        transform: translateY(0);
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .swal2-styled.swal2-confirm {
        background-color: hsl(195, 100%, 71%);
    }

    .swal2-styled.swal2-cancel {
        background-color: hsl(0, 100%, 71%);
    }

    .swal2-styled.swal2-confirm:hover {
        background-color: hsl(195, 97%, 34%)
    }

    .swal2-styled.swal2-cancel:hover {
        background-color: rgb(177, 35, 35);
    }

    .swal2-styled.swal2-cancel:hover,
    .swal2-styled.swal2-confirm:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }

    .swal2-styled.swal2-confirm:focus {
        box-shadow: 0 0 0 2px rgba(0, 136, 182, 0.527);
    }

    .swal2-popup.swal2-toast .swal2-html-container {
        text-align: center;
    }

    .ace_gutter-cell {
        padding-left: 6px !important;
    }

    div:where(.swal2-container) .swal2-select:focus,
    div:where(.swal2-container) input:where(.swal2-file):focus,
    div:where(.swal2-container) input:where(.swal2-input):focus,
    div:where(.swal2-container) textarea:where(.swal2-textarea):focus {
        outline: 0;
        text-decoration: none;
        border-color: rgba(235, 120, 67, 0.8) !important;
        box-shadow: inset 0 1px 3.5px hsla(206, 100%, 50%, 0.01), 0 0 10px rgba(249, 128, 72, 0.8) !important;
/*        border-color: rgba(82, 168, 236, 0.8) !important;
        box-shadow: inset 0 1px 3px hsla(0, 0%, 99%, 0.01), 0 0 8px rgba(82, 168, 236, 0.6) !important;*/

    }

    div:where(.swal2-container) div:where(.swal2-timer-progress-bar) {
        height: 3px !important;
        background: #ff0000 !important;
    }

    .alert-mask {
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        position: fixed;
        align-items: center;
        z-index: 1 !important;
        justify-content: center;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .alert-container {
        width: 70%;
        overflow: auto;
        max-width: 900px;
        max-height: 70vh;
        position: relative;
        border-radius: 7px;
        background-color: #fff;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    .alert-content {
        overflow: auto;
        max-height: calc(70vh - 100px);
    }

    .alert-content pre {
        margin: 0;
        color: #3699ff;
        font-size: 14px;
        line-height: 1.5;
        text-align: left;
        font-family: Consolas;
        background-color: #212121;
    }

    @media screen and (max-width: 480px) {
        .cbi-titles {
            width: 20px; /* 设置一个固定宽度，根据需求调整 */
            overflow: hidden; /* 控制溢出隐藏 */
            white-space: nowrap; /* 防止换行 */
            text-overflow: ellipsis; /* 显示省略号 */
        }

        .input-container input[type="text"] {
            flex: 1;
        }

        .menu-item {
            font-size: 12px;
            padding: 3px 8px;
        }

        .display-none {
            display: none !important;
        }
    }
</style>
<script src="/luci-static/resources/fb/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.33.1/ace.min.js"></script>
<h2 name="content"><%:File management%></h2>
<div class="cbi-map-descr"><font color="red"><%:Right click%></font><%:You can modify the names and downloads of files and directories, permissions, add directories and files, and edit scripts.%></div>
<div class="fb-container">
    <div class="input-container">
        <input id="createnewfile" type="button" class="btn cbi-button cbi-button-add" value="<%:Create%>" style="margin-right: 6px;">
        <input id="current-path" type="text" title="<%:If the path is the root directory, add '&' at the first character%>" value="/" />
        <input id="godirectory" type="button" class="btn cbi-button cbi-button-apply" value="<%:Go to directory%>">
        <input id="uploadfile" type="button" class="btn cbi-button cbi-button-action important" style="margin-left: 6px;" value="<%:Upload%>">
        <input id="selectedremove" type="button" class="btn cbi-button cbi-button-remove" style="margin-left: 6px;" value="<%:Delete%>">
    </div>
</div>
<script type="text/javascript">
// console.log(Object.keys(Swal));
(function () {
    let currentPath, customMenu = null;
    var pathElem = document.getElementById("current-path");
    document.getElementById('uploadfile').addEventListener('click', uploadfile);
    document.getElementById('godirectory').addEventListener('click', godirectory);
    document.getElementById('selectedremove').addEventListener('click', deletefiles);
    document.getElementById('createnewfile').addEventListener('click', createnewfile);
    var listElem = document.querySelector(".fb-container").appendChild(document.createElement("div"));
    listElem.id = "file-list";
    listElem.onclick = handleClick;
    pathElem.addEventListener("keyup", function (event) { event.key === "Enter" && godirectory() });

    var isAndroid = /Android/.test(navigator.userAgent),
        isMobileWebkit = /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent),
        isMobileDevice = isAndroid || isMobileWebkit || /webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent);
    document.addEventListener('DOMContentLoaded', function () {
        let isFloating = false, navHeight = document.querySelector('header').offsetHeight;
        var inputContainer = document.querySelector('.input-container');
        var originalPosition = document.querySelector('header').getBoundingClientRect().bottom + document.querySelector('h2').offsetHeight + window.scrollY;
        isMobileDevice && (navHeight = navHeight === 0 ? 40 : navHeight < 40 ? navHeight * 10 : navHeight);
        var originalWidth = inputContainer.offsetWidth;
        function floatInputContainer() {
            var shouldFloat = window.pageYOffset > originalPosition;
            isFloating = shouldFloat !== isFloating ? shouldFloat : isFloating;
            inputContainer.style = `top: ${isFloating ? navHeight : 0}px; width: ${originalWidth}px; z-index: 1 !important;`;
            inputContainer.classList.toggle('float', isFloating);
        };
        window.addEventListener('scroll', floatInputContainer);
    });

    function ensureString(v) { return typeof v === 'string' ? v.trim() : '' }
    function FileExt(v) { return v.split('.').pop().toLowerCase(); }
    function getInitPath() { return new URLSearchParams(location.search).get('path') || '/' }
    function concatPath(p, f = '') { return `${p.replace(/\/*$/, '/')}${f}` }
    function colorMessage(n, c) { return `<span style="color: ${c};">${n}</span>` }
    function resolveFilePath(n) {
        return /^&\//.test(n)
            ? n.replace(/^&/, '')
            : n.startsWith(currentPath)
                ? n
                : concatPath(currentPath, n.replace(/^\//, ''));
    }

    function removeCustomMenu() {
        customMenu && customMenu.remove();
        customMenu = null;
    }

    function convertPermissions(p) {
        let o = '';
        var m = { 'r': 4, 'w': 2, 'x': 1 };
        o = p.slice(1).match(/.{3}/g).reduce(function(x, k) {
            var v = k.split('').reduce(function(a, c) {
                return a + (m[c] || 0);
            }, 0);
            return x + v.toString(8);
        }, '');
        // for (let i = 1; i < p.length; i += 3) {
        //     var s = p.slice(i, i + 3);
        //     var v = s.split('').reduce(function (a, c) {
        //         return a + (m[c] || 0);
        //     }, 0);
        //     o += v.toString(8);
        // }
        return o;
    }

    function setStyle(r, s) {
        var k = document.querySelector(r);
        if (k) {
            Object.entries(s).forEach(function([t, v]) {
                k.style.setProperty(t, v, 'important');
            });
        }
    }

    function Draggable() {
        var x, y,
            m = document.getElementById('md'),
            t = document.getElementById('td'),
            p = document.querySelector('.swal2-popup'),
            f = document.querySelector('.swal2-file'),
            r = document.querySelector('.swal2-range'),
            i = document.querySelector('.swal2-input'),
            s = document.querySelector('.swal2-select'),
            c = document.querySelector('.swal2-checkbox'),
            e = document.getElementById('editorContent'),
            q = [m, t, f, r, i, s, c, e].filter(function(f) {
                return f !== null && f !== undefined;
            });

        p.addEventListener('mousedown', function(k) {
            if (g(k.target, q)) return;
            x = k.offsetX; y = k.offsetY;
            p.style.cursor = 'move';
            document.addEventListener('mouseup', u);
            document.addEventListener('mousemove', z);
            k.preventDefault();
        });

        function z(k) {
            var b = k.clientX, c = k.clientY;
            p.style.position = 'fixed';
            p.style.top = `${c - y}px`;
            p.style.left = `${b - x}px`;
        }

        function u() {
            document.removeEventListener('mouseup', u);
            document.removeEventListener('mousemove', z);
            p.style.cursor = 'auto';
        }

        function g(t, a) {
            for (var i = 0; i < a.length; i++) {
                if (a[i].contains(t)) return true;
            }
            return false;
        }
    }

    function alert(msg) {
        var body = document.body;
        var alertMask = document.createElement('div');
        alertMask.className = 'alert-mask';

        var alertContainer = document.createElement('div');
        alertContainer.className = 'alert-container';

        var alertContent = document.createElement('div');
        alertContent.className = 'alert-content';
        alertContent.innerHTML = `<pre>\n${msg}\n\n</pre>`;

        alertMask.onclick = function (event) {
            event.target === alertMask && body.removeChild(alertMask);
        };
        alertContainer.appendChild(alertContent);
        alertMask.appendChild(alertContainer);
        body.appendChild(alertMask);
    };

    function calculateTotalSize(path) {
        let unitIndex = 0;
        var units = ['B', 'KB', 'MB', 'GB'];
        var sizeFactor = { K: 1024, M: 1024 ** 2, G: 1024 ** 3 };
        let totalSize = path
            .filter(function (line) { return !/^(d|l)/.test(line) })
            .reduce(function (total, line) {
                var [, , , , size] = line.trim().split(/\s+/);
                var suffix = size.slice(-1).toUpperCase();
                var parsedSize = parseFloat(size) * (sizeFactor[suffix] || 1);
                return isNaN(parsedSize) ? total : total + parsedSize;
            }, 0);
        while (totalSize >= 1024 && unitIndex < units.length - 1) {
            totalSize /= 1024; unitIndex++;
        }
        return `${totalSize.toFixed(2)} ${units[unitIndex]}`;
    }

    function swalNotification(html = '', icon = 'success') {
        Swal.fire({
            html, toast: true, timerProgressBar: true,
            icon, timer: 2000, showConfirmButton: false,
            didOpen: function (toast) {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });
    }

    var swalConfig = {
        showCancelButton: true,
        cancelButtonText: '<%:Cancel%>',
        confirmButtonText: '<%:Confirm%>'
    };

    function sendRequest(url, params, method = 'GET') {
        var isGetParams = !(params && params.constructor && params.constructor.name === 'FormData');
        var urlWithParams = isGetParams ? url + '?' + params.toString() : url;
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open(method, urlWithParams, true);
                xhr.onload = function () {
                    (xhr.readyState === 4 && xhr.status === 200)
                        ? resolve(JSON.parse(xhr.responseText))
                        : reject(new Error(xhr.statusText));
                };
                xhr.send(isGetParams ? null : params);
            });
    }

    function getMode(path) {
        var modes = {'js':'javascript','html':'html','css':'css','php':'php',
            'py':'python','rb':'ruby','sh':'sh','sql':'sql','json':'json','xml':'xml',
            'yaml':'yaml','lua':'lua','htm':'html'};
        var fileExt = FileExt(path);
        return modes[fileExt] || 'text';
    }

    function godirectory(filePath = '') {
        var path = ensureString(filePath) ? filePath : resolveFilePath(pathElem.value.trim());
        var pathcolor = colorMessage(path, 'red')
        checkdirectory(path).then(function (exists) {
            exists
                ? update_list(path)
                : Swal.fire({
                    ...swalConfig, confirmButtonText: '<%:Create%>',
                    text: '<%:Do you want to create this directory?%>',
                    title: `<%:${pathcolor} directory does not exist%>`,
                    didOpen: function() { Draggable(); }
                }).then(function (result) {
                    if (!result.isConfirmed) return;
                    createnewfile(path);
                });
        });
    }

    function update_list(path, opt = false, upload = false) {
        path = concatPath(path);
        if (currentPath === path && !upload) return;
        var params = new URLSearchParams({ path });
        sendRequest('<%=url("admin/system/file_list")%>', params).then(function (res) {
            var isSuccess = res.stat;
            refresh_list(isSuccess ? res.data : []);
            if (isSuccess) currentPath = pathElem.value = path;
        });
        if (!opt) history.pushState({ path }, null, `?path=${path}`);
    }

    function renderDocumentEditor(path, content) {
        Swal.fire({
            ...swalConfig, title: path, padding: '2px', width: '900px',
            input: 'checkbox', inputPlaceholder: '<%:Read-only%>', inputValue: true,
            confirmButtonText: '<%:Save%>', allowOutsideClick: false, html: `
                <div id="editorContent" style="height: 450px; width: auto;"></div>
                <textarea id="editor" style="display: none;"></textarea>
            `, showConfirmButton: false,
            didOpen: function() {
                var Theme, mode = getMode(path),
                    editor = ace.edit('editorContent');

                if (mode === 'text' && content.trim() !== '') {
                    if (content.trim().match(/^#!\/.*\/lua/)) mode = 'lua';
                    else if (content.trim().match(/^#!\/.*(ba)?sh/)) mode = 'sh';
                }

                editor.setOptions({
                    fontSize: "14px", fontFamily: "Consolas, monospace", wrap: true,
                    printMarginColumn: -1, showPrintMargin: true, readOnly: true,
                    mode: 'ace/mode/' + mode, theme: "ace/theme/" + (Theme || 'monokai')
                });

                editor.setValue(content, 1);
                editor.focus();
                setStyle('.swal2-title', { padding: '5px 0 1px' });
                setStyle('.swal2-checkbox', { margin: '0px 15px 0px' });
                setStyle('.swal2-html-container', { margin: '2px 2px 2px' });
                setStyle('.swal2-container .swal2-actions', { margin: '.2em auto 0' });

                var ace_td=[["ambiance","Ambiance"],["chaos","Chaos"],["chrome","Chrome"],["cloud9_day","Cloud9 Day"],["cloud9_night","Cloud9 Night"],["cloud9_night_low_color","Cloud9 Night Low Color"],["clouds","Clouds"],["clouds_midnight","Clouds Midnight"],["cobalt","Cobalt"],["crimson_editor","Crimson Editor"],["dawn","Dawn"],["dracula","Dracula"],["dreamweaver","Dreamweaver"],["eclipse","Eclipse"],["github","GitHub"],["github_dark","GitHub Dark"],["gob","Gob"],["gruvbox","Gruvbox"],["gruvbox_dark_hard","Gruvbox Dark Hard"],["gruvbox_light_hard","Gruvbox Light Hard"],["idle_fingers","Idle Fingers"],["iplastic","IPlastic"],["katzenmilch","Katzenmilch"],["kr_theme","KR Theme"],["kuroir","Kuroir"],["merbivore","Merbivore"],["merbivore_soft","Merbivore Soft"],["mono_industrial","Mono Industrial"],["monokai","Monokai"],["nord_dark","Nord Dark"],["one_dark","One Dark"],["pastel_on_dark","Pastel on Dark"],["solarized_dark","Solarized Dark"],["solarized_light","Solarized Light"],["sqlserver","SQL Server"],["terminal","Terminal"],["textmate","TextMate"],["tomorrow","Tomorrow"],["tomorrow_night","Tomorrow Night"],["tomorrow_night_blue","Tomorrow Night Blue"],["tomorrow_night_bright","Tomorrow Night Bright"],["tomorrow_night_eighties","Tomorrow Night Eighties"],["twilight","Twilight"],["vibrant_ink","Vibrant Ink"],["xcode","Xcode"]];

                var ace_md=[["sh","Shell"],["lua","Lua"],["html","HTML"],["javascript","JavaScript"],["css","CSS"],["python","Python"],["php","PHP"],["json","JSON"],["xml","XML"],["yaml","YAML"],["sql","SQL"],["makefile","Makefile"],["markdown","markdown"],["ini","ini"]];

                var createDropdown = function(opts, id, defVal, txt) {
                    var cnt = document.createElement('div'),
                        lbl = document.createElement('label'),
                        sel = document.createElement('select');

                    lbl.textContent = isMobileDevice ? '' : txt;;
                    lbl.setAttribute('for', id);
                    lbl.className = 'cbi-value-title';
                    sel.setAttribute('id', id);
                    sel.setAttribute('style', 'width: 70px; margin-left: 10px;');
                    opts.forEach(function(o) { sel.appendChild(new Option(o[1], o[0])) });
                    sel.value = defVal;
                    sel.addEventListener('change', function() {
                        id === 'td'
                        ? editor.setTheme("ace/theme/" + sel.value)
                        : editor.getSession().setMode("ace/mode/" + sel.value);
                    });

                    cnt.append(lbl, sel);
                    return cnt;
                };

                var con = document.createElement('div'),
                    h2e = document.querySelector('.swal2-title'),
                    em = editor.getOptions().mode.split('/').pop(),
                    et = editor.getOptions().theme.split('/').pop(),
                    chk = document.querySelector('.swal2-checkbox'),
                    md = createDropdown(ace_md, 'md', em, "<%:Type%>"),
                    td = createDropdown(ace_td, 'td', et, "<%:Theme%>"),
                    tn = document.querySelector('[aria-labelledby="swal2-title"]');

                con.append(td, md, chk);
                con.id = 'con';
                md.style.cssText = 'margin-left: 15px;';
                con.style.cssText = 'display: none; justify-content: center; align-items: center; height: 36px;';
                tn.insertAdjacentElement('afterbegin', con);
                var sca = document.getElementById('con'),
                    endEvent = isMobileDevice ? 'touchend' : 'mouseleave',
                    startEvent = isMobileDevice ? 'touchstart' : 'mouseenter';

                chk.addEventListener('change', function(e) {
                    editor.setReadOnly(e.target.checked);
                    var Confirm = document.querySelector('.swal2-confirm');
                    Confirm.style.display = e.target.checked ? 'none' : 'block';
                });

                h2e.addEventListener(startEvent, function() {
                    sca.style.display = 'flex';
                    h2e.style.display = 'none';
                });

                sca.addEventListener(endEvent, function(e) {
                    if (!isMobileDevice || !['md', 'td', 'swal2-checkbox'].includes(e.target.id)) {
                        sca.style.display = 'none';
                        h2e.style.display = 'block';
                    }
                });

                Draggable();
            },
            preConfirm: function() {
                return ace.edit('editorContent').getValue();
            }
        }).then(function(result) {
            if (!result.isConfirmed || result.value === content) return;
            Swal.fire({
                ...swalConfig, title: '<%:Confirm Save%>', icon: 'question',
                allowOutsideClick: false, text: path + ' <%:Are you sure you want to save the changes?%>',
                didOpen: function() { Draggable(); }
            }).then(function(confirmResult) {
                if (!confirmResult.isConfirmed) return;
                var formData = new FormData();
                formData.append('path', path);
                formData.append('content', result.value);
                sendRequest('<%=url("admin/system/handleDocument")%>', formData, 'POST')
                .then(function(res) {
                    if (res.success) {
                        update_list(path.replace(/\/[^/]*\/?$/, '/'), undefined, true)
                        swalNotification(`${colorMessage(path, 'blue')} <%:Document saved successfully%>`, 'success');
                    } else {
                        swalNotification(`${colorMessage(path, 'red')} <%:Failed to save document%> <br> ${colorMessage(res.error, 'red')}`, 'error');
                    }
                })
                .catch(function(error) {
                    swalNotification(`${colorMessage(path, 'red')} <%:An error occurred while saving the document%>`, 'error');
                });
            });
        });
    }

    function editDocument(path) {
        var params = new URLSearchParams({ path });
        sendRequest('<%=url("admin/system/handleDocument")%>', params)
            .then(function (res) {
                if (res.success) {
                    renderDocumentEditor(path, res.data);
                } else {
                    swalNotification(`${colorMessage(path, 'red')} <%:Failed to load document%> <br> ${colorMessage(res.error, 'red')}`, 'error');
                }
            })
            .catch(function (error) {
                swalNotification(`${colorMessage(path, 'red')} <%:An error occurred while loading the document%>`, 'error');
            });
    }

    function deletefiles(filename) {
        function deleteSingleFile(name) {
            var path = concatPath(currentPath, name);
            path = path.replace(/(.*) ->.*/, '$1');
            var params = new URLSearchParams({ path });
            sendRequest('<%=url("admin/system/file_tools")%>', params).then(function (res) {
                var isSuccess = res.stat;
                var message = isSuccess
                    ? `${colorMessage(name, 'blue')} <%:successfully deleted!%>`
                    : `${colorMessage(name, 'red')} <%:deleted failed%>`;
                swalNotification(message, isSuccess ? 'success' : 'error');
                isSuccess && refresh_list(res.data);
            });
        };

        filename = ensureString(filename);
        if (filename) {
            return Swal.fire({
                ...swalConfig, icon: 'warning', iconColor: 'red',
                html: `<%:confirm deletion%> ${colorMessage(filename, 'red')} ?`,
                didOpen: function() { Draggable(); }
            }).then(function (result) {
                if (!result.isConfirmed) return;
                deleteSingleFile(filename);
            });
        }
        var selectedFiles = Array.from(document.querySelectorAll('.file-checkbox:checked'))
            .map(function (checkbox) {
                return checkbox.closest('tr').dataset
            });
        var selectedFileNames = selectedFiles.map(function (file) {
            return file.filename.length > 28 ? `${file.filename.slice(0, 20)}...${file.filename.slice(-8)}` : file.filename;
        });
        Swal.fire({
            ...swalConfig, icon: 'warning', iconColor: 'red',
            html: `<%:confirm deletion%> ?<br>${colorMessage(selectedFileNames.join('<br>'), 'red')}`,
            didOpen: function() { Draggable(); }
        }).then(function (result) {
            if (!result.isConfirmed) return;
            selectedFiles.forEach(function (file) {
                deleteSingleFile(file.filename)
            });
        });
    }

    function createLink(targetPath, isDirectory) {
        var targetPathcolor = colorMessage(targetPath, 'blue');
        Swal.fire({
            ...swalConfig, input: 'text', icon: 'info', inputValue: '/',
            title: `<%:Enter ${targetPathcolor} target link path%>`,
            inputAttributes: { style: 'margin: 8px 100px; width: auto; height: 36px;' },
            html: isDirectory !== '0' ? '' :
            '<div><input id="checkbox" class="swal2-checkbox" type="checkbox"/>' +
            '<label for="checkbox"> <%:Create hard link%></label></div>',
            didOpen: function() { Draggable(); }
        }).then(function (result) {
            if (!result.isConfirmed) return;
            var linkPath = result.value,
                isHardLinkElement = document.getElementById('checkbox'),
                isHardLink = isHardLinkElement ? isHardLinkElement.checked : false;
            var params = new URLSearchParams({
                targetPath: targetPath, linkPath: linkPath, isHardLink: isHardLink
            });
            sendRequest('<%=url("admin/system/file_tools")%>', params).then(function (res) {
                if (res.stat) {
                    refresh_list(res.data);
                    swalNotification(`${colorMessage(linkPath, 'blue')} <%:Link created successfully%>`, 'success');
                } else {
                    swalNotification(`${colorMessage(linkPath, 'red')} <%:Link creation failed%>`, 'error');
                }
            });
        });
    }

    function renamefile(oldname) {
        var oldnamecolor = colorMessage(oldname, 'blue')
        oldname = oldname.includes(' -> ') ? oldname.replace(/\s*->.*/, '') : oldname;
        checkdirectory(concatPath(currentPath, oldname)).then(function (exists) {
            Swal.fire({
                ...swalConfig, inputValue: oldname, iconColor: 'red', input: 'text',
                inputAttributes: { style: 'margin: 10px 100px; width: auto; height: 38px;' },
                title: `<%:Enter ${oldnamecolor} new name%>`, icon: 'warning',
                didOpen: function() { Draggable(); },
                didRender: function () {
                    setTimeout(function () {
                        var input = Swal.getInput();
                        exists ? input.select() : input.setSelectionRange(0, oldname.lastIndexOf('.'));
                        input.onmouseover = function () { this.focus() }
                    }, 0)
                },
                inputValidator: function (value) {
                    return /^[^\/]*$/.test(value) ? '' : '<%:The name contains a non-canonical string%>'
                }
            }).then(function (result) {
                if (!result.isConfirmed) return;
                var newname = (result.value || '').trim();
                if (newname !== oldname) {
                    var params = new URLSearchParams({
                        newname: concatPath(currentPath, newname), oldname: concatPath(currentPath, oldname)
                    });
                    sendRequest('<%=url("admin/system/file_tools")%>', params).then(function (res) {
                        if (res.stat) {
                            refresh_list(res.data);
                            swalNotification(`${colorMessage(oldname, 'blue')} <%:Renaming successful!%>`, 'success');
                        } else {
                            swalNotification(`${colorMessage(oldname, 'red')} <%:Renaming failed%>`, 'error');
                        }
                    });
                }
            }).catch(function () {
                swalNotification(`${colorMessage(oldname, 'red')} <%:Renaming failed%>`, 'error');
            });
        });
    }

    function modifypermissions(filepath, type) {
        var oldPermissions = convertPermissions(type);
        var filenamecolor = `${colorMessage(filepath, 'blue')}`;
        Swal.fire({
            ...swalConfig, icon: 'warning', iconColor: 'red', inputValue: oldPermissions,
            title: `<%:Please select new permissions for ${filenamecolor}%>`, input: 'select',
            inputAttributes: { style: 'height: auto; margin: 10px 25px; width: auto; height: 34px; font-size: 14px;' },
            inputOptions: {
                777: '<%:777 - All users have read, write and execute permissions%>',
                755: '<%:755 - All users have read and execute permissions, but only the file owner has write permissions%>',
                700: '<%:700 - Only the file owner has read, write, and execute permissions%>',
                666: '<%:666 - All users have read and write permissions but no execute permissions%>',
                644: '<%:644 - All users have read permissions, but only the file owner has write permissions%>',
                600: '<%:600 - Only the file owner has read and write permissions%>',
                555: '<%:555 - All users have execute permissions, but only the file owner has read and write permissions%>',
                444: '<%:444 - All users have read permissions but no write and execute permissions%>',
            },
            didOpen: function() { Draggable(); }
        }).then(function (result) {
            if (!result.isConfirmed) return;
            var permissions = result.value;
            var params = new URLSearchParams({
                permissions, path: concatPath(currentPath, filepath)
            });
            sendRequest('<%=url("admin/system/file_tools")%>', params).then(function (res) {
                var isSuccess = res.stat;
                var message = isSuccess
                    ? `${colorMessage(filepath, 'blue')} <%:Permissions modified successfully%>`
                    : `${colorMessage(filepath, 'red')} <%:Permission modification failed%>`;
                swalNotification(message, isSuccess ? 'success' : 'error');
                isSuccess && refresh_list(res.data);
            });
        });
    }

    function createnewfile(filePath = '') {
        filePath = ensureString(filePath);
        Swal.fire({
            ...swalConfig, title: '<%:Enter name%>：',
            html: `
                <input id="newname" class="swal2-input" style="margin: 10px 25px; width: auto; height: 35px;" placeholder="<%:For example: example.txt%>" type="text" title="<%:You can enter a file name or directory name%>"><br><br>
                <input id="createdirectory" class="swal2-checkbox" type="checkbox">
                <label for="createdirectory"><b><%:Create as directory%></b></label><br>
                <span id="directorytip" class="hidden" style="font-size: smaller;"><%:If the path is the root directory, add '&' at the first character%></span>
            `, input: 'select', inputValue: '644',
            inputAttributes: { style: 'height: auto; margin: 10px 25px; width: auto; height: 34px; font-size: 14px;' },
            inputOptions: {
                777: '<%:777 - All users have read, write and execute permissions%>',
                755: '<%:755 - All users have read and execute permissions, but only the file owner has write permissions%>',
                700: '<%:700 - Only the file owner has read, write, and execute permissions%>',
                666: '<%:666 - All users have read and write permissions but no execute permissions%>',
                644: '<%:644 - All users have read permissions, but only the file owner has write permissions%>',
                600: '<%:600 - Only the file owner has read and write permissions%>',
                555: '<%:555 - All users have execute permissions, but only the file owner has read and write permissions%>',
                444: '<%:444 - All users have read permissions but no write and execute permissions%>',
            },
            didOpen: function () { //在弹出框打开后执行的操作。
                if (filePath) {
                    document.getElementById('newname').value = filePath;
                    document.getElementById('createdirectory').checked = true;
                    document.getElementById('createdirectory').dispatchEvent(new Event('change'));
                }
                document.getElementById("newname").focus();
                Draggable();
            },
            preConfirm: function () { //在用户点击确认按钮之前执行的操作。
                var newname = document.getElementById('newname').value,
                    permissions = document.getElementById('swal2-select').value,
                    createdirectory = document.getElementById('createdirectory').checked;
                return { newname, createdirectory, permissions };
            },
            didRender: function () { //在弹出框渲染完成后执行的操作。
                var directorytip = document.getElementById('directorytip'),
                    createdirectory = document.getElementById('createdirectory');
                if (createdirectory && directorytip) {
                    createdirectory.addEventListener('change', function () {
                        directorytip.classList.toggle('hidden', !createdirectory.checked);
                    });
                }
            }
        }).then(function (result) {
            if (!result.isConfirmed) return;
            var data;
            var { newname, createdirectory, permissions } = result.value;
            var newfile = (filePath && !createdirectory)
                ? newname
                : (filePath && createdirectory)
                    ? filePath
                    : resolveFilePath(newname);

            if (!createdirectory) {
                Swal.fire({
                    ...swalConfig, title: '<%:Enter file content%>',
                    inputPlaceholder: '<%:Enter text here%>', input: 'textarea',
                    inputAttributes: { style: "margin: 10px 25px; width: auto;" },
                    didOpen: function() { Draggable(); }
                }).then(function (result) {
                    if (!result.isConfirmed) return;
                    data = result.value; executeOrder();
                });
            } else executeOrder();

            function executeOrder() {
                var formData = new FormData();
                formData.append('data', data);
                formData.append('newfile', newfile);
                formData.append('permissions', permissions);
                formData.append('createdirectory', createdirectory);
                sendRequest('<%=url("admin/system/createnewfile")%>', formData, 'POST').then(function (res) {
                    if (res.stat) {
                        createdirectory && update_list(newfile || '');
                        refresh_list(res.data);
                        swalNotification(`${colorMessage(newfile, 'blue')} <%:File created successfully!%>`, 'success');
                    } else {
                        swalNotification(`${colorMessage(newfile, 'red')} <%:File creation failed!%>`, 'error');
                    }
                });
            }
        });
    }

    function installipk(filename) {
        var filepath = concatPath(currentPath, filename);
        Swal.fire({
            ...swalConfig, icon: 'info',
            html: `<%:Confirm installation%> ${colorMessage(filename, 'red')} ?`,
            preConfirm: function () {
                var params = new URLSearchParams({ filepath });
                sendRequest('<%=url("admin/system/file_tools")%>', params).then(function (res) {
                    res.stat
                        ? alert(res.data)
                        : swalNotification(`${colorMessage(filename, 'red')} <%:installation failed%>`, 'error');
                });
            },
            didOpen: function() { Draggable(); },
            allowOutsideClick: function () { return !Swal.isLoading() }
        });
    }

    function uploadfile() {
        Swal.fire({
            ...swalConfig, title: '<%:upload file%>', input: 'file',
            inputAttributes: { style: "margin: 10px 25px;", accept: '/*' },
            didOpen: function() { Draggable(); }
        }).then(function (result) {
            if (!result.isConfirmed) return;
            var file = result.value;
            var data = new FormData();
            data.append('file', file);
            data.append('filename', file.name);
            data.append('filedir', concatPath(currentPath));
            sendRequest('<%=url("admin/system/uploadfile")%>', data, 'POST').then(function (res) {
                update_list(res.filedir, undefined, true);
                swalNotification(`${colorMessage(res.filename, 'blue')} <%:File has been uploaded to%> ${res.filedir}`, 'success');
            }).catch(function (error) {
                swalNotification(`${colorMessage(file.name, 'red')} <%:upload failed%>`, 'error');
            });
        });
    }

    function dpfile(filename, path = currentPath, download = '') {
        var linkfile;
        var match = filename.match(/(.*) -> (.*)/);
        if (match !== null) {
            linkfile = 1;
            path = match[1];
            filename = match[2];
        }
        var params = new URLSearchParams({ path, filename, download, linkfile });
        var url = `<%=url("admin/system/dpfile")%>?${params.toString()}`;
        if (!download) return window.open(url);
        Swal.fire({
            ...swalConfig, icon: 'info',
            title: `${(download === 'open') ? '<%:Confirm open%>' : '<%:Confirm download%>'} ${colorMessage(filename, 'blue')} ?`,
            didOpen: function() { Draggable(); }
        }).then(function (result) {
            if (result.isConfirmed) window.open(url);
        });
    }

    function checkdirectory(dir_path) {
        var params = new URLSearchParams({ dir_path });
        return sendRequest('<%=url("admin/system/file_tools")%>', params)
        .then(function (res) {
            return Promise.resolve(res.stat);
        })
        .catch(function () {
            swalNotification(`${colorMessage('<%:Failed to check the directory%>', 'red')}`, 'error');
        });
    }

    function handleClick(event) {
        function getFileElem(elem) {
            while (elem && !(elem.className && elem.className.includes('-icon'))) {
                elem = elem.parentNode;
            }
            return elem || '';
        }
        var targetElem = event.target;
        var fileElem = getFileElem(targetElem);
        var infoElem = targetElem.parentNode.parentNode.dataset;
        function hasClass(element, className) { return element.classList.contains(className) }

        if (hasClass(targetElem, 'rename')) renamefile(infoElem.filename);
        else if (hasClass(targetElem, 'install')) installipk(infoElem.filename);
        else if (hasClass(targetElem, 'cbi-button-remove')) deletefiles(infoElem.filename);
        else if (hasClass(targetElem, 'cbi-button-edit')) editDocument(currentPath + infoElem.filename);
        else if (hasClass(targetElem, 'download')) dpfile(infoElem.filename, currentPath, true);
        if (fileElem) {
            if (hasClass(fileElem, 'back-root-icon')) update_list('/');
            // else if (hasClass(fileElem, 'file-icon')) dpfile(infoElem.filename);
            else if (hasClass(fileElem, 'back-icon')) update_list(currentPath.replace(/\/[^/]*\/?$/, '/'));
            else if (hasClass(fileElem, 'folder-icon')) update_list(concatPath(currentPath, fileElem.parentNode.dataset.filename));
            else if (hasClass(fileElem, 'link-icon')) {
                var match = infoElem.filename.match(/(.*) -> (.*)/);
                if (match !== null) {
                    var [path, filename] = match.slice(1);
                    var filePath = filename.replace(/^\/*/, '/');
                    checkdirectory(filePath).then(function (exists) {
                        exists
                            ? update_list(filePath)
                            : (filename.match(/\//g) || []).length > 1
                                ? update_list(filePath.match(/(.+\/)(.+)/)[1])
                                : swalNotification(`${colorMessage(sourcefile, 'red')} <%:It’s the current directory%> ${colorMessage(filename, 'blue')}`, 'info');
                    });
                }
            }
        }
    }

    function refresh_list(filePath) {
        let numFolders = filePath.filter(function (line) {return line.startsWith('d');}).length;
        let regularFiles = filePath.filter(function (line) { return /^[^dl]/.test(line) }).length;
        var html = `<table>
            <tr>
                <td colspan="7" class="center">
                    ${getInitPath() !== '/' ? '<input type="button" class="btn cbi-button cbi-button-apply back-root-icon display-none" style="margin-right: 10px;" value="<%:Go to root directory%>">' : ''}
                    <b class="display-none"><%:There are currently ${regularFiles} files,%> ${numFolders} <%:directory.%> <%:total file size%>：${calculateTotalSize(filePath)}</b>
                    ${getInitPath() !== '/' ? '<input type="button" class="btn cbi-button cbi-button-apply back-icon" style="margin-left: 10px;" value="<%:Back to previous%>">' : ''}
                </td>
            </tr>
            <tr>
                <th class="display-none"></th>
                <th class="th left"><%:name%></th>
                <th class="th left display-none"><%:owner%></th>
                <th class="th left"><%:size%></th>
                <th class="th left display-none"><%:Change the time%></th>
                <th class="th left display-none"><%:Rights%></th>
                <th class="th"><%:File operations%></th>
            </tr>`;
            for (var i = 0; i < filePath.length; i++) {
                var [type, _, owner, _, size, month, day, _, ...fullNameParts] = filePath[i].trim().split(/\s+/);
                var fullName = fullNameParts.join(' ');
                var isLink = ['z', 'l', 'x'].includes(type[0]);
                var icon = type[0] === 'd' ? "folder-icon" : (isLink ? "link-icon" : "file-icon");
                var truncatedName = fullName.length > 20 ? `${fullName.slice(0, 13)}...${fullName.slice(-7)}` : fullName;
                var installButtonHtml = fullName.endsWith(".ipk") ? `<input type="button" class="btn cbi-button cbi-button-apply install" value="<%:Install%>">` : "";
                var editButtonHtml = (type[0] !== 'd' && !isLink) ? `<input type="button" class="btn cbi-button cbi-button-edit" value="<%:open%>">` : "";
                html += `
                <tr class="cbi-rowstyle-${(i % 2) + 1} cbi-titles" data-filename="${fullName}" data-isdir="${Number(type[0] === 'd' || type[0] === 'z')}" data-authority="${type}" data-linktarget="${(/->.*/.test(fullName)) && fullName}">
                    <td class="td display-none">
                        <input type="checkbox" class="file-checkbox" name="${fullName}"/>
                    </td>
                    <td class="td ${icon}">
                        <b title="${fullName}">${truncatedName}</b>
                    </td>
                    <td class="td left display-none">${owner}</td>
                    <td class="td left">${size}</td>
                    <td class="td left display-none">${month} ${day}</td>
                    <td class="td left display-none">[ ${convertPermissions(type)} ] ${type}</td>
                    <td class="td right">
                        ${editButtonHtml}
                        <input type="button" class="btn cbi-button cbi-button-add download display-none" value="<%:download%>">
                        <input type="button" class="btn cbi-button cbi-button-apply rename" value="<%:Rename%>">
                        ${installButtonHtml}
                    </td>
                </tr>`;
            }
        html += '</table>';
        listElem.innerHTML = html;
        var deleteButton = document.getElementById('selectedremove');
        document.querySelectorAll('.file-checkbox').forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                deleteButton.style.display = document.querySelectorAll('.file-checkbox:checked').length > 0 ? 'block' : 'none';
            });
        });
        deleteButton.style.display = 'none';
    }

    function createCustomMenu(filename, targetElem) {
        removeCustomMenu();
        var isFile = targetElem.isdir === '0';
        var menuItems = [
            { label: "<%:Refresh Page%>", action: function() { location.reload(); } },
            { label: "<%:Rename%>", action: function() { renamefile(filename); } },
            ...(isFile ? [{label: "<%:Edit Document%>", action: function() { editDocument(currentPath + filename); } }] : []),
            { label: isFile ? "<%:download file%>" : "<%:Download catalog%>", action: function() { dpfile(filename, currentPath, true); } },
            { label: isFile ? "<%:open file%>" : "<%:open Directory%>", action: function() {
                isFile ? dpfile(filename, currentPath, 'open') : update_list(concatPath(currentPath, filename))
            } },
            { label: "<%:Create file (directory)%>", action: function() { createnewfile(); } },
            { label: "<%:Delete file (directory)%>", action: function() { deletefiles(filename); } },
            { label: "<%:Modify permissions%>", action: function() { modifypermissions(filename, targetElem.authority); } },
            { label: "<%:Create link%>", action: function() { createLink(currentPath + filename, targetElem.isdir); } },
            ...(currentPath.split('/').length > 2 ? [{ label: "<%:Back to previous%>", action: function() { update_list(currentPath.replace(/\/[^/]*\/?$/, '/')); } }] : [])
        ];
        customMenu = document.createElement('ul');
        customMenu.className = 'custom-menu';
        menuItems.forEach(function (item) {
            var menuItemElem = Object.assign(document.createElement('div'), { className: 'menu-item', innerText: item.label });
            menuItemElem.addEventListener('click', item.action);
            customMenu.appendChild(menuItemElem);
        });

        var { clientX, clientY } = event;
        var bottomEdge = clientY + menuItems.length * 30 > window.innerHeight;
        var position = bottomEdge
            ? { bottom: `${window.innerHeight - clientY - 30}px`, left: `${clientX}px` }
            : { top: `${clientY}px`, left: `${clientX}px` };
        Object.assign(customMenu.style, position);
        document.body.appendChild(customMenu);
    }

    document.addEventListener('contextmenu', function (event) {
        var filenameElement = event.target.closest('[data-filename]');
        filenameElement
            ? (event.preventDefault(), createCustomMenu(filenameElement.dataset.filename, filenameElement.dataset))
            : removeCustomMenu();
    });

    document.addEventListener('click', removeCustomMenu);
    document.addEventListener('DOMContentLoaded', function (evt) {
        update_list(getInitPath(), true);
    });

    window.addEventListener('popstate', function (evt) {
        update_list(evt.state ? evt.state.path : '/', true);
    });
})();
</script>
<%+footer%>
