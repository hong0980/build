<%+header%>
<style>
    /* 容器样式 */
    .fb-container {
        margin: 0; /* 居中显示 */
        max-width: 800px; /* 容器最大宽度 */
        margin-top: 1rem; /* 顶部边距 */
    }

    /* 表格样式 */
    .fb-container table {
        width: 100%; /* 宽度自适应 */
    }

    .fb-container td {
        padding: 6px; /* 行高 */
        text-align: center; /* 文字居中 */
        /* 底部边框为1像素实线，颜色为#ddd */
/*        border-bottom: 1px solid #ddd;*/
    }

    /* 奇数行样式 */
    .cbi-section-table-row:nth-child(odd) {
        color: #000000; /* 奇数行文本颜色 */
        background-color: #f2f2f2; /* 奇数行背景色 */
    }

    /* 偶数行样式 */
    .cbi-section-table-row:nth-child(even) {
        color: #333333; /* 偶数行文本颜色 */
        background-color: #ffffff; /* 偶数行背景色 */
    }

    /* 输入框样式 */
    .fb-container .cbi-input-text {
        width: 100%; /* 宽度自适应 */
    }

    /* 上传文件容器样式 */
    .upload-container {
        display: none; /* 隐藏上传文件容器 */
        margin: 1rem 0; /* 上下间距 */
    }

    /* 字段值样式 */
    .fb-container .cbi-value-field {
        text-align: left; /* 文字左对齐 */
    }

    /* 父级图标样式 */
    .fb-container .back-icon,
    .fb-container .back-root-icon {
        color: red;
        font-size: 25px;
        cursor: pointer;
        text-align: right;
        margin-left: 10px;
    }

    /* 输入框容器样式 */
    .input-container {
        display: flex; /* 使用flexbox布局 */
        align-items: center; /* 垂直居中对齐 */
        justify-content: center; /* 水平居中对齐 */
    }

    .return-icon {
        display: flex; /* 使用flexbox布局 */
        align-items: center; /* 垂直居中对齐 */
    }

    /* 图标样式 */
    .fb-container td[class$="-icon"] {
        cursor: pointer; /* 鼠标样式 */
    }

    .notification {
        top: 50%;                                  /* 距离顶部的偏移量为50% */
        left: 50%;                                 /* 距离左侧的偏移量为50% */
        color: white;                              /* 文字颜色为白色 */
        z-index: 9999;                             /* z轴顺序为9999，使弹窗处于最上层 */
        padding: 20px;                             /* 内边距为20像素 */
        display: flex;                             /* 使用弹性布局 */
        position: fixed;                           /* 固定定位 */
        font-size: 16px;                           /* 字体大小为16像素 */
        border-radius: 5px;                        /* 边框圆角半径为5像素 */
        align-items: center;                       /* 垂直居中对齐 */
        justify-content: center;                   /* 水平居中对齐 */
        transform: translate(-50%, -50%);          /* 使用transform平移来实现居中 */
        background-color: rgba(0, 0, 0, 0.8);      /* 背景颜色为黑色，透明度为0.8 */
    }

    /* 文件图标样式 */
    .fb-container .file-icon,
    .fb-container .folder-icon,
    .fb-container .link-icon {
        position: relative; /* 相对定位 */
    }

    /* 文件伪元素样式 */
    .fb-container .file-icon:before,
    .fb-container .link-icon:before,
    .fb-container .folder-icon:before {
        position: relative; /* 相对定位 */
        content: ''; /* 伪元素的内容为空 */
        width: 1.5rem; /* 宽度 */
        height: 1.5rem; /* 高度 */
        display: inline-block; /* 行内块元素 */
        vertical-align: middle; /* 垂直居中 */
        margin-right: 0.5rem; /* 右边间距 */
        background-size: contain; /* 背景图自适应 */
    }

    /* 文件图标伪元素样式 */
    .fb-container .file-icon:before {
        background-image: url(/luci-static/resources/fb/file-icon.png); /* 文件图标 */
    }

    /* 文件夹图标伪元素样式 */
    .fb-container .folder-icon:before {
        background-image: url(/luci-static/resources/fb/folder-icon.png); /* 文件夹图标 */
    }

    /* 链接图标伪元素样式 */
    .fb-container .link-icon:before {
        background-image: url(/luci-static/resources/fb/link-icon.png); /* 链接图标 */
    }

    /* 定义自定义菜单样式 */
    .custom-menu {
        position: fixed; /* 菜单固定定位在页面上 */
        background-color: #f5f5f5; /* 菜单背景色为灰色 */
        border: 1px solid #ddd; /* 菜单外边框为浅灰色, 1像素粗 */
        border-radius: 5px; /* 菜单边框圆角半径为5像素 */
        padding: 5px 0; /* 菜单内部上下有5像素的内边距, 左右无内边距 */
        font-size: 14px; /* 菜单项的字体大小为14像素 */
        font-family: Arial, sans-serif; /* 使用 Arial 字体, 如果不存在则使用 sans-serif 字体 */
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1); /* 为菜单添加阴影效果 */
        z-index: 99999; /* 设置菜单的z轴层级, 以确保它在其他元素之上显示 */
    }

    /* 定义菜单项样式 */
    .menu-item {
        display: block; /* 将菜单项以块级元素方式显示 */
        color: #333; /* 菜单项的字体颜色为深灰色 */
        cursor: pointer; /* 当鼠标悬浮在菜单项上时，鼠标指针显示为手型 */
        padding: 5px 10px; /* 菜单项内部上下有8像素的内边距, 左右有16像素的内边距 */
        transition: all 0.3s ease-in-out; /* 菜单项过渡效果，耗时0.3秒，平滑过渡 */
    }

    /* 当鼠标悬浮在菜单项上时，改变背景色和文字颜色 */
    .menu-item:hover {
        color: #007bff; /* 鼠标悬浮在菜单项上时，字体颜色变为蓝色 */
        background-color: #fff; /* 鼠标悬浮在菜单项上时，背景色变为白色 */
    }

    /* 定义菜单项之间的分割线 */
    .menu-item:not(:last-child) {
        border-bottom: 1px solid #ddd; /* 菜单项之间使用浅灰色分割线, 线宽为1像素 */
    }

    .swal-title {
        font-size: 20px;
    }

    .swal-text {
        font-size: 17px;
    }

    .swal-popup {
        width: 400px;
        font-size: 15px;
        background-color: #f2f2f2;
    }

    .swal-confirm-button, .swal-cancel-button {
        font-size: 10px; /*设置字体大小为16像素。*/
        padding: 6px 10px; /*设置内边距为上下各10像素，左右各20像素。*/
    }

    /* 响应式样式 */
    @media screen and (max-width: 480px) {
        /* 上传文件容器宽度样式 */
        .fb-container .upload-file {
            width: 7rem; /* 根据屏幕宽度调整上传文件容器的宽度 */
        }

        .return-icon {
            align-items: center; /* 垂直居中对齐 */
        }

        /* 权限信息隐藏样式 */
        .display-480px {
            display: none; /* 在480px以下的屏幕上隐藏权限信息 */
        }
    }
</style>

<script src="/luci-static/resources/fb/sweetalert2.all.js"></script>
<link rel="stylesheet" href="/luci-static/resources/fb/sweetalert2.min.css">
<h2 name="content"><%:File management%></h2>
<fieldset class="fb-container">
    <div class="input-container">
        <input id="current-path" type="text" class="current-path cbi-input-text" value="/" />
        <button id="upload-toggle" class="cbi-button cbi-button-apply"><%:Upload to current directory%></button>
    </div>
    <div class="upload-container" id="upload-container">
        <input id="upload-file" name="upload-file" class="upload-file" type="file" />
        <button id="upload-toggle" class="cbi-button cbi-button-apply button-upload"><%:upload%></button>
    </div>
    <div id="list-content"></div>
</fieldset>

<script>
String.prototype.replaceAll = function (search, replacement) {
    return this.replace(new RegExp(search, 'g'), replacement); //替换所有匹配字符串
};

// console.log(uploaddir);
(function () {
    const xhr = new XHR();
    const listElem = document.getElementById("list-content");
    const pathElem = document.getElementById("current-path");
    listElem.onclick = handleClick;

    pathElem.onblur = function () {
        update_list(this.value.trim());
    };

    pathElem.onkeyup = function (evt) {
        if (evt.keyCode === 13) { this.blur(); }
    };

    let currentPath;
    function update_list(path, opt = {}, upload) {
        path = concatPath(path);
        if (currentPath === path && !upload) return;
        xhr.get('/cgi-bin/luci/admin/system/filebrowser_list', { path }, (_, res) => {
            refresh_list(res?.stat === 0 ? res.data : []);
        });
        opt.popState || history.pushState({ path }, null, '?path=' + path);
        currentPath = path;
        pathElem.value = path;
    }

    function convertPermissions(permissions) {
        const map = { 'r': 4, 'w': 2, 'x': 1 };
        let octalValue = '';
        for (let i = 1; i < permissions.length; i += 3) {
            const segment = permissions.slice(i, i + 3);
            const value = segment.split('').reduce((acc, curr) => acc + (map[curr] || 0), 0);
            octalValue += value.toString(8);
        }
        return octalValue;
    };

    // function showNotification(message) {
    //     const alertDiv = document.createElement('div');
    //     alertDiv.classList.add('notification');
    //     alertDiv.textContent = message;
    //     document.body.appendChild(alertDiv);
    //     setTimeout(() => alertDiv.remove(), 2000);
    // };

    function showNotification(title = '', icon = '', text = '') {
        Swal.fire({
            icon, text, title, position: 'center',
            timer: 2000, showConfirmButton: false,
            customClass: {
                text: 'swal-text',
                title: 'swal-title',
                popup: 'swal-popup'
            }
        });
    };

    const swalConfig = {
        showCancelButton: true,
        cancelButtonColor: '#d33',
        confirmButtonColor: '#3085d6',
        cancelButtonText: '<%:Cancel%>',
        confirmButtonText: '<%:Confirm%>',
        customClass: {
            text: 'swal-text',
            title: 'swal-title',
            popup: 'swal-popup',
            cancelButton: 'swal-cancel-button',
            confirmButton: 'swal-confirm-button'
        }
    };

    function renamePath(oldname) {
        Swal.fire({
            ...swalConfig,
            input: 'text',
            inputValue: oldname,
            inputAttributes: {
                autocapitalize: 'off'
            },
            title: '<%:Enter new name%>',
            didRender: () => setTimeout(() => {
                    const inputValue = document.querySelector('.swal2-input')?.value ?? '';
                    document.querySelector('.swal2-input')?.setSelectionRange(0, inputValue.lastIndexOf('.'));
                }, 0),
            preConfirm: (newname) => {
                newname = newname.trim();
                if (!newname || newname === oldname) return;
                xhr.post('/cgi-bin/luci/admin/system/filebrowser_rename', {
                    newname: concatPath(currentPath, newname),
                    oldname: concatPath(currentPath, oldname)
                }, (_, res) => {
                    if (res && res.stat === 0) {
                        refresh_list(res.data);
                        showNotification(`"${oldname}" <%:Renaming successful!%>`, 'success');
                    } else {
                        showNotification(`"${oldname}" <%:Renaming failed%>`, 'error');
                    }
                });
            }
        });
    };

    // function renamePath(oldname) {
    //     var newname = prompt('<%:Enter new name%> ', oldname.substring(0, oldname.lastIndexOf('.')));
    //     if (newname && newname.trim() !== oldname) {
    //         var extension = oldname.substring(oldname.lastIndexOf('.'));
    //         newname = newname.trim() + extension;
    //         xhr.get('/cgi-bin/luci/admin/system/filebrowser_rename', {
    //             oldname: concatPath(currentPath, oldname),
    //             newname: concatPath(currentPath, newname)
    //         }, function (_, res) {
    //             if (res.stat === 0) {
    //                 refresh_list(res.data);
    //                 showNotification(`${oldname} <%:Renaming successful!%>`);
    //             } else {
    //                 showNotification(`${oldname} <%:Renaming failed%>`);
    //             }
    //         });
    //     }
    // };

    function removePath(filename, isdir) {
        Swal.fire({
            icon: 'warning',
            ...swalConfig,
            title: `<%:confirm deletion%> "${filename}" ?`
        }).then((result) => {
            if (result.isConfirmed) {
                xhr.post('/cgi-bin/luci/admin/system/filebrowser_delete', {
                    isdir, path: concatPath(currentPath, filename)
                }, function (_, res) {
                    if (res && res.stat === 0) {
                        refresh_list(res.data);
                        showNotification(`"${filename}" <%:successfully deleted!%>`, 'success')
                    } else {
                        showNotification(`"${filename}" <%:deleted failed%>`, 'error')
                    }
                });
            }
        });
    };

    // const removePath = (filename, isdir) => {
    //     if (confirm(`<%:confirm deletion%> "${filename}" ?`)) {
    //         xhr.post('/cgi-bin/luci/admin/system/filebrowser_delete', {
    //             isdir, path: concatPath(currentPath, filename)
    //         }, function (x, res) {
    //             if (res.stat === 0) {
    //                 refresh_list(res.data);
    //                 showNotification(`${filename} <%:successfully deleted!%>`);
    //             } else {
    //                 showNotification(`${filename} <%:deleted failed%>`);
    //             }
    //         });
    //     }
    // };

    function chmodPath(filename, type) {
        var oldPermissions = convertPermissions(type);
        Swal.fire({
            ...swalConfig,
            input: 'text',
            icon: 'warning',
            inputAttributes: {
                autocorrect: 'off',
                autocomplete: 'off',
                spellcheck: 'false',
                autocapitalize: 'off'
            },
            inputValue: oldPermissions,
            title: `<%:Please enter new permissions for ${filename}%>：`,
            didRender: () => setTimeout(() => document.querySelector('.swal2-input')?.select(), 0)
        }).then(({ value }) => {
            var permissions = (value || '').trim();
            if (!permissions || permissions === oldPermissions) return;
            xhr.post('/cgi-bin/luci/admin/system/filebrowser_modify', {
                permissions, path: concatPath(currentPath, filename)
            }, (_, res) => {
                if (res && res.stat === 0) {
                    refresh_list(res.data);
                    showNotification(`"${filename}" <%:Permissions modified successfully%>`, 'success');
                } else {
                    showNotification(`"${filename}" <%:Permission modification failed%>`, 'error');
                }
            });
        });
    };

    const newfile = async () => {
        const { value: newname } = await Swal.fire({
            ...swalConfig,
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off',
                placeholder: '<%:For example: example.txt%>'
            },
            title: '<%:Enter file name%>：'
        });
        if (!newname) return;

        const { value: data } = await Swal.fire({
            ...swalConfig,
            input: 'textarea',
            inputAttributes: {
                autocapitalize: 'off',
                placeholder: '<%:Enter text here%>'
            },
            title: '<%:Enter file content:%>'
        });
        if (!data) return;

        xhr.post('/cgi-bin/luci/admin/system/filebrowser_newfile', {
            data, newfile: concatPath(currentPath, newname)
        }, function (_, res) {
            if (res && res.stat === 0) {
                refresh_list(res.data);
                showNotification(`"${concatPath(currentPath, newname)}" <%:File created successfully!%>`, 'success');
            } else {
                showNotification(`"${concatPath(currentPath, newname)}" <%:File creation failed!%>`, 'error');
            }
        });
    };

    function installipk(filename) {
        Swal.fire({
            ...swalConfig,
            title: `<%:Confirm installation%> "${filename}" ?`
        }).then((result) => {
            if (!result.isConfirmed) return;
            xhr.get('/cgi-bin/luci/admin/system/filebrowser_install', {
                filepath: concatPath(currentPath, filename)
            }, function (_, res) {
                if (res && res.stat === 0) {
                    showNotification(`"${filename}" <%:Successful installation%>`, 'success');
                } else {
                    showNotification(`"${filename}" <%:installation failed%>`, 'error');
                }
            });
        });
    };

    // function installipk(filename) {
    //     if (confirm(`<%:Confirm installation%> "${filename}" ?`)) {
    //         xhr.get('/cgi-bin/luci/admin/system/filebrowser_install', {
    //             filepath: concatPath(currentPath, filename)
    //         }, function (x, res) {
    //             if (res.status === 0) {
    //                 showNotification(`${filename} <%:Successful installation%>`);
    //             } else {
    //                 showNotification(`${filename} <%:installation failed%>`);
    //             }
    //         });
    //     }
    // };

    function openPath(filename, dirname = currentPath) {
        window.open('/cgi-bin/luci/admin/system/filebrowser_open?path=' +
            encodeURIComponent(dirname) + '&filename=' +
            encodeURIComponent(filename));
    };

    function getFileElem(elem) {
        if (elem.className.includes('-icon')) return elem;
        else if (elem.parentNode.className.includes('-icon')) return elem.parentNode;
        else return '';
    };

    function concatPath(path, filename = '') {
        return path === "/" ? `/${filename}` : `${path.replace(/\/$/, "")}/${filename}`;
    };

    function handleClick(evt) {
        var targetElem = evt.target, infoElem, filepath;

        if (targetElem.classList.contains('button-remove')) {
            infoElem = targetElem.parentNode.parentNode;
            removePath(infoElem.dataset.filename, infoElem.dataset.isdir);
        } else if (targetElem.classList.contains('button-rename')) {
            infoElem = targetElem.parentNode.parentNode;
            renamePath(infoElem.dataset.filename);
        } else if (targetElem.classList.contains('button-install')) {
            infoElem = targetElem.parentNode.parentNode;
            installipk(infoElem.dataset.filename);
        } else {
            var fileElem = getFileElem(targetElem);
            if (fileElem) {
                if (fileElem.classList.contains('back-root-icon')) update_list('/');
                else if (fileElem.classList.contains('file-icon')) openPath(fileElem.parentNode.dataset.filename);
                else if (fileElem.classList.contains('back-icon')) update_list(currentPath.replace(/\/[^/]+($|\/$)/, ''));
                else if (fileElem.classList.contains('folder-icon')) update_list(concatPath(currentPath, fileElem.parentNode.dataset.filename));
                else if (fileElem.classList.contains('link-icon')) {
                    infoElem = fileElem.parentNode;
                    filepath = infoElem.dataset.linktarget;
                    if (filepath) {
                        if (infoElem.dataset.isdir === "1") {
                            update_list(filepath);
                        } else {
                            var lastSlash = filepath.lastIndexOf('/');
                            openPath(filepath.substring(lastSlash + 1), filepath.substring(0, lastSlash + 1));
                        }
                    }
                }
            }
        }
    };

    function refresh_list(filenames) {
        const rowStyle = "cbi-rowstyle-even";
        const regularFiles = filenames.filter(line => !line.startsWith("d")).length
        const listHtml = `
            <table class="cbi-section-table">
                <tbody>
                    <tr>
                        <td colspan="6""><b><%:There are currently ${regularFiles} files,%> ${filenames.filter(line => line.startsWith("d")).length} <%:directory.%> <%:total file size%>：${calculateTotalSize(filenames)}</b></td>
                    </tr>
                    <tr>
                        <td class="cbi-value-field return-icon">
                            <b class="display-480px"><%:name%></b>
                            ${getInitPath() !== '/' ? '<div class="back-root-icon" title="<%:Go to root directory%>">\u2302</div><div class="back-icon" title="<%:Back to previous%>">\u21A9</div>' : ''}
                        </td>
                        <td class="cbi-value-field display-480px"><b><%:size%></b></td>
                        <td class="cbi-value-field display-480px"><b><%:Change the time%></b></td>
                        <td class="cbi-value-field display-480px"><b><%:Rights%></b></td>
                        <td class="cbi-value-field display-480px"><b><%:owner%></b></td>
                        <td class="cbi-value-field display-480px input-container"><b><%:File operations%></b></td>
                    </tr>
                    ${filenames.map(line => {
                        const [type, , owner, , size, month, day, , ...fullNameParts] = line.trim().split(/\s+/);
                        const fullName = fullNameParts.join(' ');
                        const isLink = ['z', 'l', 'x'].includes(type[0]);
                        const icon = type[0] === 'd' ? "folder-icon" : (isLink ? "link-icon" : "file-icon");
                        const rowClass = rowStyle === "cbi-rowstyle-even" ? "cbi-rowstyle-odd" : "cbi-rowstyle-even";
                        const truncateDisplayName = fullName.length > 20 ? `${fullName.substring(0, 20)}...` : fullName;
                        var installButtonHtml = fullName.endsWith(".ipk") ? `<input type="button" class="cbi-button cbi-button-apply button-install" value="<%:Install%>"/>` : "";
                        return `
                            <tr class="cbi-section-table-row ${rowClass}" data-filename="${fullName}" data-isdir="${Number(type[0] === 'd' || type[0] === 'z')}" data-type="${type}" ${(type[0] === 'z' || type[0] === 'l') ? `data-linktarget="${fullName.split(' -> ')[1]}"` : ''}">
                                <td class="cbi-value-field ${icon}"><b title="${fullName}">${truncateDisplayName}</b></td>
                                <td class="cbi-value-field">${size}</td>
                                <td class="cbi-value-field">${month} ${day}</td>
                                <td class="cbi-value-field display-480px"> [ ${convertPermissions(type)} ] ${type}</td>
                                <td class="cbi-value-field display-480px">${owner}</td>
                                <td class="cbi-section-table-cell">
                                    <input type="button" class="cbi-button cbi-button-apply button-rename" value="<%:Rename%>"/>
                                    <input type="button" class="cbi-button cbi-button-remove button-remove" value="<%:Delete%>"/>
                                    ${installButtonHtml}
                                </td>
                            </tr>`;
                    }).join('')}
                </tbody>
            </table>`;
        listElem.innerHTML = listHtml;
    };

    function calculateTotalSize(filenames) {
        let totalSize = 0, unitIndex = 0;
        const units = ['B', 'KB', 'MB', 'GB'];
        const sizeFactor = { K: 1024, M: 1024 * 1024, G: 1024 * 1024 * 1024 };
        filenames.forEach(line => {
            const [, , , , size] = line.trim().split(/\s+/);
            const suffix = size.slice(-1).toUpperCase();
            const parsedSize = parseFloat(size.slice(0, -1)) * sizeFactor[suffix] || 1;
            if (!isNaN(parsedSize)) totalSize += parsedSize;
        });
        while (totalSize >= 1024 && unitIndex < units.length - 1) {
            totalSize /= 1024;
            unitIndex++;
        }
        return `${totalSize.toFixed(2)} ${units[unitIndex]}`;
    };

    function setupCustomContextMenu() {
        let customMenu = null;

        function createCustomMenu(filename, targetElem) {
            removeCustomMenu();
            const menuItems = [
                { label: "<%:Rename%>", action: () => renamePath(filename) },
                { label: "<%:create a new file%>", action: () => newfile() },
                { label: "<%:Delete%>", action: () => removePath(filename, targetElem.dataset.isdir) },
                { label: "<%:Modify permissions%>", action: () => chmodPath(filename, targetElem.dataset.type) },
                ...(currentPath.split('/').length > 2 ? [{ label: "<%:Back to previous%>", action: () => update_list(currentPath.replace(/\/[^/]+\/?$/, '')) }] : [])
            ];
            customMenu = document.createElement('ul');
            customMenu.className = 'custom-menu';
            menuItems.forEach(({ label, action }) => {
                const menuItemElem = Object.assign(document.createElement('div'), { className: 'menu-item', innerText: label });
                menuItemElem.addEventListener('click', action);
                customMenu.appendChild(menuItemElem);
            });
            Object.assign(customMenu.style, { top: `${event.clientY}px`, left: `${event.clientX}px` });
            document.body.appendChild(customMenu);
        }

        function removeCustomMenu() {
            if (customMenu) { customMenu.remove(); customMenu = null; }
        };

        document.addEventListener('contextmenu', event => {
            event.preventDefault();
            const filenameElement = event.target.closest('[data-filename]');
            if (filenameElement) createCustomMenu(filenameElement.dataset.filename, filenameElement);
            else removeCustomMenu();
        });

        document.addEventListener('click', removeCustomMenu);
    };
    setupCustomContextMenu();

    const uploadContainer = document.getElementById('upload-container');
    let isUploadHide = true;
    document.getElementById('upload-toggle').onclick = function () {
        uploadContainer.style.display = isUploadHide ? 'inline-flex' : 'none';
        isUploadHide = !isUploadHide;
    };

    uploadContainer.querySelector('.button-upload').onclick = async function (evt) {
        const uploadinput = document.getElementById('upload-file');
        const fullPath = uploadinput.value;
        if (!fullPath) { evt.preventDefault(); return; }
        const data = new FormData();
        data.append('upload-file', uploadinput.files[0]);
        data.append('upload-dir', concatPath(currentPath));
        data.append('upload-filename', fullPath.substring(fullPath.lastIndexOf('\\') + 1));
        try {
            const response = await fetch("/cgi-bin/luci/admin/system/filebrowser_upload", {
                method: 'POST', body: data
            });

            if (response.ok) {
                const res = await response.json();
                uploadinput.value = '';
                update_list(res.uploaddir, '', true);
                showNotification(`${res.filename} <%:File has been uploaded to%> ${currentPath}`, 'success');
            }
        } catch (error) { showNotification('<%:upload failed%>', 'error'); }
    };

    function getInitPath() {
        var urlParams = new URLSearchParams(location.search);
        return urlParams.get('path') || '/';
    };

    document.addEventListener('DOMContentLoaded', function (evt) {
        update_list(getInitPath(), { popState: true });
    });

    window.addEventListener('popstate', function (evt) {
        update_list(evt.state?.path || '/', { popState: true });
    });
})();
</script>
<%+footer%>
