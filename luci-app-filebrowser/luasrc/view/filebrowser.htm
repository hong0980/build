<%+header%>
<style>
    .fb-container {
        margin: 1rem auto; /* 水平居中显示，顶部边距为 1rem */
        max-width: 800px; /* 容器最大宽度 */
        margin-top: 1rem; /* 顶部边距 */
    }

    .fb-container table {
        width: 100%; /* 宽度自适应 */
    }

    .fb-container td {
        padding: 6px; /* 行高 */
        text-align: center; /* 文字居中 */
        border-bottom: 1px solid #ddd;
    }

    .cbi-section-table-row:nth-child(odd) {
        color: #000000; /* 奇数行文本颜色 */
        background-color: #f2f2f2; /* 奇数行背景色 */
    }

    .cbi-section-table-row:nth-child(even) {
        color: #333333; /* 偶数行文本颜色 */
        background-color: #ffffff; /* 偶数行背景色 */
    }

    .fb-container .cbi-value-field {
        text-align: left; /* 文字左对齐 */
    }

    .input-container {
        display: flex; /* 使用flexbox布局 */
        align-items: center; /* 垂直居中对齐 */
        justify-content: center; /* 水平居中对齐 */
    }

    .input-container.float {
        padding: 4px;
        z-index: 666;
        position: sticky;
        border-radius: 8px;
        background-color: #6efbff;
    }

    .input-container #godirectory {
        min-width: 70px;
    }

    .fb-container td[class$="-icon"] {
        cursor: pointer; /* 鼠标样式 */
    }

    .fb-container .file-icon:before,
    .fb-container .link-icon:before,
    .fb-container .folder-icon:before {
        content: ''; /* 伪元素的内容为空 */
        width: 1.5rem; /* 宽度 */
        height: 1.5rem; /* 高度 */
        position: relative; /* 相对定位 */
        margin-right: 0.5rem; /* 右边间距 */
        display: inline-block; /* 行内块元素 */
        vertical-align: middle; /* 垂直居中 */
        background-size: contain; /* 背景图自适应 */
    }

    .fb-container .file-icon:before {
        background-image: url(/luci-static/resources/fb/file-icon.png);
    }

    .fb-container .folder-icon:before {
        background-image: url(/luci-static/resources/fb/folder-icon.png);
    }

    .fb-container .link-icon:before {
        background-image: url(/luci-static/resources/fb/link-icon.png);
    }

    .custom-menu {
        z-index: 999;
        padding: 5px 0;
        position: fixed;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #ddd;
        background-color: #f5f5f5;
        font-family: Arial, sans-serif;
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1);
    }

    .menu-item {
        color: #333;
        display: block;
        cursor: pointer;
        padding: 5px 10px;
        transition: all 0.3s ease-in-out;
    }

    .menu-item:hover {
        color: #007bff;
        background-color: #fff;
    }

    .menu-item:not(:last-child) {
        border-bottom: 1px solid #ddd;
    }

    .swal2-title {
        font-size: 20px;
        line-height: 30px;
        font-weight: 550;
    }

/*    .swal2-text {
        font-size: 17px;
        line-height: 17px;
    }

    .swal2-popup {
        width: 400px;
        font-size: 15px;
        background-color: #ffffff;
    }*/

    .swal2-styled.swal2-cancel,
    .swal2-styled.swal2-confirm {
        color: #fff;
        cursor: pointer;
        position: sticky;
        padding: 6px 10px;
        border-radius: 5px;
        transform: translateY(0);
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .swal2-styled.swal2-confirm {
        background-color: #6bdaff;
    }

    .swal2-styled.swal2-cancel {
        background-color: #ff6b6b;
    }

    .swal2-styled.swal2-confirm:hover {
        background-color: #119beb;
    }

    .swal2-styled.swal2-cancel:hover {
        background-color: rgb(207, 46, 46);
    }

    .swal2-styled.swal2-cancel:hover,
    .swal2-styled.swal2-confirm:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }

    .swal2-popup.swal2-toast .swal2-html-container {
        text-align: center;
    }

    .swal2-styled.swal2-confirm:focus {
        box-shadow: 0 0 0 3px rgba(4, 135, 179, 0.527);
    }

    div:where(.swal2-container) .swal2-select:focus,
    div:where(.swal2-container) input:where(.swal2-file):focus,
    div:where(.swal2-container) input:where(.swal2-input):focus,
    div:where(.swal2-container) textarea:where(.swal2-textarea):focus {
        outline: 0;
        text-decoration: none;
        border-color: rgba(235, 120, 67, 0.8) !important;
        box-shadow: inset 0 1px 3.5px hsla(206, 100%, 50%, 0.01), 0 0 10px rgba(249, 128, 72, 0.8) !important;
/*        border-color: rgba(82, 168, 236, 0.8) !important;
        box-shadow: inset 0 1px 3px hsla(0, 0%, 99%, 0.01), 0 0 8px rgba(82, 168, 236, 0.6) !important;*/

    }

    div:where(.swal2-container) div:where(.swal2-timer-progress-bar) {
        height: 3px !important;
        background: #ff0000 !important;
    }

    .alert-mask {
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        z-index: 9999;
        position: fixed;
        align-items: center;
        justify-content: center;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .alert-container {
        width: 70%;
        overflow: auto;
        max-width: 900px;
        max-height: 70vh;
        position: relative;
        border-radius: 7px;
        background-color: #fff;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    .alert-content {
        overflow: auto;
        max-height: calc(70vh - 100px);
    }

    .alert-content pre {
        margin: 0;
        color: #3699ff;
        font-size: 14px;
        line-height: 1.5;
        text-align: left;
        font-family: Consolas;
        background-color: #212121;
    }

/*    在480px以下的屏幕*/
    @media screen and (max-width: 480px) {
        .cbi-value-field {
            width: 30px; /* 设置一个固定宽度，根据需求调整 */
            overflow: hidden; /* 控制溢出隐藏 */
            white-space: nowrap; /* 防止换行 */
            text-overflow: ellipsis; /* 显示省略号 */
        }

        .menu-item {
            font-size: 12px;
            padding: 3px 8px;
        }

        .display-none {
            display: none;
        }
    }
</style>
<script src="/luci-static/resources/fb/sweetalert2.all.js"></script>
<h2 name="content"><%:File management%></h2>
<fieldset class="fb-container">
    <div class="input-container">
        <button id="createnewfile" class="cbi-button cbi-button-apply" style="margin-right: 6px;"><%:create new file%></button>
        <input id="current-path" type="text" title="<%:If the path is the root directory, add '&' at the first character%>" style="width: 100%;" value="/" />
        <button id="godirectory" type="button" class="btn cbi-button cbi-button-apply"><%:Go to directory%></button>
        <button id="uploadfile" type="button" class="btn cbi-button cbi-button-apply" style="margin-left: 6px;"><%:Upload to current directory%></button>
        <button id="selectedremove" class="cbi-button cbi-button-remove" style="margin-left: 6px;"><%:Delete%></button>
    </div>
</fieldset>
<script>
// console.log(Object.keys(Swal));
(function () {
    let currentPath, customMenu = null;
    const pathElem = document.getElementById("current-path");
    document.getElementById('uploadfile').addEventListener('click', uploadfile);
    document.getElementById('godirectory').addEventListener('click', godirectory);
    document.getElementById('selectedremove').addEventListener('click', deletefiles);
    document.getElementById('createnewfile').addEventListener('click', createnewfile);
    const listElem = document.querySelector(".fb-container").appendChild(document.createElement("div"));
    listElem.id = "file-list";
    listElem.onclick = handleClick;
    pathElem.addEventListener("keyup", event => event.key === "Enter" && godirectory());

    document.addEventListener('DOMContentLoaded', () => {
        let isFloating = false;
        const inputContainer = document.querySelector('.input-container');
        const originalPosition = document.querySelector('header').getBoundingClientRect().bottom + document.querySelector('h2').offsetHeight + window.scrollY;
        let navHeight = document.querySelector('header').offsetHeight;
        /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) && 
            (navHeight = navHeight === 0 ? 40 : navHeight < 40 ? navHeight * 10 : navHeight);
        const originalWidth = inputContainer.offsetWidth;
        const floatInputContainer = () => {
            const shouldFloat = window.pageYOffset > originalPosition;
            isFloating = shouldFloat !== isFloating ? shouldFloat : isFloating;
            inputContainer.style = `top: ${isFloating ? navHeight : 0}px; width: ${originalWidth}px`;
            inputContainer.classList.toggle('float', isFloating);
        };
        window.addEventListener('scroll', floatInputContainer);
    });

    const ensureString = (value) => typeof value === 'string' ? value.trim() : '';
    const getInitPath = () => new URLSearchParams(location.search).get('path') || '/';
    const concatPath = (path, filename = '') => `${path.replace(/\/*$/, '/')}${filename}`;
    const colorMessage = (name, color) => `<span style="color: ${color};">${name}</span>`;
    const validateInput = value => /^[A-Za-z0-9._-]+$/.test(value) ? '' : '<%:The name contains a non-canonical string%>';

    function resolveFilePath(newname) {
        return /^&\//.test(newname)
            ? newname.replace(/^&/, '')
            : newname.startsWith(currentPath)
                ? newname
                : concatPath(currentPath, newname.replace(/^\//, ''));
    }

    function removeCustomMenu() {
        customMenu?.remove(); customMenu = null;
    }

    function convertPermissions(permissions) {
        const map = { 'r': 4, 'w': 2, 'x': 1 };
        let octalValue = '';
        for (let i = 1; i < permissions.length; i += 3) {
            const segment = permissions.slice(i, i + 3);
            const value = segment.split('').reduce((acc, curr) => acc + (map[curr] || 0), 0);
            octalValue += value.toString(8);
        }
        return octalValue;
    }

    const alert = (msg) => {
        const body = document.body;
        const alertMask = document.createElement('div');
        alertMask.className = 'alert-mask';

        const alertContainer = document.createElement('div');
        alertContainer.className = 'alert-container';

        const alertContent = document.createElement('div');
        alertContent.className = 'alert-content';
        alertContent.innerHTML = `<pre>\n${msg}\n\n</pre>`;

        alertMask.onclick = ({ target }) => target === alertMask && body.removeChild(alertMask);
        alertContainer.appendChild(alertContent);
        alertMask.appendChild(alertContainer);
        body.appendChild(alertMask);
    };

    function calculateTotalSize(filenames) {
        let totalSize = 0, unitIndex = 0;
        const units = ['B', 'KB', 'MB', 'GB'];
        const sizeFactor = { K: 1024, M: 1024 * 1024, G: 1024 * 1024 * 1024 };

        filenames.forEach(line => {
            const [, , , , size] = line.trim().split(/\s+/);
            const suffix = size.slice(-1).toUpperCase();
            const parsedSize = parseFloat(size.slice(0, -1)) * sizeFactor[suffix] || 1;
            if (!isNaN(parsedSize)) totalSize += parsedSize;
        });

        while (totalSize >= 1024 && unitIndex < units.length - 1) {
            totalSize /= 1024; unitIndex++;
        }
        return `${totalSize.toFixed(2)} ${units[unitIndex]}`;
    }

    swalNotification = (html = '', icon = 'success') => {
        Swal.fire({
            html, toast: true, timerProgressBar: true,
            icon, timer: 2000, showConfirmButton: false,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })
    }

    const swalConfig = {
        showCancelButton: true,
        cancelButtonText: '<%:Cancel%>',
        confirmButtonText: '<%:Confirm%>'
    };

    function godirectory(filePath = '') {
        let path;
        ensureString(filePath)
            ? path = filePath
            : path = resolveFilePath(pathElem.value.trim())
        checkdirectory(path).then(exists => exists
            ? update_list(path)
            : Swal.fire({
                ...swalConfig, confirmButtonText: '<%:create%>',
                text: '<%:Do you want to create this directory?%>',
                title: `${colorMessage(path, 'red')} <%:The directory does not exist%>`
            }).then(result => result.isConfirmed && createnewfile(path))
        );
    }

    function update_list(path, opt = false, upload = false) {
        path = concatPath(path);
        if (currentPath === path && !upload) return;
        const xhr = new XMLHttpRequest();
        xhr.open('GET', `/cgi-bin/luci/admin/system/file_list?path=${encodeURIComponent(path)}`, true);
        xhr.onreadystatechange = () => {
            if (xhr.readyState === 4 && xhr.status === 200) {
                const res = JSON.parse(xhr.responseText);
                const isSuccess = res?.stat === 0;
                refresh_list(isSuccess ? res.data : []);
                if (isSuccess) currentPath = pathElem.value = path;
            }
        };
        xhr.send();
        if (!opt) history.pushState({ path }, null, `?path=${path}`);
    }

    function deletefiles(filename = '', isdir = '') {
        [isdir, filename] = [ensureString(isdir), ensureString(filename)];
        const deleteSingleFile = (name, dir) => {
            let path = concatPath(currentPath, name);
            XHR.post('/cgi-bin/luci/admin/system/deletefiles', { isdir: dir, path }, (_, res) => {
                let isSuccess = res?.stat === 0;
                let message = isSuccess
                    ? `${colorMessage(name, 'blue')} <%:successfully deleted!%>`
                    : `${colorMessage(name, 'red')} <%:deleted failed%>`;
                swalNotification(message, isSuccess ? 'success' : 'error');
                isSuccess && refresh_list(res.data);
            });
        };

        if (filename || isdir) {
            return Swal.fire({
                ...swalConfig, icon: 'warning', iconColor: 'red',
                html: `<%:confirm deletion%> ${colorMessage(filename, 'red')} ?`
            }).then((result) => result.isConfirmed && deleteSingleFile(filename, isdir));
        }
        let selectedFiles = Array.from(document.querySelectorAll('.file-checkbox:checked'))
            .map((checkbox) => checkbox.closest('tr').dataset);
        let selectedFileNames = selectedFiles.map((file) => {
            return file.filename.length > 28 ? `${file.filename.slice(0, 20)}...${file.filename.slice(-8)}` : file.filename;
        });
        let html = `<%:confirm deletion%> ?${
            selectedFileNames.length === 1
                ? colorMessage(selectedFileNames[0], 'red') + ' ?'
                : `<br>${colorMessage(selectedFileNames.join('<br>'), 'red')}`
        }`;
        Swal.fire({ ...swalConfig, html, icon: 'warning', iconColor: 'red'})
            .then(result => result.isConfirmed && selectedFiles.forEach(file => deleteSingleFile(file.filename, file.isdir)));
    }

    function renamefile(oldname) {
        if (oldname.includes("->")) return swalNotification(`${colorMessage(oldname, 'red')} <%:Linked files are not allowed to be modified%>`, 'error');
        checkdirectory(concatPath(currentPath, oldname)).then((exists) => {
            Swal.fire({
                ...swalConfig, inputValue: oldname, iconColor: 'red', input: 'text',
                inputAttributes: { style: 'margin: 10px 100px; width: auto; height: 38px;' },
                title: `${colorMessage(oldname, 'blue')} <%:Enter new name%>`, icon: 'warning',
                didRender: () => { setTimeout(() => {
                    const input = Swal.getInput();
                    exists ? input?.select() : input?.setSelectionRange(0, oldname.lastIndexOf('.'))
                }, 0)},
                inputValidator: validateInput
            }).then((result) => {
                let newname = (result.value || '').trim();
                if (newname && newname !== oldname) {
                    XHR.post('/cgi-bin/luci/admin/system/renamefile', {
                        newname: concatPath(currentPath, newname), oldname: concatPath(currentPath, oldname)
                    }, (_, res) => {
                        const isSuccess = res?.stat === 0;
                        isSuccess 
                            ? (refresh_list(res.data), swalNotification(`${colorMessage(oldname, 'blue')} <%:Renaming successful!%>`, 'success'))
                            : swalNotification(`${colorMessage(oldname, 'red')} <%:Renaming failed%>`, 'error');
                        isSuccess && refresh_list(res.data);
                    }, () => swalNotification(`${colorMessage(oldname, 'red')} <%:Renaming failed%>`, 'error'));
                }
            }).catch(() => swalNotification(`${colorMessage(oldname, 'red')} <%:Renaming failed%>`, 'error'));
        }).catch(() => swalNotification(`${colorMessage('<%:Failed to check the directory%>', 'red')}`, 'error'));
    }

    function modifypermissions(filepath, type) {
        let oldPermissions = convertPermissions(type);
        let filename = `${colorMessage(filepath, 'blue')}`;
        Swal.fire({
            ...swalConfig, icon: 'warning', iconColor: 'red', inputValue: oldPermissions,
            title: `<%:Please select new permissions for ${filename}%>`, input: 'select',
            inputAttributes: { style: 'height: auto; margin: 10px 28px; width: auto; height: 38px;' },
            inputOptions: {
                777: '<%:777 - All users have read, write and execute permissions%>',
                755: '<%:755 - All users have read and execute permissions, but only the file owner has write permissions%>',
                700: '<%:700 - Only the file owner has read, write, and execute permissions%>',
                666: '<%:666 - All users have read and write permissions but no execute permissions%>',
                644: '<%:644 - All users have read permissions, but only the file owner has write permissions%>',
                600: '<%:600 - Only the file owner has read and write permissions%>',
                555: '<%:555 - All users have execute permissions, but only the file owner has read and write permissions%>',
                444: '<%:444 - All users have read permissions but no write and execute permissions%>',
            }
        }).then((result) => {
            let permissions = (result.value || '').trim();
            if (permissions && permissions !== oldPermissions) {
                XHR.post('<%=url("admin/system/modifypermissions")%>', {
                    permissions, path: concatPath(currentPath, filepath)
                }, (_, res) => {
                    let isSuccess = res?.stat === 0;
                    let message = isSuccess 
                        ? `${colorMessage(filepath, 'blue')} <%:Permissions modified successfully%>`
                        : `${colorMessage(filepath, 'red')} <%:Permission modification failed%>`;
                    swalNotification(message, isSuccess ? 'success' : 'error');
                    isSuccess && refresh_list(res.data);
                });
            }
        });
    }

    function createnewfile(filePath = '') {
        filePath = ensureString(filePath);
        Swal.fire({
            ...swalConfig, title: '<%:Enter name%>：',
            html: `
                <input id="newname" class="swal2-input" style="margin: 10px 28px; width: auto; height: 38px;" placeholder="<%:For example: example.txt%>" type="text" title="<%:You can enter a file name or directory name%>"><br><br>
                <input id="createdirectory" class="swal2-checkbox" type="checkbox">
                <label for="createdirectory"><b><%:Create as directory%></b></label><br>
                <span id="directorytip" class="hidden" style="font-size: smaller;"><%:If the path is the root directory, add '&' at the first character%></span>
            `,
            didOpen: () => { //在弹出框打开后执行的操作。
                if (filePath) {
                    document.getElementById('newname').value = filePath;
                    document.getElementById('createdirectory').checked = true;
                    document.getElementById('createdirectory').dispatchEvent(new Event('change'));
                }
                document.getElementById("newname").focus();
            },
            preConfirm: () => { //在用户点击确认按钮之前执行的操作。
                const newname = document.getElementById('newname').value;
                const createdirectory = document.getElementById('createdirectory').checked;
                return { newname, createdirectory };
            },
            didRender: () => { //在弹出框渲染完成后执行的操作。
                const directorytip = document.getElementById('directorytip');
                const createdirectoryCheckbox = document.getElementById('createdirectory');
                createdirectoryCheckbox?.addEventListener('change', () => directorytip?.classList.toggle('hidden', !createdirectoryCheckbox.checked));
            },
        }).then((result) => {
            if (!result.isConfirmed) return;
            let data = '';
            let { newname, createdirectory } = result.value;
            let newfile = (filePath && !createdirectory)
                ? newname
                : (filePath && createdirectory)
                    ? filePath
                    : resolveFilePath(newname);

            if (!createdirectory) {
                Swal.fire({
                    ...swalConfig, title: '<%:Enter file content%>',
                    inputPlaceholder: '<%:Enter text here%>', input: 'textarea',
                    inputAttributes: { style: "margin: 10px 28px; width: auto;" },
                }).then((result) => {
                    if (result.isConfirmed) { data = result.value; executeOrder(); }
                });
            } else { executeOrder(); }

            function executeOrder() {
                XHR.post('<%=url("admin/system/createnewfile")%>', { data, newfile, createdirectory }, (_, res) => {
                    if (res?.stat === 0) {
                        createdirectory && update_list(newfile || '');
                        refresh_list(res.data);
                        swalNotification(`${colorMessage(newfile, 'blue')} <%:File created successfully!%>`, 'success');
                    } else {
                        swalNotification(`${colorMessage(newfile, 'red')} <%:File creation failed!%>`, 'error');
                    }
                });
            }
        });
    }

    function installipk(filename) {
        Swal.fire({
            ...swalConfig, icon: 'info',
            html: `<%:Confirm installation%> ${colorMessage(filename, 'red')} ?`,
            preConfirm: () => {
                return XHR.post('/cgi-bin/luci/admin/system/installipk', {
                    filepath: concatPath(currentPath, filename)
                }, (_, res) => {
                    res?.stat === 0
                        ? alert(res.data)
                        : swalNotification(`${colorMessage(filename, 'red')} <%:installation failed%>`, 'error');
                }); 
            },
            allowOutsideClick: () => !Swal.isLoading()
        });
    }

    function uploadfile() {
        Swal.fire({
            ...swalConfig, title: '<%:upload file%>', input: 'file',
            inputAttributes: { style: "margin: 10px 28px;", accept: '/*' }
        }).then(({ value: file }) => {
            if (!file) return;
            const data = new FormData();
            data.append('file', file);
            data.append('filename', file.name);
            data.append('filedir', concatPath(currentPath));

            fetch("/cgi-bin/luci/admin/system/uploadfile", { body: data, method: 'POST' })
            .then(response => response.ok
                ? response.json()
                : Promise.reject(new Error('<%:upload failed%>')))
            .then(res => {
                update_list(res.filedir, undefined, true);
                swalNotification(`${colorMessage(res.filename, 'blue')} <%:File has been uploaded to%> ${res.filedir}`, 'success');
            }).catch(error => swalNotification(`${colorMessage(file.name, 'red')} <%:upload failed%>`, 'error'));
        });
    }

    function dpfile(filename, dirname = currentPath, download = '') {
        if (filename.includes("->")) [, dirname, filename] = filename.match(/(.*) -> (.*)/) ?? [];
        const url = `/cgi-bin/luci/admin/system/dpfile?path=${encodeURIComponent(dirname)}&filename=${encodeURIComponent(filename)}&download=${download}`;
        if (download === '') return window.open(url);
        const confirmTitle = download === 'open' ? `<%:Confirm open%>` : `<%:Confirm download%>`;
        Swal.fire({
            ...swalConfig, icon: 'info',
            title: `${confirmTitle} ${colorMessage(filename, 'blue')} ?`
        }).then((result) => result.isConfirmed && window.open(url));
    }

    function checkdirectory(filepath) {
        return fetch(`/cgi-bin/luci/admin/system/checkdirectory?filepath=${filepath}`)
            .then(response => response.json())
            .then(json => Promise.resolve(json.stat === 0))
    }

    function handleClick(event) {
        const getFileElem = (elem) => {
            while (elem && !elem.className?.includes('-icon')) elem = elem.parentNode;
            return elem || '';
        }
        let targetElem = event.target;
        let fileElem = getFileElem(targetElem);
        let infoElem = targetElem.parentNode.parentNode.dataset;
        let hasClass = (element, className) => element.classList.contains(className);

        if (hasClass(targetElem, 'button-rename')) renamefile(infoElem.filename);
        else if (hasClass(targetElem, 'button-install')) installipk(infoElem.filename);
        else if (hasClass(targetElem, 'button-remove')) deletefiles(infoElem.filename, infoElem.isdir);
        if (fileElem) {
            if (hasClass(fileElem, 'back-root-icon')) update_list('/');
            else if (hasClass(fileElem, 'file-icon')) dpfile(infoElem.filename);
            else if (hasClass(fileElem, 'back-icon')) update_list(currentPath.replace(/\/[^/]*\/?$/, '/'));
            else if (hasClass(fileElem, 'folder-icon')) update_list(concatPath(currentPath, fileElem.parentNode.dataset.filename));
            else if (hasClass(fileElem, 'link-icon')) {
                let [, sourcefile, destinationfile] = infoElem.linktarget.match(/(.*) -> (.*)/) ?? [];
                if (sourcefile && destinationfile) {
                    let filePath = destinationfile.replace(/^\/*/, '/');
                    checkdirectory(filePath).then((exists) => { exists
                        ? update_list(filePath)
                        : (destinationfile.match(/\//g) || []).length > 1
                            ? update_list(filePath.match(/(.+\/)(.+)/)[1])
                            : swalNotification(`${colorMessage(sourcefile, 'red')} <%:It’s the current directory%> ${colorMessage(destinationfile, 'blue')}`, 'info');
                    });
                }
            }
        }
    }

    function refresh_list(filenames) {
        const regularFiles = filenames.filter(line => !line.startsWith("d")).length;
        listElem.innerHTML = `
            <table class="cbi-section-table">
                <tbody>
                    <tr>
                        <td colspan="7">
                            ${getInitPath() !== '/' ? '<button type="button" class="cbi-button cbi-button-apply back-root-icon display-none" style="margin-right: 10px;"><%:Go to root directory%></button>' : ''}
                            <b><%:There are currently ${regularFiles} files,%> ${filenames.filter(line => line.startsWith("d")).length} <%:directory.%> <%:total file size%>：${calculateTotalSize(filenames)}</b>
                            ${getInitPath() !== '/' ? '<button type="button" class="cbi-button cbi-button-apply back-icon" style="margin-left: 10px;"><%:Back to previous%></button>' : ''}
                        </td>
                    </tr>
                    <tr class="display-none">
                        <td></td>
                        <td class="cbi-value-field"><b><%:name%></b></td>
                        <td class="cbi-value-field"><b><%:size%></b></td>
                        <td class="cbi-value-field"><b><%:Change the time%></b></td>
                        <td class="cbi-value-field"><b><%:Rights%></b></td>
                        <td class="cbi-value-field"><b><%:owner%></b></td>
                        <td class="cbi-value-field" style="position: relative; text-align: center;"><b><%:File operations%></b></td>
                    </tr>
                    ${filenames.map(line => {
                        const [type, , owner, , size, month, day, , ...fullNameParts] = line.trim().split(/\s+/);
                        const fullName = fullNameParts.join(' ');
                        const isLink = ['z', 'l', 'x'].includes(type[0]);
                        const icon = type[0] === 'd' ? "folder-icon" : (isLink ? "link-icon" : "file-icon");
                        const truncatedName = fullName.length > 20 ? `${fullName.slice(0, 13)}...${fullName.slice(-7)}` : fullName;
                        let installButtonHtml = fullName.endsWith(".ipk") ? `<button class="cbi-button cbi-button-apply button-install"><%:Install%></button>` : "";
                        return `
                            <tr class="cbi-section-table-row" data-filename="${fullName}" data-isdir="${Number(type[0] === 'd' || type[0] === 'z')}" data-type="${type}" data-linktarget="${(/->.*/.test(fullName)) && fullName}">
                                <td class="cbi-value-field display-none">
                                    <input type="checkbox" class="file-checkbox" name="${fullName}"/>
                                </td>
                                <td class="cbi-value-field ${icon}"><b title="${fullName}">${truncatedName}</b></td>
                                <td class="cbi-value-field">${size}</td>
                                <td class="cbi-value-field display-none">${month} ${day}</td>
                                <td class="cbi-value-field display-none"> [ ${convertPermissions(type)} ] ${type}</td>
                                <td class="cbi-value-field display-none">${owner}</td>
                                <td class="cbi-section-table-cell">
                                    <button class="cbi-button cbi-button-apply button-rename"><%:Rename%></button>
                                    <button class="cbi-button cbi-button-remove button-remove"><%:Delete%></button>
                                    ${installButtonHtml}
                                </td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        `;
        const deleteButton = document.getElementById('selectedremove');
        document.querySelectorAll('.file-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', () =>
                deleteButton.style.display = document.querySelectorAll('.file-checkbox:checked').length > 0 ? 'block' : 'none');
        });
        deleteButton.style.display = 'none';
    }

    function createCustomMenu(filename, targetElem) {
        removeCustomMenu();
        const menuItems = [
            { label: "<%:Refresh Page%>", action: () => location.reload() },
            { label: "<%:Rename%>", action: () => renamefile(filename) },
            { label: "<%:Modify permissions%>", action: () => modifypermissions(filename, targetElem.type) },
            { label: "<%:upload file%>", action: () => uploadfile() },
            ...((targetElem.isdir === '0')
                ? [{ label: "<%:download file%>", action: () => dpfile(filename, currentPath, true) },
                    { label: "<%:open file%>", action: () => dpfile(filename, currentPath, 'open') }]
                : [{ label: "<%:Download catalog%>", action: () => dpfile(filename, currentPath, true) },
                    { label: "<%:open Directory%>", action: () => update_list(concatPath(currentPath, filename)) }]
            ),
            { label: "<%:Create file (directory)%>", action: () => createnewfile() },
            { label: "<%:Delete file (directory)%>", action: () => deletefiles(filename, targetElem.isdir) },
            ...(currentPath.split('/').length > 2
                ? [{ label: "<%:Back to previous%>", action: () => update_list(currentPath.replace(/\/[^/]*\/?$/, '/')) }] : []
            )
        ];
        customMenu = document.createElement('ul');
        customMenu.className = 'custom-menu';
        menuItems.forEach(({ label, action }) => {
            const menuItemElem = Object.assign(document.createElement('div'), { className: 'menu-item', innerText: label });
            menuItemElem.addEventListener('click', action);
            customMenu.appendChild(menuItemElem);
        });

        const { clientX, clientY } = event;
        const bottomEdge = clientY + menuItems.length * 30 > window.innerHeight;
        const position = bottomEdge
            ? { bottom: `${window.innerHeight - clientY - 30}px`, left: `${clientX}px` }
            : { top: `${clientY}px`, left: `${clientX}px` };
        Object.assign(customMenu.style, position);
        document.body.appendChild(customMenu);
    }

    document.addEventListener('contextmenu', event => {
        const filenameElement = event.target.closest('[data-filename]');
        filenameElement
            ? (event.preventDefault(), createCustomMenu(filenameElement.dataset.filename, filenameElement.dataset))
            : removeCustomMenu();
    });

    document.addEventListener('click', removeCustomMenu);
    document.addEventListener('DOMContentLoaded', function(evt) {
        update_list(getInitPath(), true);
    });

    window.addEventListener('popstate', function(evt) {
        update_list(evt.state?.path || '/', true);
    });
})();
</script>
<%+footer%>
