<%+header%>
<style>
    .fb-container {
        margin: 0; /* 居中显示 */
        max-width: 800px; /* 容器最大宽度 */
        margin-top: 1rem; /* 顶部边距 */
    }

    .fb-container table {
        width: 100%; /* 宽度自适应 */
    }

    .fb-container td {
        padding: 6px; /* 行高 */
        text-align: center; /* 文字居中 */
        /* 底部边框为1像素实线，颜色为#ddd */
/*        border-bottom: 1px solid #ddd;*/
    }

    .cbi-section-table-row:nth-child(odd) {
        color: #000000; /* 奇数行文本颜色 */
        background-color: #f2f2f2; /* 奇数行背景色 */
    }

    .cbi-section-table-row:nth-child(even) {
        color: #333333; /* 偶数行文本颜色 */
        background-color: #ffffff; /* 偶数行背景色 */
    }

    .fb-container .cbi-input-text {
        width: 100%; /* 宽度自适应 */
    }

    .fb-container .cbi-value-field {
        text-align: left; /* 文字左对齐 */
    }

    .input-container {
        display: flex; /* 使用flexbox布局 */
        align-items: center; /* 垂直居中对齐 */
        justify-content: center; /* 水平居中对齐 */
    }

    .fb-container td[class$="-icon"] {
        cursor: pointer; /* 鼠标样式 */
    }

    .fb-container .file-icon,
    .fb-container .link-icon,
    .fb-container .folder-icon, {
        position: relative; /* 相对定位 */
    }

    .fb-container .file-icon:before,
    .fb-container .link-icon:before,
    .fb-container .folder-icon:before {
        content: ''; /* 伪元素的内容为空 */
        width: 1.5rem; /* 宽度 */
        height: 1.5rem; /* 高度 */
        position: relative; /* 相对定位 */
        margin-right: 0.5rem; /* 右边间距 */
        display: inline-block; /* 行内块元素 */
        vertical-align: middle; /* 垂直居中 */
        background-size: contain; /* 背景图自适应 */
    }

    .fb-container .file-icon:before {
        background-image: url(/luci-static/resources/fb/file-icon.png);
    }

    .fb-container .folder-icon:before {
        background-image: url(/luci-static/resources/fb/folder-icon.png);
    }

    .fb-container .link-icon:before {
        background-image: url(/luci-static/resources/fb/link-icon.png);
    }

    .custom-menu {
        padding: 5px 0;
        z-index: 99999;
        position: fixed;
        font-size: 14px;
        border-radius: 5px;
        border: 1px solid #ddd;
        background-color: #f5f5f5;
        font-family: Arial, sans-serif;
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1);
    }

    .menu-item {
        color: #333;
        display: block;
        cursor: pointer;
        padding: 5px 10px;
        transition: all 0.3s ease-in-out;
    }

    .menu-item:hover {
        color: #007bff;
        background-color: #fff;
    }

    .menu-item:not(:last-child) {
        border-bottom: 1px solid #ddd;
    }

    .swal-title {
        font-size: 18px;
    }

    .swal-text {
        font-size: 17px;
    }

    .swal-popup {
        width: 400px;
        font-size: 15px;
        background-color: #f2f2f2;
    }

    .swal-cancel-button,
    .swal-confirm-button {
        bottom: 5px;
        color: #fff;
        border: none;
        cursor: pointer;
        position: sticky;
        padding: 6px 10px;
        border-radius: 5px;
        margin-right: 50px;
        transition: all 0.2s ease-in-out;
        background-color: hsl(214, 90%, 52%);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    .swal-cancel-button:hover,
    .swal-confirm-button:hover {
        background-color: hsl(324, 90%, 52%);
    }

    .alert-mask {
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 9999;
        display: flex;
        position: fixed;
        align-items: center;
        justify-content: center;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .alert-container {
        width: 70%;
        overflow: auto;
        max-width: 900px;
        max-height: 70vh;
        position: relative;
        border-radius: 5px;
        background-color: #fff;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    .alert-content {
        overflow: auto;
        max-height: calc(70vh - 100px);
    }

    .alert-content pre {
        color: #66D9EF;
        font-size: 14px;
        line-height: 1.5;
        text-align: left;
        font-family: Consolas;
        background-color: #272822;
    }

/*    在480px以下的屏幕*/
    @media screen and (max-width: 480px) {
        .cbi-value-field {
            width: 30px; /* 设置一个固定宽度，根据需求调整 */
            overflow: hidden; /* 控制溢出隐藏 */
            white-space: nowrap; /* 防止换行 */
            text-overflow: ellipsis; /* 显示省略号 */
        }

        .menu-item {
            font-size: 12px;
            padding: 3px 8px;
        }

        .display-480px {
            display: none;
        }
    }
</style>
<script src="/luci-static/resources/fb/sweetalert2.all.js"></script>
<link rel="stylesheet" href="/luci-static/resources/fb/sweetalert2.min.css">
<h2 name="content"><%:File management%></h2>
<fieldset class="fb-container">
    <div class="input-container">
        <button id="createnewfile" class="cbi-button cbi-button-apply"><%:create new file%></button>
        <input id="current-path" type="text" title="<%:If the path is the root directory, add '&' at the first character%>" class="cbi-input-text" value="/" />
        <button id="godirectory" class="cbi-button cbi-button-apply"><%:Go to directory%></button>
        <button id="uploadfile" class="cbi-button cbi-button-apply"><%:Upload to current directory%></button>
    </div>
</fieldset>
<script>

String.prototype.replaceAll = function (search, replacement) {
    return this.replace(new RegExp(search, 'g'), replacement); //替换所有匹配字符串
};
// const container = document.getElementById('maincontent');
// function createHTML(strings, ...values) {
//     const template = document.createElement('template');
//     template.innerHTML = strings.reduce((acc, str, i) => acc + str + (values[i] || ''), '');
//     return template.content;
// }
// container.append(
//     createHTML`
//         <h2 name="content"><%:File management%></h2>
//         <fieldset class="fb-container">
//             <div class="input-container">
//                 <button id="createnewfile" class="cbi-button cbi-button-apply"><%:create new file%></button>
//                 <input id="current-path" type="text" class="current-path cbi-input-text" title="<%:If the path is the root directory, add '&' at the first character%>" value="/">
//                 <button id="godirectory" class="cbi-button cbi-button-apply"><%:Go to directory%></button>
//                 <button id="uploadfile" class="cbi-button cbi-button-apply"><%:Upload to current directory%></button>
//             </div>
//         </fieldset>
//     `
// );

// const scriptElem = document.createElement('script');
// scriptElem.src = '/luci-static/resources/fb/sweetalert2.all.js';
// const linkElem = document.createElement('link');
// linkElem.rel = 'stylesheet';
// linkElem.href = '/luci-static/resources/fb/sweetalert2.min.css';
// document.head.append(scriptElem, linkElem);

// console.log(uploaddir);
(function () {
    let currentPath, customMenu = null;
    const xhr = new XHR();
    const pathElem = document.getElementById("current-path");
    document.getElementById('uploadfile').addEventListener('click', uploadfile);
    document.getElementById('godirectory').addEventListener('click', godirectory);
    document.getElementById('createnewfile').addEventListener('click', createnewfile);
    const listElem = document.querySelector(".fb-container").appendChild(document.createElement("div"));
    listElem.id = "file-list";
    listElem.onclick = handleClick;

    pathElem.onblur = async function() {
        let filePath = resolveFilePath(this.value.trim());
        const exists = await checkdirectory(filePath);
        exists ? update_list(filePath) : await godirectory();
    };

    pathElem.addEventListener("keyup", event => {
        if (event.key === "Enter") { pathElem.blur(); }
    });

    function getInitPath() {
        const urlParams = new URLSearchParams(location.search);
        return urlParams.get('path') || '/';
    }

    function concatPath(path, filename = '') {
        return `${path.replace(/\/*$/, '/')}${filename}`;
    }

    function resolveFilePath(newname) {
        return /^&\//.test(newname)
            ? newname.replace(/^&/, '')
            : newname.startsWith(currentPath)
                ? newname
                : concatPath(currentPath, newname.replace(/^\//, ''));
    }

    function colorMessage(name, color) {
        return `<span style="color: ${color};">${name}</span>`;
    }

    function removeCustomMenu() {
        customMenu?.remove(); customMenu = null;
    }

    function getFileElem(elem) {
        return elem.className.includes('-icon')
            ? elem
            : elem.parentNode.className.includes('-icon')
                ? elem.parentNode
                : '';
    }

    function convertPermissions(permissions) {
        const map = { 'r': 4, 'w': 2, 'x': 1 };
        let octalValue = '';
        for (let i = 1; i < permissions.length; i += 3) {
            const segment = permissions.slice(i, i + 3);
            const value = segment.split('').reduce((acc, curr) => acc + (map[curr] || 0), 0);
            octalValue += value.toString(8);
        }
        return octalValue;
    }

    const alert = (msg) => {
        const body = document.body;
        const alertMask = document.createElement('div');
        alertMask.className = 'alert-mask';

        const alertContainer = document.createElement('div');
        alertContainer.className = 'alert-container';

        const alertContent = document.createElement('div');
        alertContent.className = 'alert-content';
        alertContent.innerHTML = `<pre>\n${msg}\n\n</pre>`;

        alertMask.onclick = ({ target }) => {
            if (target === alertMask) body.removeChild(alertMask);
        };

        alertContainer.appendChild(alertContent);
        alertMask.appendChild(alertContainer);
        body.appendChild(alertMask);
    };

    function calculateTotalSize(filenames) {
        let totalSize = 0, unitIndex = 0;
        const units = ['B', 'KB', 'MB', 'GB'];
        const sizeFactor = { K: 1024, M: 1024 * 1024, G: 1024 * 1024 * 1024 };

        filenames.forEach(line => {
            const [, , , , size] = line.trim().split(/\s+/);
            const suffix = size.slice(-1).toUpperCase();
            const parsedSize = parseFloat(size.slice(0, -1)) * sizeFactor[suffix] || 1;
            if (!isNaN(parsedSize)) totalSize += parsedSize;
        });

        while (totalSize >= 1024 && unitIndex < units.length - 1) {
            totalSize /= 1024; unitIndex++;
        }

        return `${totalSize.toFixed(2)} ${units[unitIndex]}`;
    }

    function swalNotification(title = '', icon = '') {
        Swal.fire({
            icon, title, timer: 2000, showConfirmButton: false,
            customClass: {
                text: 'swal-text', title: 'swal-title', popup: 'swal-popup'
            }
        });
    }

    const swalConfig = {
        showCloseButton: true, cancelButtonText: '<%:Cancel%>',
        showCancelButton: true, confirmButtonText: '<%:Confirm%>',
        cancelButtonColor: '#d33', confirmButtonColor: '#3085d6',
        customClass: {
            title: 'swal-title',
            text: 'swal-text', confirmButton: 'swal-confirm-button',
            popup: 'swal-popup', cancelButton: 'swal-cancel-button'
        }
    };

    function update_list(path, opt = {}, upload) {
        path = concatPath(path);
        if (currentPath === path && !upload) return;
        let xhr = new XMLHttpRequest();
        xhr.open('GET', '/cgi-bin/luci/admin/system/file_list?path=' + encodeURIComponent(path), true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    const res = JSON.parse(xhr.responseText);
                    refresh_list(res?.stat === 0 ? res.data : []);
                }
            }
        };
        xhr.send();
        currentPath = path; pathElem.value = path;
        opt.popState || history.pushState({ path }, null, `?path=${path}`);
    }

    function renamefile(oldname) {
        Swal.fire({
            ...swalConfig, inputValue: oldname,
            inputAttributes: { autocapitalize: 'off' },
            title: '<%:Enter new name%>', input: 'text',
            didRender: () => setTimeout(() => {
                    const inputValue = document.querySelector('.swal2-input')?.value ?? '';
                    document.querySelector('.swal2-input')?.setSelectionRange(0, inputValue.lastIndexOf('.'));
                }, 0),
            preConfirm: (newname) => {
                newname = newname.trim();
                if (!newname || newname === oldname) return;
                xhr.post('/cgi-bin/luci/admin/system/renamefile', {
                    newname: concatPath(currentPath, newname),
                    oldname: concatPath(currentPath, oldname)
                }, (_, res) => {
                    if (res?.stat === 0) {
                        refresh_list(res.data);
                        swalNotification(`${colorMessage(oldname, 'blue')} <%:Renaming successful!%>`, 'success');
                    } else {
                        swalNotification(`${colorMessage(oldname, 'red')} <%:Renaming failed%>`, 'error');
                    }
                });
            }
        });
    }

    function deletefiles(filename, isdir) {
        Swal.fire({
            ...swalConfig, icon: 'warning',
            title: `<%:confirm deletion%> ${colorMessage(filename, 'red')} ?`
        }).then((result) => {
            if (result.value) {
                xhr.post('/cgi-bin/luci/admin/system/deletefiles', {
                    isdir, path: concatPath(currentPath, filename)
                }, function (_, res) {
                    if (res?.stat === 0) {
                        refresh_list(res.data);
                        swalNotification(`${colorMessage(filename, 'blue')} <%:successfully deleted!%>`, 'success')
                    } else {
                        swalNotification(`${colorMessage(filename, 'red')} <%:deleted failed%>`, 'error')
                    }
                });
            }
        });
    }

    function modifypermissions(filepath, type) {
        let oldPermissions = convertPermissions(type);
        let filename = `${colorMessage(filepath, 'blue')}`;
        Swal.fire({
            inputValue: oldPermissions, input: 'text', icon: 'warning',
            title: `<%:Please enter new permissions for ${filename}%>：`,
            ...swalConfig, inputAttributes: {
                autocorrect: 'off', autocomplete: 'off',
                spellcheck: 'false', autocapitalize: 'off'
            },
            didRender: () => setTimeout(() => document.querySelector('.swal2-input')?.select(), 0)
        }).then((result) => {
            let permissions = (result.value || '').trim();
            if (!permissions || permissions === oldPermissions) return;
            xhr.post('/cgi-bin/luci/admin/system/modifypermissions', {
                permissions, path: concatPath(currentPath, filepath)
            }, (_, res) => {
                if (res?.stat === 0) {
                    refresh_list(res.data);
                    swalNotification(`${colorMessage(filepath, 'blue')} <%:Permissions modified successfully%>`, 'success');
                } else {
                    swalNotification(`${colorMessage(filepath, 'red')} <%:Permission modification failed%>`, 'error');
                }
            });
        });
    }

    async function godirectory() {
        let path = resolveFilePath(pathElem.value);
        const exists = await checkdirectory(path);
        if (exists) {
            update_list(path);
        } else {
            const { value, isConfirmed } = await Swal.fire({
                ...swalConfig, confirmButtonText: '<%:create%>',
                text: '<%:Do you want to create this directory?%>',
                title: `${colorMessage(path, 'red')} <%:The directory does not exist%>`
            });
            if (isConfirmed) createnewfile(path);
            else return;
        }
    }

    async function createnewfile(filePath = '') {
        const { value, isConfirmed } = await Swal.fire({
            ...swalConfig, title: '<%:Enter name%>：',
            html: `
                <input type="text" id="newname" class="swal2-input" autocapitalize="off" placeholder="<%:For example: example.txt%>" title="<%:You can enter a file name or directory name%>"><br><br>
                <input type="checkbox" id="createdirectory" class="swal2-checkbox">
                <label for="createdirectory"><b><%:Create as directory%></b></label><br>
                <span id="directorytip" class="hidden" style="font-size: smaller;"><%:If the path is the root directory, add '&' at the first character%></span>
            `,
            didOpen: () => {
                if (typeof filePath === 'string' && filePath.trim() !== '') {
                    document.getElementById('newname').value = filePath;
                    document.getElementById('createdirectory').checked = true;
                    document.getElementById('createdirectory').dispatchEvent(new Event('change'));
                }
            },
            preConfirm: () => {
                const newname = document.getElementById('newname').value;
                const createdirectory = document.getElementById('createdirectory').checked;
                return { newname: newname || '', createdirectory };
            },
            didRender: () => {
                const directorytip = document.getElementById('directorytip');
                const createdirectoryCheckbox = document.getElementById('createdirectory');
                createdirectoryCheckbox?.addEventListener('change', () => {
                    directorytip?.classList.toggle('hidden', !createdirectoryCheckbox.checked);
                });

                const newnameInput = document.getElementById('newname');
                directorytip?.classList.toggle('hidden', !newnameInput?.value.trim());
            },
        });
        if (!isConfirmed) return;

        let data = null;
        const { newname, createdirectory } = value;
        let newfile = filePath ? newname : resolveFilePath(newname);

        if (!createdirectory) {
            const { value: newData, isConfirmed } = await Swal.fire({
                ...swalConfig, title: '<%:Enter file content%>',
                input: 'textarea', inputAttributes: {
                    autocapitalize: 'off', placeholder: '<%:Enter text here%>'
                }
            });
            if (isConfirmed) { data = newData; newfile = `${currentPath}${newfile}`; }
        }

        xhr.post('/cgi-bin/luci/admin/system/createnewfile', { data, newfile, createdirectory }, (_, res) => {
            if (res?.stat === 0) {
                createdirectory && update_list(newfile);
                refresh_list(res.data);
                swalNotification(`${colorMessage(newfile, 'blue')} <%:File created successfully!%>`, 'success');
            } else {
                swalNotification(`${colorMessage(newfile, 'red')} <%:File creation failed!%>`, 'error');
            }
        });
    }

    async function installipk(filename) {
        let filepath = concatPath(currentPath, filename);
        const confirmed = await Swal.fire({
            ...swalConfig, icon: 'info',
            title: `<%:Confirm installation%> ${colorMessage(filename, 'red')} ?`
        });
        if (!confirmed.value) return;
        
        xhr.post('/cgi-bin/luci/admin/system/installipk', { filepath }, (_, res) => {
            res?.stat === 0
                ? alert(res.data)
                : swalNotification(`${colorMessage(filename, 'red')} <%:installation failed%>`, 'error');
        });
    }

    async function uploadfile() {
        const { value: file } = await Swal.fire({
            ...swalConfig, title: '<%:upload file%>',
            inputAttributes: { accept: '/*' }, input: 'file'
        });
        if (!file) return;
        const data = new FormData();
        data.append('file', file);
        data.append('filename', file.name);
        data.append('filedir', concatPath(currentPath));
        try {
            const response = await fetch("/cgi-bin/luci/admin/system/uploadfile", {
                body: data, method: 'POST'
            });
            if (response.ok) {
                const res = await response.json();
                update_list(res.filedir, '', true);
                swalNotification(`${colorMessage(res.filename, 'blue')} <%:File has been uploaded to%> ${res.filedir}`, 'success');
            } else {
                swalNotification(`${colorMessage(res.filename, 'red')} <%:upload failed%>`, 'error');
            }
        } catch (error) {
            swalNotification(`${colorMessage(res.filename, 'red')} <%:upload failed%>`, 'error');
        }
    }

    function dpfile(filename, dirname = currentPath, download = '') {
        if (filename.includes("->")) {
            [, dirname = "/", filename = ""] = filename.match(/-> (.+)/)?.[1].match(/(.+\/)(.+)/);
        }
        const url = `/cgi-bin/luci/admin/system/dpfile?path=${encodeURIComponent(dirname)}&filename=${encodeURIComponent(filename)}`;
        download === '' ? window.open(url) : Swal.fire({
            ...swalConfig, icon: 'info',
            title: `<%:Confirm download%> ${colorMessage(filename, 'blue')} ?`
        }).then((result) => {
            if (result.value) window.open(`${url}&download=${download}`);
        });
    }

    function checkdirectory(filepath) {
        return new Promise((resolve, reject) => {
            xhr.get('/cgi-bin/luci/admin/system/checkdirectory', { filepath }, function (_, res) {
                resolve(res?.stat === 0 ? true : false);
            });
        });
    }

    function handleClick(evt) {
        let targetElem = evt.target, infoElem, filepath;

        if (targetElem.classList.contains('button-remove')) {
            infoElem = targetElem.parentNode.parentNode;
            deletefiles(infoElem.dataset.filename, infoElem.dataset.isdir);
        } else if (targetElem.classList.contains('button-rename')) {
            infoElem = targetElem.parentNode.parentNode;
            renamefile(infoElem.dataset.filename);
        } else if (targetElem.classList.contains('button-install')) {
            infoElem = targetElem.parentNode.parentNode;
            installipk(infoElem.dataset.filename);
        } else {
            let fileElem = getFileElem(targetElem);
            if (fileElem) {
                if (fileElem.classList.contains('back-root-icon')) {
                    update_list('/');
                } else if (fileElem.classList.contains('file-icon')) {
                    dpfile(fileElem.parentNode.dataset.filename);
                } else if (fileElem.classList.contains('back-icon')) {
                    update_list(currentPath.replace(/\/[^/]+($|\/$)/, ''));
                } else if (fileElem.classList.contains('folder-icon')) {
                    update_list(concatPath(currentPath, fileElem.parentNode.dataset.filename));
                } else if (fileElem.classList.contains('link-icon')) {
                    let filePath = fileElem.parentNode.dataset.linktarget.replace(/^\/*/, '/');
                    if (filePath) {
                        checkdirectory(filePath).then((exists) => {
                            update_list(exists ? filePath : filePath.match(/(.+\/)(.+)/)[1]);
                        });
                    }
                }
            }
        }
    }

    function refresh_list(filenames) {
        const rowStyle = "cbi-rowstyle-even";
        const regularFiles = filenames.filter(line => !line.startsWith("d")).length;
        const listHtml = `
            <table class="cbi-section-table">
                <tbody>
                    <tr>
                        <td colspan="6">
                            ${getInitPath() !== '/' ? '<button type="button" class="cbi-button cbi-button-apply back-root-icon display-480px" style="margin-right: 10px;"><%:Go to root directory%></button>' : ''}
                            <b><%:There are currently ${regularFiles} files,%> ${filenames.filter(line => line.startsWith("d")).length} <%:directory.%> <%:total file size%>：${calculateTotalSize(filenames)}</b>
                            ${getInitPath() !== '/' ? '<button type="button" class="cbi-button cbi-button-apply back-icon" style="margin-left: 10px;"><%:Back to previous%></button>' : ''}
                        </td>
                    </tr>
                    <tr>
                        <td class="cbi-value-field"><b><%:name%></b></td>
                        <td class="cbi-value-field display-480px"><b><%:size%></b></td>
                        <td class="cbi-value-field display-480px"><b><%:Change the time%></b></td>
                        <td class="cbi-value-field display-480px"><b><%:Rights%></b></td>
                        <td class="cbi-value-field display-480px"><b><%:owner%></b></td>
                        <td class="cbi-value-field display-480px input-container"><b><%:File operations%></b></td>
                    </tr>
                    ${filenames.map(line => {
                        const [type, , owner, , size, month, day, , ...fullNameParts] = line.trim().split(/\s+/);
                        const fullName = fullNameParts.join(' ');
                        const isLink = ['z', 'l', 'x'].includes(type[0]);
                        const icon = type[0] === 'd' ? "folder-icon" : (isLink ? "link-icon" : "file-icon");
                        const rowClass = rowStyle === "cbi-rowstyle-even" ? "cbi-rowstyle-odd" : "cbi-rowstyle-even";
                        const truncatedName = fullName.length > 20 ? `${fullName.slice(0, 13)}...${fullName.slice(-7)}` : fullName;
                        let installButtonHtml = fullName.endsWith(".ipk") ? `<input type="button" class="cbi-button cbi-button-apply button-install" value="<%:Install%>"/>` : "";
                        return `
                            <tr class="cbi-section-table-row ${rowClass}" data-filename="${fullName}" data-isdir="${Number(type[0] === 'd' || type[0] === 'z')}" data-type="${type}" ${(type[0] === 'z' || type[0] === 'l') ? `data-linktarget="${fullName.match(/-> (.+)/)?.[1]}"` : ''}">
                                <td class="cbi-value-field ${icon}"><b title="${fullName}">${truncatedName}</b></td>
                                <td class="cbi-value-field">${size}</td>
                                <td class="cbi-value-field display-480px">${month} ${day}</td>
                                <td class="cbi-value-field display-480px"> [ ${convertPermissions(type)} ] ${type}</td>
                                <td class="cbi-value-field display-480px">${owner}</td>
                                <td class="cbi-section-table-cell">
                                    <input type="button" class="cbi-button cbi-button-apply button-rename" value="<%:Rename%>"/>
                                    <input type="button" class="cbi-button cbi-button-remove button-remove" value="<%:Delete%>"/>
                                    ${installButtonHtml}
                                </td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        `;

        listElem.innerHTML = listHtml;
    }

    function createCustomMenu(filename, targetElem) {
        removeCustomMenu();
        const menuItems = [
            { label: "<%:Delete%>", action: () => deletefiles(filename, targetElem.dataset.isdir) },
            { label: "<%:Rename%>", action: () => renamefile(filename) },
            { label: "<%:Modify permissions%>", action: () => modifypermissions(filename, targetElem.dataset.type) },
            { label: "<%:upload file%>", action: uploadfile },
            { label: "<%:download file%>", action: () => dpfile(filename, currentPath, true) },
            { label: "<%:Create file (directory)%>", action: createnewfile },
            ...(currentPath.split('/').length > 2 ? [{ label: "<%:Back to previous%>", action: () => update_list(currentPath.replace(/\/[^/]+\/?$/, '')) }] : [])
        ];
        customMenu = document.createElement('ul');
        customMenu.className = 'custom-menu';
        menuItems.forEach(({ label, action }) => {
            const menuItemElem = Object.assign(document.createElement('div'), { className: 'menu-item', innerText: label });
            menuItemElem.addEventListener('click', action);
            customMenu.appendChild(menuItemElem);
        });

        const { clientX, clientY } = event;
        const menuHeight = menuItems.length * 30;
        const bottomEdge = clientY + menuHeight > window.innerHeight;
        const position = bottomEdge ? { bottom: `${window.innerHeight - clientY}px`, left: `${clientX}px` } : { top: `${clientY}px`, left: `${clientX}px` };
        Object.assign(customMenu.style, position);
        document.body.appendChild(customMenu);
    }

    document.addEventListener('contextmenu', event => {
        event.preventDefault();
        const filenameElement = event.target.closest('[data-filename]');
        filenameElement
            ? createCustomMenu(filenameElement.dataset.filename, filenameElement)
            : removeCustomMenu();
    });

    document.addEventListener('click', removeCustomMenu);
    document.addEventListener('DOMContentLoaded', function(evt) {
        update_list(getInitPath(), { popState: true });
    });

    window.addEventListener('popstate', function(evt) {
        update_list(evt.state?.path || '/', { popState: true });
    });
})();
</script>
<%+footer%>
