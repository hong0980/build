#!/bin/sh /etc/rc.common

START=52
STOP=10

. /usr/bin/softwarecenter/nmp_install.sh
. /usr/bin/softwarecenter/app_install.sh
. /usr/bin/softwarecenter/web_install.sh

port() {

    if [ -x "/opt/bin/deluged" -a -n "$de_port" ]; then
        old_de_port=$(grep -oP '(?<=-p )\d+' /opt/etc/init.d/S81deluge-web)
        if [ "$de_port" != "$old_de_port" ]; then
            sed -i "s/-p $old_de_port/-p $de_port/" /opt/etc/init.d/S81deluge-web
            /opt/etc/init.d/S80deluged restart >/dev/null 2>&1
        fi
    fi

    if [ -x "/opt/bin/transmission-daemon" -a -n "$tr_port" ]; then
        # old_tr_port=$(sed -n 's/.*"rpc-port": \([0-9]\+\).*/\1/p' /opt/etc/transmission/settings.json)
        old_tr_port=$(jq '.["rpc-port"]' /opt/etc/transmission/settings.json)
        if [ -f /opt/etc/init.d/S88transmission ]; then
            /opt/etc/init.d/S88transmission stop >/dev/null 2>&1
        else
            /opt/etc/init.d/S88transmission-cfp stop >/dev/null 2>&1
        fi

        if [ "$old_tr_port" != "$tr_port" ]; then
            sleep 1
            sed -i "s/\"rpc-port\": $old_tr_port/\"rpc-port\": $tr_port/" /opt/etc/transmission/settings.json
            sleep 2
        fi

        if [ -f /opt/etc/init.d/S88transmission ]; then
            /opt/etc/init.d/S88transmission start >/dev/null 2>&1
        else
            /opt/etc/init.d/S88transmission-cfp start >/dev/null 2>&1
        fi
    fi

    if [ -x "/opt/bin/amuled" -a -n "$am_port" ]; then
        old_am_port=$(sed -n '/PasswordLow/{n;p;q}' /opt/var/amule/amule.conf | grep -oP 'Port=\K\d+')
        if [ "$old_am_port" != "$am_port" ]; then
            sed -i "s/Port=$old_am_port/Port=$am_port/" /opt/var/amule/amule.conf
            /opt/etc/init.d/S57amuled restart >/dev/null 2>&1
        fi
    fi

    if [ -x "/opt/bin/qbittorrent-nox" -a -n "$qb_port" ]; then
        old_qb_port=$(grep -oP '(?<=webui-port=)\d+' /opt/etc/init.d/S89qbittorrent)
        if [ "$old_qb_port" != "$qb_port" ]; then
            sed -i "s/webui-port=$old_qb_port/webui-port=$qb_port/" /opt/etc/init.d/S89qbittorrent
            /opt/etc/init.d/S89qbittorrent restart >/dev/null 2>&1
        fi
    fi

    if [ -x "/opt/bin/rtorrent" -a -n "$rt_port" ]; then
        old_rt_port=$(grep -oP '^server.port=\s*\K\d+' /opt/etc/lighttpd/conf.d/99-rtorrent-fastcgi-scgi-auth.conf)
        if [ "$old_rt_port" != "$rt_port" ]; then
            sed -i "s/\(server.port\).*/\1= $rt_port/" /opt/etc/lighttpd/conf.d/99-rtorrent-fastcgi-scgi-auth.conf
            /opt/etc/init.d/S80lighttpd restart >/dev/null 2>&1
        fi
    fi
}

CDG() {
    config_load softwarecenter
    get_config="a_delaytime cpu_model delaytime deploy_entware deploy_mysql deploy_nginx disk_mount download_dir entware_enable mysql_enabled nginx_enabled partition_disk pass old_pass swap_enabled swap_path swap_size user am_port ar_port de_port qb_port tr_port rt_port"

    for rt in $get_config; do
        config_get_bool $rt main $rt
        config_get $rt main $rt
    done
    # entware环境
    source /etc/profile >/dev/null 2>&1
    if [ $entware_enable ]; then
        if [ ! -e /etc/init.d/entware ]; then
            echo_time "========= 开始部署entware环境 =========\n"
            entware_set $disk_mount $cpu_model
            source /etc/profile >/dev/null 2>&1
        fi
    else
        if [ -x /etc/init.d/entware ]; then
            entware_unset
            echo_time "\n========= entware环境已删除 =========\n"
        fi
        return 1
    fi

    # Nginx
    if [ $deploy_nginx ]; then
        [ ! -x /opt/etc/init.d/S80nginx ] && echo_time "========= 开始安装Nginx =========" && init_nginx
        if [ $nginx_enabled ]; then
            [ "$(pidof nginx)" ] || nginx_manage start
        else
            nginx_manage stop
        fi
    else
        [ -x /opt/etc/init.d/S80nginx ] && echo_time "========= 卸载Nginx相关的软件包 =========" && del_nginx
    fi

    # MySQL
    if [ $deploy_mysql ]; then
        [ ! -x /opt/etc/init.d/S70mysqld ] && echo_time "========= 开始安装MySQL =========" && init_mysql
        if [ $mysql_enabled ]; then
            [ "$pass" != "$old_pass" ] && {
                uci_set_type old_pass $pass
                mysqladmin -u root password "$pass"
            }
            [ "$(pidof mysqld)" ] || /opt/etc/init.d/S70mysqld start >/dev/null 2>&1
        else
            /opt/etc/init.d/S70mysqld stop >/dev/null 2>&1
        fi
    else
        [ -x /opt/etc/init.d/S70mysqld ] && echo_time "========= 卸载MySQL相关的软件包 =========" && del_mysql
    fi

    [ "$(pidof nginx)" ] && {
        config_foreach handle_website website test
        clean_vhost_config
    }
    port

    [ $swap_enabled ] && config_swap_init $swap_size $swap_path || config_swap_del $swap_path

    grep -q "_boot" /etc/config/softwarecenter && {
        for package_name in $(awk '/_boot/ {sub(/_boot/, "", $2); print $2}' /etc/config/softwarecenter); do
            if [ "$(uci_get_type ${package_name}_boot)" = 1 ]; then
                init=$(find /opt/etc/init.d/ -perm '-u+x' -name "*$package_name*")

                if [ -x "$init" ]; then
                    if ! _pidof "$package_name" >/dev/null 2>&1; then
                        # echo_time "$package_name 启动"
                        [ $delaytime ] && sleep $delaytime
                        if $init start >/dev/null 2>&1; then
                            echo_time "$package_name 启动成功"
                        else
                            echo_time "$package_name 启动失败"
                        fi
                    # else
                        # echo_time "$package_name 已在运行"
                    fi
                else
                    echo_time "=========== 开始安装 $package_name ==========="
                    case "$package_name" in
                        amule) install_amule >> "$log" ;;
                        aria2) install_aria2 >> "$log" ;;
                        deluged) install_deluge >> "$log" ;;
                        rtorrent) install_rtorrent >> "$log" ;;
                        qbittorrent) install_qbittorrent >> "$log" ;;
                        transmission) install_transmission >> "$log" ;;
                        *) break ;;
                    esac
                    echo_time "=========== $package_name 安装完成 ===========\n"
                fi
            fi
        done
    }
}

start() {
    CDG >>"$log"
}

stop() {
    :
}

restart() {
    stop
    start
}

boot() {
    sleep ${a_delaytime}m
    start
}
