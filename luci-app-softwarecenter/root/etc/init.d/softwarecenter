#!/bin/sh /etc/rc.common

START=52
STOP=10

. /usr/bin/softwarecenter/nmp_install.sh
. /usr/bin/softwarecenter/app_install.sh
. /usr/bin/softwarecenter/web_install.sh

CDG() {
    config_load softwarecenter
    get_config="a_delaytime cpu_model delaytime deploy_entware deploy_mysql deploy_nginx disk_mount download_dir entware_enable mysql_enabled nginx_enabled partition_disk pass old_pass swap_enabled swap_path swap_size user"

    for rt in $get_config; do
        config_get_bool $rt main $rt
        config_get $rt main $rt
    done
    # entware环境
    source /etc/profile >/dev/null 2>&1
    if [ $entware_enable ]; then
        if [ ! -e /etc/init.d/entware ]; then
            echo_time "========= 开始部署entware环境 ========="
            entware_set $disk_mount $cpu_model
            source /etc/profile >/dev/null 2>&1
        fi
    else
        if [ -x /etc/init.d/entware ]; then
            entware_unset
            echo_time "entware环境已删除！"
        fi
        return 1
    fi

    # Nginx
    if [ $deploy_nginx ]; then
        [ ! -x /opt/etc/init.d/S80nginx ] && echo_time "========= 开始安装Nginx =========" && init_nginx
        if [ $nginx_enabled ]; then
            [ "$(pidof nginx)" ] || nginx_manage start
        else
            nginx_manage stop
        fi
    else
        [ -x /opt/etc/init.d/S80nginx ] && echo_time "========= 卸载Nginx相关的软件包 =========" && del_nginx
    fi

    # MySQL
    if [ $deploy_mysql ]; then
        [ ! -x /opt/etc/init.d/S70mysqld ] && echo_time "========= 开始安装MySQL =========" && init_mysql
        if [[ $mysql_enabled ]]; then
            if pidof mysqld &> /dev/null; then
                pass=${pass:-123456}
                [ -z $old_pass ] && uci_set_type old_pass "$pass"
                if [[ $pass != $old_pass ]]; then
                    uci_set_type old_pass "$pass"
                    mysqladmin -u root password "$pass"
                fi
            else
                /opt/etc/init.d/S70mysqld start >/dev/null 2>&1
            fi
        else
            /opt/etc/init.d/S70mysqld stop >/dev/null 2>&1
        fi
    else
        [ -x /opt/etc/init.d/S70mysqld ] && echo_time "========= 卸载MySQL相关的软件包 =========" && del_mysql
    fi

    [ "$(pidof nginx)" ] && {
        config_foreach handle_website website test
        clean_vhost_config
    }
    [ -d "/opt/etc/config" ] && modify_port

    [ $swap_enabled ] && config_swap_init $swap_size $swap_path || config_swap_del $swap_path

    grep -q "_boot" /etc/config/softwarecenter && [ -x /etc/init.d/entware ] && {
        for package_name in $(awk '/_boot/ {sub(/_boot/, "", $2); print $2}' /etc/config/softwarecenter); do
            if [ "$(uci_get_type ${package_name}_boot)" = 1 ]; then
                init=$(find /opt/etc/init.d/ -perm '-u+x' -name "*$package_name*")

                if [ -x "$init" ]; then
                    if ! _pidof "$package_name" >/dev/null 2>&1; then
                        # echo_time "$package_name 启动"
                        [ $delaytime ] && sleep $delaytime
                        if $init start >/dev/null 2>&1; then
                            echo_time "$package_name 启动成功"
                        else
                            echo_time "$package_name 启动失败"
                        fi
                    # else
                        # echo_time "$package_name 已在运行"
                    fi
                else
                    echo_time "=========== 开始安装 $package_name ==========="
                    case "$package_name" in
                        amule) install_amule >> "$log" ;;
                        aria2) install_aria2 >> "$log" ;;
                        deluged) install_deluge >> "$log" ;;
                        rtorrent) install_rtorrent >> "$log" ;;
                        qbittorrent) install_qbittorrent >> "$log" ;;
                        transmission) install_transmission >> "$log" ;;
                        *) break ;;
                    esac
                    echo_time "=========== $package_name 安装完成 ===========\n"
                fi
            fi
        done
    }
}

start() {
    CDG >>"$log"
}

stop() {
    :
}

restart() {
    stop
    start
}

boot() {
    sleep ${a_delaytime}m
    start
}
