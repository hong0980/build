#!/bin/sh /etc/rc.common
# Copyright (C) 2019 Jianpeng Xiang (1505020109@mail.hnust.edu.cn)
# This is free software, licensed under the GNU General Public License v3.

START=52
STOP=10

. /usr/bin/softwarecenter/website_manager.sh
. /usr/bin/softwarecenter/mysql_install.sh
. /usr/bin/softwarecenter/nginx_install.sh
website_config_list=""

#本函数负责清理未写入配置的网站
clean_vhost_config() {
	local_config_list="$(ls /opt/etc/nginx/vhost | sed 's/.conf//')"
	local_no_use_config_list="$(ls /opt/etc/nginx/no_use | sed 's/.conf//')"
	delete_config_list=""

	# 获取要删除的网站
	for i in $local_config_list; do
		flag=""
		for j in $website_config_list; do
			if [ "$i" == "$j" ]; then
				flag="1"
				break
			fi
		done
		if [ -z $flag ]; then
			delete_config_list="$delete_config_list /opt/etc/nginx/vhost/$i.conf"
		fi
	done
	for i in $local_no_use_config_list; do
		flag=""
		for j in $website_config_list; do
			if [ "$i" == "$j" ]; then
				flag="1"
				break
			fi
		done
		if [ -z $flag ]; then
			delete_config_list="$delete_config_list /opt/etc/nginx/no_use/$i.conf"
		fi
	done

	for conf in $delete_config_list; do
		webdir=$(vhost_config_list $conf | awk '{print $1}')
		delete_website $conf $webdir
	done
}

# 网站迭代处理，本函数迭代的配置网站（处理逻辑也许可以更好的优化？）
handle_website() {
	website_config="autodeploy_enable customdeploy_enabled port redis_enabled website_dir website_enabled website_select"
	for pl in $website_config; do
		config_get_bool $pl $1 $pl
		config_get $pl $1 $pl
	done

	if [ "$autodeploy_enable" ]; then
		local website_name=$(website_name_mapping $website_select) # 获取网站名称
		if [ ! -f /opt/etc/*/*/$website_name.conf ]; then
			install_website $website_select $port
			if [ "$website_enabled" ]; then
				echo_time " $name 安装完成"
				echo_time "浏览器地址栏输入：$localhost:$port 即可访问\n"
			else
				echo_time " $name 安装完成，但没有开启！\n"
			fi
		fi
	else
		return 1
	fi

	if [ "$website_enabled" ]; then
		if [ -f /opt/etc/nginx/no_use/$website_name.conf ]; then
			echo_time "启用 $website_name "
			mv /opt/etc/nginx/no_use/$website_name.conf /opt/etc/nginx/vhost/$website_name.conf
			port_custom "/opt/etc/nginx/vhost/$website_name.conf"
		fi

		if [ "$autodeploy_enable" ] && [ "$website_name" = "Nextcloud" ] || [ "$website_name" = "Owncloud" ]; then
			if [ "$redis_enabled" ]; then
				if [ -d /opt/wwwroot/$website_name ] && [ ! -f /opt/wwwroot/$website_name/redis_enabled ]; then
					touch /opt/wwwroot/$website_name/redis_enabled
					redis "/opt/wwwroot/$website_name"
				fi
			else
				rm -rf /opt/wwwroot/$website_name/config/config.php
				rm -rf /opt/wwwroot/$website_name/redis_enabled
			fi
		fi
		port_modification "/opt/etc/nginx/vhost/$website_name.conf"
		/opt/etc/init.d/S80nginx reload >/dev/null 2>&1
	else
		if [ -f /opt/etc/nginx/vhost/$website_name.conf ]; then
			mv /opt/etc/nginx/vhost/$website_name.conf /opt/etc/nginx/no_use/$website_name.conf
			/opt/etc/init.d/S80nginx reload >/dev/null 2>&1 && \
			echo_time " 已关闭 $website_name\n"
		fi
	fi
	website_config_list="$website_config_list $website_name"
}

start() {
	CDG() {
		config_load softwarecenter
		get_config="cpu_model delaytime deploy_entware deploy_mysql deploy_nginx disk_mount download_dir entware_enable mysql_enabled nginx_enabled partition_disk pass swap_enabled swap_path swap_size user"

		for rt in $get_config; do
			config_get_bool $rt main $rt
			config_get $rt main $rt
		done

		# entware环境
		source /etc/profile >/dev/null 2>&1
		if [ $entware_enable ]; then
			if [ ! -e /etc/init.d/entware ]; then
				echo_time "========= 开始部署entware环境 =========\n"
				entware_set $disk_mount $cpu_model
				source /etc/profile >/dev/null 2>&1
			fi
		else
			if [ -x /etc/init.d/entware ]; then
				entware_unset
				echo_time "========= entware环境已删除 =========\n"
			fi
			return 1
		fi

		# Nginx
		if [ $deploy_nginx ]; then
			[ ! -x /opt/etc/init.d/S80nginx ] && echo_time "========= 开始安装Nginx =========\n" && init_nginx
			if [ $nginx_enabled ]; then
				[ "$(pidof nginx)" ] || nginx_manage start
				config_foreach handle_website website test
				clean_vhost_config
			else
				nginx_manage stop
			fi
		else
			[ -x /opt/etc/init.d/S80nginx ] && echo_time "========= 卸载Nginx相关的软件包 =========\n" && del_nginx
		fi

		# MySQL
		if [ $deploy_mysql ]; then
			[ ! -x /opt/etc/init.d/S70mysqld ] && echo_time "========= 开始安装MySQL =========\n" && init_mysql
			if [ $mysql_enabled ]; then
				[ "$(pidof mysqld)" ] || /opt/etc/init.d/S70mysqld start >/dev/null 2>&1
			else
				/opt/etc/init.d/S70mysqld stop >/dev/null 2>&1
			fi
		else
			[ -x /opt/etc/init.d/S70mysqld ] && echo_time "========= 卸载MySQL相关的软件包 =========\n" && del_mysql
		fi

		[ $swap_enabled ] && config_swap_init $swap_size $swap_path || config_swap_del $swap_path

		grep -q "_boot" /etc/config/softwarecenter && {
			for pk in $(awk '/_boot/{print $2}' /etc/config/softwarecenter | sed 's/_boot//'); do
				[ "$(uci get softwarecenter.main.${pk}_boot)" = 1 ] && {
					jd=`find /opt/etc/init.d/ -perm '-u+x' -name "*$pk"`
					if [ -x "$jd" ]; then
						if ! _pidof "$pk" >/dev/null 2>&1; then
							# echo_time "$pk 启动"
							[ $delaytime ] && sleep $delaytime
							if $jd start >/dev/null 2>&1; then
								echo_time "$pk 启动成功"
							else
								echo_time "$pk 启动失败"
							fi
						# else
							# echo_time "$pk 已在运行"
						fi
					else
						echo_time "=========== 开始安装 $pk ==========="
						/usr/bin/softwarecenter/lib_functions.sh $pk
						echo_time "=========== $pk 安装完成 ===========\n"
					fi
				}
			done
		}
	}
	CDG >>/tmp/log/softwarecenter.log
}

stop() {
	:
}

restart() {
	stop
	start
}
