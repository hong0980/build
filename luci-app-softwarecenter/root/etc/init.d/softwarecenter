#!/bin/sh /etc/rc.common
# Copyright (C) 2019 Jianpeng Xiang (1505020109@mail.hnust.edu.cn)
# This is free software, licensed under the GNU General Public License v3.

START=52
STOP=10

# 导入函数库
. /usr/bin/softwarecenter/website_manager.sh
. /usr/bin/softwarecenter/mysql_install.sh
. /usr/bin/softwarecenter/nginx_install.sh
website_config_list=""

#本函数负责清理未写入配置的网站
clean_vhost_config() {
	local_config_list="$(ls /opt/etc/nginx/vhost | cut -d. -f1)"
	local_no_use_config_list="$(ls /opt/etc/nginx/no_use | cut -d. -f1)"
	delete_config_list=""

	# 获取要删除的网站
	for i in $local_config_list; do
		flag=""
		for j in $website_config_list; do
			if [ "$i" == "$j" ]; then
				flag="1"
				break
			fi
		done
		if [ -z $flag ]; then
			delete_config_list="$delete_config_list /opt/etc/nginx/vhost/$i.conf"
		fi
	done
	for i in $local_no_use_config_list; do
		flag=""
		for j in $website_config_list; do
			if [ "$i" == "$j" ]; then
				flag="1"
				break
			fi
		done
		if [ -z $flag ]; then
			delete_config_list="$delete_config_list /opt/etc/nginx/no_use/$i.conf"
		fi
	done

	for conf in $delete_config_list; do
		webdir=$(vhost_config_list $conf | awk '{print $1}')
		delete_website $conf $webdir
	done
}

# 网站迭代处理，本函数迭代的配置网站（处理逻辑也许可以更好的优化？）
handle_website() {

	website_config="website_enabled autodeploy_enable customdeploy_enabled redis_enabled website_dir website_select port"

	for pl in $website_config; do
		local $pl
		config_get_bool $pl $1 $pl
		config_get $pl $1 $pl
	done

	if [ -z "$entware_enable" ]; then
		echo_time "softwarecenter 没有启动"
		exit 0
	fi

	# echo "获取网站配置文件名"
	if [ "$autodeploy_enable" ]; then
		# 获取网站名称
		website_name=$(website_name_mapping $website_select)
	elif [ "$customdeploy_enabled" ]; then
		website_name="$(echo $website_dir | awk -F"[/]" '{print $NF}')"
	else
		return
	fi

	if [ "$website_enabled" ]; then
		if [ -f /opt/etc/nginx/no_use/$website_name.conf ]; then
			echo_time "启用 $website_name"
			mv /opt/etc/nginx/no_use/$website_name.conf /opt/etc/nginx/vhost/$website_name.conf
			port_custom /opt/etc/nginx/vhost/$website_name.conf
			/opt/etc/init.d/S80nginx reload >/dev/null 2>&1
		elif [ ! -f /opt/etc/nginx/vhost/$website_name.conf ]; then
			if [ "$autodeploy_enable" ]; then
				install_website $website_select $port && echo_time "$name 安装完成"
				/opt/etc/init.d/S80nginx reload >/dev/null 2>&1
			elif [ "$customdeploy_enabled" ]; then
				install_custom $website_dir $port #检查自定义网站是否正常工作？
			fi
		fi

		if [ "$autodeploy_enable" ] && [ "$website_name" = "Nextcloud" ] || [ "$website_name" = "Owncloud" ]; then
			if [ "$redis_enabled" ]; then
				if [ -d /opt/wwwroot/$website_name ] && [ ! -f /opt/wwwroot/$website_name/redis_enabled ]; then
					touch /opt/wwwroot/$website_name/redis_enabled
					redis "/opt/wwwroot/$website_name"
				fi
			else
				rm -rf /opt/wwwroot/$website_name/config/config.php
				rm -rf /opt/wwwroot/$website_name/redis_enabled
			fi
			Port_modification "/opt/etc/nginx/vhost/$website_name.conf"
		fi
	else
		# echo_time "网站 $website_name 已关闭"
		if [ -f /opt/etc/nginx/vhost/$website_name.conf ]; then
			mv /opt/etc/nginx/vhost/$website_name.conf /opt/etc/nginx/no_use/$website_name.conf
			/opt/etc/init.d/S80nginx reload >/dev/null 2>&1
		fi
	fi

	website_config_list="$website_config_list $website_name"
}

start() {

	CDG() {
		config_load softwarecenter
		get_config="entware_enable deploy_entware deploy_nginx deploy_mysql nginx_enabled mysql_enabled swap_enabled Partition_disk disk_mount cpu_model swap_size swap_path user pass delaytime"

		for p in $get_config; do
			local $p
			config_get_bool $p main $p
			config_get $p main $p
		done

		# entware环境
		source /etc/profile >/dev/null 2>&1
		if [ $entware_enable ]; then
			if [ ! -e /etc/init.d/entware ]; then
				echo_time "开始部署entware环境\n"
				entware_set $disk_mount $cpu_model
				source /etc/profile >/dev/null 2>&1
			fi
		else
			if [ -x /etc/init.d/entware ]; then
				echo_time "entware环境已删除\n"
				entware_unset
			fi
			return
		fi

		# Nginx
		if [ $deploy_nginx ]; then
			[ ! -x /opt/etc/init.d/S80nginx ] && echo_time "开始安装Nginx\n" && init_nginx
			if [ $nginx_enabled ]; then
				[ "$(pidof nginx)" ] || nginx_manage start >/dev/null 2>&1
				config_foreach handle_website website test
				clean_vhost_config
			else
				nginx_manage stop >/dev/null 2>&1
			fi
		else
			[ -x /opt/etc/init.d/S80nginx ] && echo_time "卸载Nginx相关的软件包" && del_nginx
		fi

		# MySQL
		if [ $deploy_mysql ]; then
			[ ! -x /opt/etc/init.d/S70mysqld ] && echo_time "开始安装MySQL\n" && init_mysql
			if [ $mysql_enabled ]; then
				[ "$(pidof mysqld)" ] || /opt/etc/init.d/S70mysqld start >/dev/null 2>&1
			else
				/opt/etc/init.d/S70mysqld stop >/dev/null 2>&1
			fi
		else
			[ -x /opt/etc/init.d/S70mysqld ] && echo_time "卸载MySQL相关的软件包" && del_mysql
		fi

		[ $swap_enabled ] && config_swap_init $swap_size $swap_path || config_swap_del $swap_path

		start_up() {
			if ! pidof $1 >/dev/null 2>&1; then
				[ $delaytime ] && sleep $delaytime
				if $(ls /opt/etc/init.d/*$p) start >/dev/null 2>&1; then
					echo_time "$p 启动成功"
				else
					echo_time "$p 启动失败"
				fi
			# else
				# echo_time "$p 已经启动！"
			fi
		}

		for p in $(awk '/_boot/{print $2}' /etc/config/softwarecenter | cut -d_ -f1); do
			if [ "$(uci get softwarecenter.main.${p}_boot)" = 1 ]; then
				[ $p = aria2 ] && start_up "aria2c"
				[ $p = amuled ] && start_up "amuled"
				[ $p = deluged ] && start_up "deluged"
				[ $p = rtorrent ] && start_up "rtorrent"
				[ $p = qbittorrent ] && start_up "qbittorrent-nox"
				[ $p = transmission ] && start_up "transmission-daemon"
			fi
		done
	}
	CDG >>/tmp/log/softwarecenter.log
}

stop() {
	:
}

restart() {
	stop
	start
}
